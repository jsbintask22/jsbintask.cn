<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jsbintask的博客</title>
  
  <subtitle>Do it right at the first time.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jsbintask.cn/"/>
  <updated>2019-01-09T06:15:00.000Z</updated>
  <id>http://jsbintask.cn/</id>
  
  <author>
    <name>jsbintask</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springsecurity系列教程-初始化配置源码解析</title>
    <link href="http://jsbintask.cn/2019/01/08/springsecurity-configsourcecode/"/>
    <id>http://jsbintask.cn/2019/01/08/springsecurity-configsourcecode/</id>
    <published>2019-01-08T06:15:00.000Z</published>
    <updated>2019-01-09T06:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springsecurity从helloworld到源码解析（二）：springsecurity配置加载解析"><a href="#Springsecurity从helloworld到源码解析（二）：springsecurity配置加载解析" class="headerlink" title="Springsecurity从helloworld到源码解析（二）：springsecurity配置加载解析"></a>Springsecurity从helloworld到源码解析（二）：springsecurity配置加载解析</h1><p><img src="http://pkdfqapwh.bkt.clouddn.com/alien_telephone_line_by_hypex2772_dcwhux0-fullview.jpg"><br><a id="more"></a><br><em>上一篇博客我们介绍了hellowrold入门，并且成功的看到了springsecurity的拦截效果，接下来我们就来看看springsecurity是如何做到的。</em></p><h1 id="启动配置详解"><a href="#启动配置详解" class="headerlink" title="启动配置详解"></a>启动配置详解</h1><p>我们知道（不知道的就当知道吧，哈哈），springboot启动时会帮我自动配置好很多的默认配置项，并且加载配置类都会写在spring.factories文件中，所以我们这里开始，看看springsecurity做了<br>那些配置，打开idea，ctrl+shift+n * 2，查找spring.factories文件：如下：<br><a href="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo3.png" target="_blank" rel="noopener">spring.factories</a><br>随后在该配置文件中，查找security，如下：<br><a href="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo4.png" target="_blank" rel="noopener">security</a><br>我们可以看到，一共初始化了9个security相关的类，这里我们不关注oauth2（以后再说）和reactive（springboot2以后新特性），还有<br><strong>SecurityAutoConfiguration， SecurityRequestMatcherProviderAutoConfiguration， SecurityFilterAutoConfiguration, UserDetailsServiceAutoConfiguration</strong>这四个类，首先我们看下</p><h3 id="SecurityAutoConfiguration："><a href="#SecurityAutoConfiguration：" class="headerlink" title="SecurityAutoConfiguration："></a>SecurityAutoConfiguration：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(DefaultAuthenticationEventPublisher.class)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(SecurityProperties.class)</span><br><span class="line"><span class="meta">@Import</span>(&#123; SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class,</span><br><span class="line">SecurityDataConfiguration.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(AuthenticationEventPublisher.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultAuthenticationEventPublisher <span class="title">authenticationEventPublisher</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ApplicationEventPublisher publisher)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultAuthenticationEventPublisher(publisher);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>1.可以看出，这个类初始化了DefaultAuthenticationEventPublisher，看名字就知道，一个事件发布器，其内部实现就是spring的ApplicationEventPublisher，<br>用于springsecurity各种权限时间的交互，如登陆失败，会发布一个事件，然后通知其它组件做出相应的响应。</p></li><li><p>2.导入了一个配置类，SecurityProperties，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name = <span class="string">"user"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; roles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> passwordGenerated = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure></li></ul><p>现在我们知道，我们上一篇博客中yml文件中配置的用户名密码就是这这里的配置，如果不进行配置，默认生成一个uuid的密码，从控制台可以看到该密码。</p><ul><li>3.另外导入了三个配置项<br><strong>SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class, SecurityDataConfiguration.class</strong><br>其中data相关的因为此处我们没有导入spring-data相关的引用，不生效。<br>然后我们继续观察 WebSecurityEnablerConfiguration.class，看名字我们知道这是web环境下的初始化的配置，如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(WebSecurityConfigurerAdapter.class)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityEnablerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>主要作用帮我们加入了 <strong>@EnableWebSecurity</strong>注解，该注解的作用为开启springsecurity httpsecurity的自定义配置，即我们可以自己定义web环境的url配置（后面的主要关注点）。<br>接下来就是<strong>@SpringBootWebSecurityConfiguration</strong>，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(WebSecurityConfigurerAdapter.class)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(WebSecurityConfigurerAdapter.class)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootWebSecurityConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Order</span>(SecurityProperties.BASIC_AUTH_ORDER)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关键点来了，这个配置项检查了servlet环境下spring容器中是否有WebSecurityConfiguraerAdapter这个bean，如果没有，就帮我们默认初始化了一个。所以我们对于springsecurity<br>的配置就要继承WebSecurityConfigurerAdapter，然后实现自定义的配置。<br><strong>以上就是SecurityAutoConfiguration该配置项的作用，接下来我们看下SecurityRequestMatcherProviderAutoConfiguration</strong></p><h2 id="SecurityRequestMatcherProviderAutoConfiguration"><a href="#SecurityRequestMatcherProviderAutoConfiguration" class="headerlink" title="SecurityRequestMatcherProviderAutoConfiguration"></a>SecurityRequestMatcherProviderAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; RequestMatcher.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityRequestMatcherProviderAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(DispatcherServlet.class)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(HandlerMappingIntrospector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcRequestMatcherConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(DispatcherServlet.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestMatcherProvider <span class="title">requestMatcherProvider</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HandlerMappingIntrospector introspector)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MvcRequestMatcherProvider(introspector);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ResourceConfig.class)</span><br><span class="line"><span class="meta">@ConditionalOnMissingClass</span>(<span class="string">"org.springframework.web.servlet.DispatcherServlet"</span>)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(JerseyApplicationPath.class)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JerseyRequestMatcherConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestMatcherProvider <span class="title">requestMatcherProvider</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">JerseyApplicationPath applicationPath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JerseyRequestMatcherProvider(applicationPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，主要初始化了一个MvcRequestMatcherProvider，了解过springmvc的同学应该知道，springmvc处理请求映射的主要类就是HandlerMapping，而HandlerMappingIntrospector<br>类是HandlerMapping的集合工具类，springsecurity此处就是从spring容器中获取了该工具类，然后供自己内部使用(处理我们的自定义映射，后面具体讲解）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcRequestMatcherProvider</span> <span class="keyword">implements</span> <span class="title">RequestMatcherProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HandlerMappingIntrospector introspector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MvcRequestMatcherProvider</span><span class="params">(HandlerMappingIntrospector introspector)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.introspector = introspector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestMatcher <span class="title">getRequestMatcher</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MvcRequestMatcher(<span class="keyword">this</span>.introspector, pattern);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就是<strong>SecurityFilterAutoConfiguration</strong>了：</p><h2 id="SecurityFilterAutoConfiguration"><a href="#SecurityFilterAutoConfiguration" class="headerlink" title="SecurityFilterAutoConfiguration"></a>SecurityFilterAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(SecurityProperties.class)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; AbstractSecurityWebApplicationInitializer.class,</span><br><span class="line">SessionCreationPolicy.class &#125;)</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(SecurityAutoConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityFilterAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(name = DEFAULT_FILTER_NAME)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DelegatingFilterProxyRegistrationBean <span class="title">securityFilterChainRegistration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SecurityProperties securityProperties)</span> </span>&#123;</span><br><span class="line">DelegatingFilterProxyRegistrationBean registration = <span class="keyword">new</span> DelegatingFilterProxyRegistrationBean(</span><br><span class="line">DEFAULT_FILTER_NAME);</span><br><span class="line">registration.setOrder(securityProperties.getFilter().getOrder());</span><br><span class="line">registration.setDispatcherTypes(getDispatcherTypes(securityProperties));</span><br><span class="line"><span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> EnumSet&lt;DispatcherType&gt; <span class="title">getDispatcherTypes</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SecurityProperties securityProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (securityProperties.getFilter().getDispatcherTypes() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> securityProperties.getFilter().getDispatcherTypes().stream()</span><br><span class="line">.map((type) -&gt; DispatcherType.valueOf(type.name())).collect(Collectors</span><br><span class="line">.collectingAndThen(Collectors.toSet(), EnumSet::copyOf));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们发现这个类有一个@AutoConfigureAfter(SecurityAutoConfiguration.class)，也就是说这个类要在我们讲的第一个<strong>SecurityAutoConfiguration</strong>才行（why？ 别急），<br>然后它拿到我们一开始说的SecurityProperties，帮我们做了一个Filter：<strong>但是！这个filter具体是啥，它沒有直接告訴我們，只把它在spring中的bean的名字给出来了，springSecurityFilterChain</strong>，<br>也就是説存在一个这样名字的springsecurity的filter，然后被spring代理了，管理它的生命周期。但是从名字我们大概可以猜出，不只是一个filter，是一个filter列表，既然这样，那我们直接在项目中搜索，看那个地方有这个名字的bean<br>最终在该地方找到：<br><a href="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo5.png" target="_blank" rel="noopener">springSecurityFilterChain</a>，</p><h2 id="发现该类是在WebSecurityConfiguration中初始化的，那WebSecurityConfiguration又是在哪来的呢，上面我们说到-EnableWebSecurity的时候，开启WebSecurityAdapter的配置，其实那个时候已经导入了（哈哈，上面我也没注意到），"><a href="#发现该类是在WebSecurityConfiguration中初始化的，那WebSecurityConfiguration又是在哪来的呢，上面我们说到-EnableWebSecurity的时候，开启WebSecurityAdapter的配置，其实那个时候已经导入了（哈哈，上面我也没注意到），" class="headerlink" title="发现该类是在WebSecurityConfiguration中初始化的，那WebSecurityConfiguration又是在哪来的呢，上面我们说到@EnableWebSecurity的时候，开启WebSecurityAdapter的配置，其实那个时候已经导入了（哈哈，上面我也没注意到），"></a>发现该类是在WebSecurityConfiguration中初始化的，那<strong>WebSecurityConfiguration</strong>又是在哪来的呢，上面我们说到@EnableWebSecurity的时候，开启WebSecurityAdapter的配置，其实那个时候已经导入了（哈哈，上面我也没注意到），</h2><h3 id="springSecurityFilterChain"><a href="#springSecurityFilterChain" class="headerlink" title="springSecurityFilterChain"></a>springSecurityFilterChain</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> WebSecurity webSecurity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Boolean debugEnabled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; webSecurityConfigurers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ClassLoader beanClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"springSecurityFilterChain"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Filter <span class="title">springSecurityFilterChain</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> hasConfigurers = webSecurityConfigurers != <span class="keyword">null</span></span><br><span class="line">&amp;&amp; !webSecurityConfigurers.isEmpty();</span><br><span class="line"><span class="keyword">if</span> (!hasConfigurers) &#123;</span><br><span class="line">WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor</span><br><span class="line">.postProcess(<span class="keyword">new</span> WebSecurityConfigurerAdapter() &#123;</span><br><span class="line">&#125;);</span><br><span class="line">webSecurity.apply(adapter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> webSecurity.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到这个初始化类有两个主要成员变量，WebSecurity和webSecurityConfigurers，而从这个springSecurityFilterChain方法我们可以看到该filter是通过构造器WebSecurity构造而来，<br>纳尼？ 既然Websecurity构造了springSecurityFilterChain，那为什么下面还有一个 webSecurityConfigurers，并且是一个WebSecurity的list呢？<br>别急，我们来看下他们之间的关系。我们注意到还有这样一个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilterChainProxySecurityConfigurer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectPostProcessor&lt;Object&gt; objectPostProcessor,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Value(<span class="string">"#&#123;@autowiredWebSecurityConfigurersIgnoreParents.getWebSecurityConfigurers()&#125;"</span>)</span> List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; webSecurityConfigurers)</span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    webSecurity = objectPostProcessor</span><br><span class="line">            .postProcess(<span class="keyword">new</span> WebSecurity(objectPostProcessor));</span><br><span class="line">    <span class="keyword">if</span> (debugEnabled != <span class="keyword">null</span>) &#123;</span><br><span class="line">        webSecurity.debug(debugEnabled);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Collections.sort(webSecurityConfigurers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line"></span><br><span class="line">    Integer previousOrder = <span class="keyword">null</span>;</span><br><span class="line">    Object previousConfig = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (SecurityConfigurer&lt;Filter, WebSecurity&gt; config : webSecurityConfigurers) &#123;</span><br><span class="line">        Integer order = AnnotationAwareOrderComparator.lookupOrder(config);</span><br><span class="line">        <span class="keyword">if</span> (previousOrder != <span class="keyword">null</span> &amp;&amp; previousOrder.equals(order)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"@Order on WebSecurityConfigurers must be unique. Order of "</span></span><br><span class="line">                            + order + <span class="string">" was already used on "</span> + previousConfig + <span class="string">", so it cannot be used on "</span></span><br><span class="line">                            + config + <span class="string">" too."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        previousOrder = order;</span><br><span class="line">        previousConfig = config;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (SecurityConfigurer&lt;Filter, WebSecurity&gt; webSecurityConfigurer : webSecurityConfigurers) &#123;</span><br><span class="line">        webSecurity.apply(webSecurityConfigurer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.webSecurityConfigurers = webSecurityConfigurers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从这里我们就知道他们的关系了， 这个webSecurityConfigurers是通过spring注入进去的（尼玛，我都快整蒙圈了），他就代表那个过滤器链，也就是权限控制的关键，而我们一开始看到的Websecurity就是这个过滤器链的入口，由它来一个个的将<br>过过滤器链引用作为自己的成员变量，好了，他们之间的关系我们搞清楚了，接下来就又多了一个新问题，那个过滤器链又是在哪里给初始化了呢。</p><blockquote><p>@Value(“<a href="mailto:#{@autowiredWebSecurityConfigurersIgnoreParents.getWebSecurityConfigurers" target="_blank" rel="noopener">#{@autowiredWebSecurityConfigurersIgnoreParents.getWebSecurityConfigurers</a>()}”)</p></blockquote><p>这个el表达式的bean同样在这个配置类中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AutowiredWebSecurityConfigurersIgnoreParents <span class="title">autowiredWebSecurityConfigurersIgnoreParents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AutowiredWebSecurityConfigurersIgnoreParents(beanFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那我们继续看这个AutowiredWebSecurityConfigurersIgnoreParents，它拿到了spring的容器beanFactory，然后得到了那个过滤器链，然后我还是太天真：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; getWebSecurityConfigurers() &#123;</span><br><span class="line">List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; webSecurityConfigurers = <span class="keyword">new</span> ArrayList&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt;();</span><br><span class="line">Map&lt;String, WebSecurityConfigurer&gt; beansOfType = beanFactory</span><br><span class="line">.getBeansOfType(WebSecurityConfigurer.class);</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, WebSecurityConfigurer&gt; entry : beansOfType.entrySet()) &#123;</span><br><span class="line">webSecurityConfigurers.add(entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> webSecurityConfigurers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它居然不是直接初始化的，而是从beanFactory中取出来了所有WebSecurityConfigurer类型的bean，尼玛！那我们接着看实现了WebSecurityConfigurer并且作为bean在spring中已经初始化了类是哪一个，<br>不着不知道，依照吓一跳，查看类关系，居然又回到了最初的起点：<br><a href="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo6.png" target="_blank" rel="noopener">springSecurityFilterChain</a><br><strong>又是它！</strong>，我们继续查看他，终于！我们找到了那个过滤器链！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> HttpSecurity <span class="title">getHttp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (http != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> http;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    DefaultAuthenticationEventPublisher eventPublisher = objectPostProcessor</span><br><span class="line">            .postProcess(<span class="keyword">new</span> DefaultAuthenticationEventPublisher());</span><br><span class="line">    localConfigureAuthenticationBldr.authenticationEventPublisher(eventPublisher);</span><br><span class="line">    </span><br><span class="line">    AuthenticationManager authenticationManager = authenticationManager();</span><br><span class="line">    authenticationBuilder.parentAuthenticationManager(authenticationManager);</span><br><span class="line">    authenticationBuilder.authenticationEventPublisher(eventPublisher);</span><br><span class="line">    Map&lt;Class&lt;? extends Object&gt;, Object&gt; sharedObjects = createSharedObjects();</span><br><span class="line">    </span><br><span class="line">    http = <span class="keyword">new</span> HttpSecurity(objectPostProcessor, authenticationBuilder,</span><br><span class="line">            sharedObjects);</span><br><span class="line">    <span class="keyword">if</span> (!disableDefaults) &#123;</span><br><span class="line">        <span class="comment">// @formatter:off</span></span><br><span class="line">        http</span><br><span class="line">            .csrf().and()</span><br><span class="line">            .addFilter(<span class="keyword">new</span> WebAsyncManagerIntegrationFilter())</span><br><span class="line">            .exceptionHandling().and()</span><br><span class="line">            .headers().and()</span><br><span class="line">            .sessionManagement().and()</span><br><span class="line">            .securityContext().and()</span><br><span class="line">            .requestCache().and()</span><br><span class="line">            .anonymous().and()</span><br><span class="line">            .servletApi().and()</span><br><span class="line">            .apply(<span class="keyword">new</span> DefaultLoginPageConfigurer&lt;&gt;()).and()</span><br><span class="line">            .logout();</span><br><span class="line">        <span class="comment">// @formatter:on</span></span><br><span class="line">        ClassLoader classLoader = <span class="keyword">this</span>.context.getClassLoader();</span><br><span class="line">        List&lt;AbstractHttpConfigurer&gt; defaultHttpConfigurers =</span><br><span class="line">                SpringFactoriesLoader.loadFactories(AbstractHttpConfigurer.class, classLoader);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (AbstractHttpConfigurer configurer : defaultHttpConfigurers) &#123;</span><br><span class="line">            http.apply(configurer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    configure(http);</span><br><span class="line">    <span class="keyword">return</span> http;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>由此方法我们得知，最终的过滤器链是保存在HttpSecuriry中，并且通过spring把所有AbstractHttpConfigurer子类都加入到容器中并且加入到了过滤器链中 <strong><em>http:apply(…)</em></strong> ：<br>那我们看下AbstractHttpConfigurer有哪些子类<br><a href="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo7.png" target="_blank" rel="noopener">springSecurityFilterChain</a>，<br>:sob: 终于找到了，顺便看下HttpSecurity构成：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSecurity</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class"><span class="title">AbstractConfiguredSecurityBuilder</span>&lt;<span class="title">DefaultSecurityFilterChain</span>, <span class="title">HttpSecurity</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">SecurityBuilder</span>&lt;<span class="title">DefaultSecurityFilterChain</span>&gt;,</span></span><br><span class="line"><span class="class"><span class="title">HttpSecurityBuilder</span>&lt;<span class="title">HttpSecurity</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RequestMatcherConfigurer requestMatcherConfigurer;</span><br><span class="line"><span class="keyword">private</span> List&lt;Filter&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> RequestMatcher requestMatcher = AnyRequestMatcher.INSTANCE;</span><br><span class="line"><span class="keyword">private</span> FilterComparator comparator = <span class="keyword">new</span> FilterComparator();</span><br></pre></td></tr></table></figure></p><p>另外从上面那个方法中，我们还看到了一个很熟悉的过滤器：DefaultLoginPageConfigurer，我们查看它。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DefaultLoginPageGeneratingFilter loginPageGeneratingFilter = <span class="keyword">new</span> DefaultLoginPageGeneratingFilter();</span><br><span class="line"><span class="keyword">private</span> DefaultLogoutPageGeneratingFilter logoutPageGeneratingFilter = <span class="keyword">new</span> DefaultLogoutPageGeneratingFilter();</span><br></pre></td></tr></table></figure></p><p>它有两个过滤器，登陆页面和注销页面，我们继续查看登陆页面，这个时候发现一点意外的收获：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> loginError = isErrorPage(request);</span><br><span class="line"><span class="keyword">boolean</span> logoutSuccess = isLogoutSuccess(request);</span><br><span class="line"><span class="keyword">if</span> (isLoginUrlRequest(request) || loginError || logoutSuccess) &#123;</span><br><span class="line">String loginPageHtml = generateLoginPageHtml(request, loginError,</span><br><span class="line">logoutSuccess);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">response.setContentLength(loginPageHtml.getBytes(StandardCharsets.UTF_8).length);</span><br><span class="line">response.getWriter().write(loginPageHtml);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">generateLoginPageHtml</span><span class="params">(HttpServletRequest request, <span class="keyword">boolean</span> loginError,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> logoutSuccess)</span> </span>&#123;</span><br><span class="line">String errorMsg = <span class="string">"Invalid credentials"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (loginError) &#123;</span><br><span class="line">HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">AuthenticationException ex = (AuthenticationException) session</span><br><span class="line">.getAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);</span><br><span class="line">errorMsg = ex != <span class="keyword">null</span> ? ex.getMessage() : <span class="string">"Invalid credentials"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">"&lt;!DOCTYPE html&gt;\n"</span></span><br><span class="line">+ <span class="string">"&lt;html lang=\"en\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"  &lt;head&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;meta charset=\"utf-8\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;meta name=\"description\" content=\"\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;meta name=\"author\" content=\"\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;title&gt;Please sign in&lt;/title&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M\" crossorigin=\"anonymous\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;link href=\"https://getbootstrap.com/docs/4.0/examples/signin/signin.css\" rel=\"stylesheet\" crossorigin=\"anonymous\"/&gt;\n"</span></span><br><span class="line">+ <span class="string">"  &lt;/head&gt;\n"</span></span><br><span class="line">+ <span class="string">"  &lt;body&gt;\n"</span></span><br><span class="line">+ <span class="string">"     &lt;div class=\"container\"&gt;\n"</span>);</span><br><span class="line"></span><br><span class="line">String contextPath = request.getContextPath();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.formLoginEnabled) &#123;</span><br><span class="line">sb.append(<span class="string">"      &lt;form class=\"form-signin\" method=\"post\" action=\""</span> + contextPath + <span class="keyword">this</span>.authenticationUrl + <span class="string">"\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"        &lt;h2 class=\"form-signin-heading\"&gt;Please sign in&lt;/h2&gt;\n"</span></span><br><span class="line">+ createError(loginError, errorMsg)</span><br><span class="line">+ createLogoutSuccess(logoutSuccess)</span><br><span class="line">+ <span class="string">"        &lt;p&gt;\n"</span></span><br><span class="line">+ <span class="string">"          &lt;label for=\"username\" class=\"sr-only\"&gt;Username&lt;/label&gt;\n"</span></span><br><span class="line">+ <span class="string">"          &lt;input type=\"text\" id=\"username\" name=\""</span> + <span class="keyword">this</span>.usernameParameter + <span class="string">"\" class=\"form-control\" placeholder=\"Username\" required autofocus&gt;\n"</span></span><br><span class="line">+ <span class="string">"        &lt;/p&gt;\n"</span></span><br><span class="line">+ <span class="string">"        &lt;p&gt;\n"</span></span><br><span class="line">+ <span class="string">"          &lt;label for=\"password\" class=\"sr-only\"&gt;Password&lt;/label&gt;\n"</span></span><br><span class="line">+ <span class="string">"          &lt;input type=\"password\" id=\"password\" name=\""</span> + <span class="keyword">this</span>.passwordParameter + <span class="string">"\" class=\"form-control\" placeholder=\"Password\" required&gt;\n"</span></span><br><span class="line">+ <span class="string">"        &lt;/p&gt;\n"</span></span><br><span class="line">+ createRememberMe(<span class="keyword">this</span>.rememberMeParameter)</span><br><span class="line">+ renderHiddenInputs(request)</span><br><span class="line">+ <span class="string">"        &lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\"&gt;Sign in&lt;/button&gt;\n"</span></span><br><span class="line">+ <span class="string">"      &lt;/form&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (openIdEnabled) &#123;</span><br><span class="line">sb.append(<span class="string">"      &lt;form name=\"oidf\" class=\"form-signin\" method=\"post\" action=\""</span> + contextPath + <span class="keyword">this</span>.openIDauthenticationUrl + <span class="string">"\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"        &lt;h2 class=\"form-signin-heading\"&gt;Login with OpenID Identity&lt;/h2&gt;\n"</span></span><br><span class="line">+ createError(loginError, errorMsg)</span><br><span class="line">+ createLogoutSuccess(logoutSuccess)</span><br><span class="line">+ <span class="string">"        &lt;p&gt;\n"</span></span><br><span class="line">+ <span class="string">"          &lt;label for=\"username\" class=\"sr-only\"&gt;Identity&lt;/label&gt;\n"</span></span><br><span class="line">+ <span class="string">"          &lt;input type=\"text\" id=\"username\" name=\""</span> + <span class="keyword">this</span>.openIDusernameParameter + <span class="string">"\" class=\"form-control\" placeholder=\"Username\" required autofocus&gt;\n"</span></span><br><span class="line">+ <span class="string">"        &lt;/p&gt;\n"</span></span><br><span class="line">+ createRememberMe(<span class="keyword">this</span>.openIDrememberMeParameter)</span><br><span class="line">+ renderHiddenInputs(request)</span><br><span class="line">+ <span class="string">"        &lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\"&gt;Sign in&lt;/button&gt;\n"</span></span><br><span class="line">+ <span class="string">"      &lt;/form&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (oauth2LoginEnabled) &#123;</span><br><span class="line">sb.append(<span class="string">"&lt;h2 class=\"form-signin-heading\"&gt;Login with OAuth 2.0&lt;/h3&gt;"</span>);</span><br><span class="line">sb.append(createError(loginError, errorMsg));</span><br><span class="line">sb.append(createLogoutSuccess(logoutSuccess));</span><br><span class="line">sb.append(<span class="string">"&lt;table class=\"table table-striped\"&gt;\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; clientAuthenticationUrlToClientName : oauth2AuthenticationUrlToClientName.entrySet()) &#123;</span><br><span class="line">sb.append(<span class="string">" &lt;tr&gt;&lt;td&gt;"</span>);</span><br><span class="line">String url = clientAuthenticationUrlToClientName.getKey();</span><br><span class="line">sb.append(<span class="string">"&lt;a href=\""</span>).append(contextPath).append(url).append(<span class="string">"\"&gt;"</span>);</span><br><span class="line">String clientName = HtmlUtils.htmlEscape(clientAuthenticationUrlToClientName.getValue());</span><br><span class="line">sb.append(clientName);</span><br><span class="line">sb.append(<span class="string">"&lt;/a&gt;"</span>);</span><br><span class="line">sb.append(<span class="string">"&lt;/td&gt;&lt;/tr&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">"&lt;/table&gt;&lt;/div&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们的helloworld那一篇博客中的登陆页面即来源于此！（还有点惊喜哈:joy:），谈到这，突然记起我们上面谈了一个问题。<br>@AutoConfigureAfter(SecurityAutoConfiguration.class)为什么要用这个，现在应该知道了吧（:joy:)，因为它要代理的filter在上一个注解。</p><hr><p>然后我们继续回来看WebSecurity这个构造器（是不是都已经忘记我们是在说这个类的:joy:），这个类很长，我们直接看注释以及主要成员变量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@link</span> WebSecurity&#125; is created by &#123;<span class="doctag">@link</span> WebSecurityConfiguration&#125; to create the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> FilterChainProxy&#125; known as the Spring Security Filter Chain</span></span><br><span class="line"><span class="comment"> * (springSecurityFilterChain). The springSecurityFilterChain is the &#123;<span class="doctag">@link</span> Filter&#125; that</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> DelegatingFilterProxy&#125; delegates to.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Customizations to the &#123;<span class="doctag">@link</span> WebSecurity&#125; can be made by creating a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> WebSecurityConfigurer&#125; or more likely by overriding</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> WebSecurityConfigurerAdapter&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> EnableWebSecurity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> WebSecurityConfiguration</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rob Winch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;RequestMatcher&gt; ignoredRequests = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;SecurityBuilder&lt;? extends SecurityFilterChain&gt;&gt; securityFilterChainBuilders = <span class="keyword">new</span> ArrayList&lt;SecurityBuilder&lt;? extends SecurityFilterChain&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> IgnoredRequestConfigurer ignoredRequestRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> FilterSecurityInterceptor filterSecurityInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HttpFirewall httpFirewall;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> debugEnabled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> WebInvocationPrivilegeEvaluator privilegeEvaluator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DefaultWebSecurityExpressionHandler defaultWebSecurityExpressionHandler = <span class="keyword">new</span> DefaultWebSecurityExpressionHandler();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SecurityExpressionHandler&lt;FilterInvocation&gt; expressionHandler = defaultWebSecurityExpressionHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Runnable postBuildAction = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>大概意思就是说这个类是被专门用来创建FilterChainProxy，即我们所知道的（springSecurityFilterChain），然后它的配置均来自于<br>WebSecurityConfigurer，默认实现是WebSecurityConfigurerAdapter，<strong>这是它第N次出现了！</strong><br>接下来我们研究下它的主要成员变量，List<requestmatcher> ignoredRequests = new ArrayList&lt;&gt;();一个匹配请求url的处理器，这处的作用是用来存储我们要忽略的url（不走springsecurity的过滤器链），<br>FilterSecurityInterceptor，过滤器链就是由它来调用的，HttpFirewall，看名字就知道起到了额外的配置作用（事实上初始化是一个空对象）。<br>securityFilterChainBuilders可以看成是WebSecurity内部过滤器链的引用。<br>defaultWebSecurityExpressionHandler是springsecurity el表达式处理器（后面讲解注解时我们再来回顾），比如说 <strong><em>hasAnyAuthority(…)</em></strong>，就可以由它来处理<br>另外还有一个 WebInvocationPrivilegeEvaluator，它叫做权限计算器，其实就是和防火墙一样，多了一层判断，它的默认实现是</requestmatcher></p><blockquote><p>public class DefaultWebInvocationPrivilegeEvaluator implements WebInvocationPrivilegeEvaluator {</p></blockquote><p>表示所有用户都由权限（因为是默认的）</p><p>最后，还有最后一个配置类<strong>UserDetailsServiceAutoConfiguration</strong></p><h2 id="UserDetailsServiceAutoConfiguration"><a href="#UserDetailsServiceAutoConfiguration" class="headerlink" title="UserDetailsServiceAutoConfiguration"></a>UserDetailsServiceAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(AuthenticationManager.class)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ObjectPostProcessor.class)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123; AuthenticationManager.class, AuthenticationProvider.class,</span><br><span class="line">UserDetailsService.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NOOP_PASSWORD_PREFIX = <span class="string">"&#123;noop&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PASSWORD_ALGORITHM_PATTERN = Pattern</span><br><span class="line">.compile(<span class="string">"^\\&#123;.+&#125;.*$"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory</span><br><span class="line">.getLog(UserDetailsServiceAutoConfiguration.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(type = <span class="string">"org.springframework.security.oauth2.client.registration.ClientRegistrationRepository"</span>)</span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InMemoryUserDetailsManager <span class="title">inMemoryUserDetailsManager</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SecurityProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;PasswordEncoder&gt; passwordEncoder)</span> </span>&#123;</span><br><span class="line">SecurityProperties.User user = properties.getUser();</span><br><span class="line">List&lt;String&gt; roles = user.getRoles();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> InMemoryUserDetailsManager(User.withUsername(user.getName())</span><br><span class="line">.password(getOrDeducePassword(user, passwordEncoder.getIfAvailable()))</span><br><span class="line">.roles(StringUtils.toStringArray(roles)).build());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getOrDeducePassword</span><span class="params">(SecurityProperties.User user,</span></span></span><br><span class="line"><span class="function"><span class="params">PasswordEncoder encoder)</span> </span>&#123;</span><br><span class="line">String password = user.getPassword();</span><br><span class="line"><span class="keyword">if</span> (user.isPasswordGenerated()) &#123;</span><br><span class="line">logger.info(String.format(<span class="string">"%n%nUsing generated security password: %s%n"</span>,</span><br><span class="line">user.getPassword()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (encoder != <span class="keyword">null</span> || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) &#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> NOOP_PASSWORD_PREFIX + password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次这个配置很简单，因为我们没有配置oauth2，所以它帮我们做了一个UserDetails，并且是根据我们配置的用户密码，把他们load到内存（因为没有db），以后的权限判断就根据<br>userDetails来判断了，由此可知，如果我们要扩展，实现该类也是必然的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次，我们从源码的角度查看了springboot帮我们做的配置（还真是绕了不少圈子），并且只得到了login页面的来源，接下来，我们就探究下springsecurity的具体配置！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springsecurity从helloworld到源码解析（二）：springsecurity配置加载解析&quot;&gt;&lt;a href=&quot;#Springsecurity从helloworld到源码解析（二）：springsecurity配置加载解析&quot; class=&quot;headerlink&quot; title=&quot;Springsecurity从helloworld到源码解析（二）：springsecurity配置加载解析&quot;&gt;&lt;/a&gt;Springsecurity从helloworld到源码解析（二）：springsecurity配置加载解析&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://pkdfqapwh.bkt.clouddn.com/alien_telephone_line_by_hypex2772_dcwhux0-fullview.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="http://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="http://jsbintask.cn/tags/java/"/>
    
      <category term="springsecurity" scheme="http://jsbintask.cn/tags/springsecurity/"/>
    
      <category term="springboot" scheme="http://jsbintask.cn/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springsecurity系列教程-helloworld</title>
    <link href="http://jsbintask.cn/2019/01/08/springsecurity-helloworld/"/>
    <id>http://jsbintask.cn/2019/01/08/springsecurity-helloworld/</id>
    <published>2019-01-08T03:11:00.000Z</published>
    <updated>2019-01-08T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity从Hello-World到源码解析（一）：hello-world程序入门"><a href="#SpringSecurity从Hello-World到源码解析（一）：hello-world程序入门" class="headerlink" title="SpringSecurity从Hello World到源码解析（一）：hello world程序入门"></a>SpringSecurity从Hello World到源码解析（一）：hello world程序入门</h1><p><img src="http://pkdfqapwh.bkt.clouddn.com/security.jpg"><br><a id="more"></a></p><blockquote><p>摘要：权限控制在我们的项目当中一般都有用到，有简单的登录就搞定的权限访问，也有分级身份的权限控制，<br>而权限控制的方式对于不同的需求也有多种选择，小到使用代码硬编码，自定义过滤器，自定义拦截器等等。更加灵活的方式则是使用已有的权限工具。<br>如shiro，springsecurity等。而本系列博客将重点介绍springsecurity的工作原理以及应用。</p></blockquote><blockquote><p>springsecurity的官方介绍：Spring Security是一个功能强大且可高度自定义的身份验证和访问控制框架。它是保护基于Spring的应用程序的框架。<br>Spring Security是一个专注于为Java应用程序提供身份验证和授权的框架。与所有Spring项目一样，Spring Security的真正强大之处在于它可以轻松扩展以满足自定义要求</p></blockquote><p><strong>从上面的介绍我们知道，spring security是基于spring框架的，所以与spring基本无缝集成，而本系列博客也将使用最新的springboot（没接触过的可以先学习<a href="https://jsbintask.cn/tags/springboot">springboot系列教程</a>）<br>进行演示，好了，说了这么多废话，接下来看hello world的入门搭建。</strong></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>基础环境，springboot: 2.1.1.RELEASE<br>注意，因为本项目演示有多个，所以我把他们构建成了多个子项目。<br>父pom文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>basic-security<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jsbintask<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-demos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-security-demos<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demos project for Spring Security<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>hello-world版本pom文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jsbintask<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-demos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>basic-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意上方引入了lombok和freemarker，主要为了演示方便。</p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><ol><li><p>环境搭建好后，接下来开始编写helloworld程序，首先编写一个freemarker模板（不知道的可以当作html处理）<br><strong>hello.html放到templates目录下方</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello world from jsbintask.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  freemarker:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    template-loader-path:</span> <span class="attr">classpath:/templates/</span></span><br><span class="line"><span class="attr">    suffix:</span> <span class="string">.html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">      roles:</span> <span class="string">user,</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure></li></ol><p>上方配置先不进行讲解，下章解析工作原理时会着重进行讲解，各位可以先跟着配置。</p><ol start="3"><li>编写controller<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(ModelAndView mv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>此处为映射请求 /hello 到我们编写的 hello.html程序。</p><ol start="4"><li>启动应用（main app)<br>接下来我们在浏览器访问 <a href="http://localhost:8080/hello" target="_blank" rel="noopener">hello</a>, 出现如下拦截页面：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo1.png"><br>代表我们的hello请求已经被拦截。接下来输入 application.yml中配置的用户名密码，成功访问。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo2.png" alt="springsecurity"><br><strong>我们的helloworld程序也就成功了。</strong></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本hello world程序展示了springboot结合springsecurity基础配置，接下来我将讲解springsecurity是如何工作的。<br>本项目git地址：<a href="https://github.com/jsbintask22/spring-security-demos" target="_blank" rel="noopener">spring-security-demos</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringSecurity从Hello-World到源码解析（一）：hello-world程序入门&quot;&gt;&lt;a href=&quot;#SpringSecurity从Hello-World到源码解析（一）：hello-world程序入门&quot; class=&quot;headerlink&quot; title=&quot;SpringSecurity从Hello World到源码解析（一）：hello world程序入门&quot;&gt;&lt;/a&gt;SpringSecurity从Hello World到源码解析（一）：hello world程序入门&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://pkdfqapwh.bkt.clouddn.com/security.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://jsbintask.cn/tags/java/"/>
    
      <category term="springsecurity" scheme="http://jsbintask.cn/tags/springsecurity/"/>
    
      <category term="springboot" scheme="http://jsbintask.cn/tags/springboot/"/>
    
  </entry>
  
</feed>
