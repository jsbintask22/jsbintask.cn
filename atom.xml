<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jsbintask的博客</title>
  
  <subtitle>Get more, get old.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jsbintask.cn/"/>
  <updated>2019-09-03T03:11:00.000Z</updated>
  <id>https://jsbintask.cn/</id>
  
  <author>
    <name>jsbintask</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入学习Seata（一）：什么是Seata</title>
    <link href="https://jsbintask.cn/2019/09/03/designpattern/seata-1/"/>
    <id>https://jsbintask.cn/2019/09/03/designpattern/seata-1/</id>
    <published>2019-09-03T03:11:00.000Z</published>
    <updated>2019-09-03T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深入学习Seata（一）：什么是Seata"><a href="#深入学习Seata（一）：什么是Seata" class="headerlink" title="深入学习Seata（一）：什么是Seata"></a>深入学习Seata（一）：什么是Seata</h2><h3 id="微服务与分布式事务"><a href="#微服务与分布式事务" class="headerlink" title="微服务与分布式事务"></a>微服务与分布式事务</h3><p>分布式事务是随着服务拆分而产生的问题，至于为什么要做服务拆分以及什么是微服务，可以参考下<a href="https://www.zhihu.com/question/65502802/answer/615568011" target="_blank" rel="noopener">这里</a><br>我们知道对于分布式场景而言，肯定是遵循<a href="https://www.hollischuang.com/archives/666" target="_blank" rel="noopener">CAP理论的</a>，所以对于这种情况下的事务而言，跨多个服务的调用事务则成了一个令人头疼的点，而Seata则是一个用于解决分布式环境下事务的框架。</p><h3 id="Seata历史介绍"><a href="#Seata历史介绍" class="headerlink" title="Seata历史介绍"></a>Seata历史介绍</h3><p>Seata是阿里开发的一个用于微服务架构的高性能易使用的分布式事务框架。<br>Seata由TXC（Taobao Transaction Constructor，阿里于2014开始着手解决分布式事务的内部框架）-》GTX（Global Transaction Service，阿里于2016年将TXC发布于云服务并且改名为GTX）-》Fescar（阿里于2019将GTS开源并改名为Fescar）-》<em>Seata</em>（Simple Extensible Autonomous Transaction Architecture，阿里将蚂蚁金服框架DTX与Fescar结合并且改名为Seata）<br>目前Seata已经是github上一个大热的项目，年初开源，现在发布至0.8.0版本，已经有11000的star数，并且在快速的更新迭代。 相信未来会是一个普遍的分布式事务解决方案。</p><h3 id="Seata架构"><a href="#Seata架构" class="headerlink" title="Seata架构"></a>Seata架构</h3><p>Seata目前的事务模式有AT，TCC，Saga三种模式，默认即是AT模式，AT本质上是2pc协议的一种实现，三种模式的不同后面文章再详细介绍。<br>这里我们简单介绍下Seata是如何解决分布式事务的</p><p>假设我们现在有一个商品购物的业务，对于后台系统而言有四个服务，Business(业务入口)，Storage（库存服务），Order（订单服务），Account（用户服务），用户通过Business购买商品下单，在系统内部会经历以下流程：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/seata/seata-1.png" alt="下单"><br>如图所示，Business通过rpc框架（dubbo，feign….)调用其他服务。Seata将上面整个调用链所产生的事务结合生成了一个全局事务：<br><img src="https://camo.githubusercontent.com/9d741875c9d7f99887fc4075b9fd4a4b67b69ade/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353031353435343937392d61313865313666362d656434312d343466312d396337612d6264383263346435666639392e706e67" alt=""><br>如图所示，对于全局事务而言，它由各个分支事务结合而成，而分支事务则代表一个服务的本地事务。</p><p>对于每个服务来说，代表了两种角色：<br><img src="https://camo.githubusercontent.com/b3a71332ae0a91db7f8616286a69b879fcbea672/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353239363739313037342d33626365376263652d303235652d343563332d393338362d3762393531333564616465382e706e67" alt="全局事务"><br>如图所示，对于每一个服务而言都有两种角色（TM，RM）,在全局事务的过程中，它们会与TC进行通信协助完成整个事务，可以简单介绍下每个角色的作用:<br><em>TC</em>： Transaction Coordinator，事务协调器：监视每个全局事务的状态，负责全局事务的提交和回滚。<br><em>TM</em>: Transaction Manager, 事务管理者：向TC<em>发起，提交，回滚</em>全局事务的请求。<br><em>RM</em>: Resource Manager, 资源管理器：服务向TC<em>发起，提交，报告</em>分支事务的请求，并且服务本地事务的回滚，提交。<br><img src="https://camo.githubusercontent.com/e8fd6ca40ba959962a537cbc1be58013486cf46c/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353031333931353238362d34613930663064662d356664612d343165312d393165302d3261613364333331633033352e706e67" alt=""></p><p>Seata处理一个全局事务的流程如下：</p><ol><li>TM向TC请求发起一个全局事务，TC返回一个代表这个全局事务的XID。</li><li>XID在rpc中传播给每一个调用链中的服务。</li><li>每个RM拿到XID后向TC发起一个分支事务，TC返回一个代表这个分支事务的XID。</li><li>RM完成本地分支的业务，提交本地分支，并且报告给TC。</li><li>全局事务调用链处理完毕，TM根据有无异常向TC发起全局事务的提交或者回滚。</li></ol><p>回滚：</p><ol start="6"><li>假设某个RM本地事务失败。该RM自身驱动本地事务回滚，并且报告给TC。</li><li>TM检测到了某个分支事务失败，向TC发起全局事务回滚。</li><li>TC给每一个RM发送消息，通知它们全部回滚。</li><li>TC将全局事务回滚的结果发送给TM。 全局事务结束。<br><img src="https://camo.githubusercontent.com/0384806afd7c10544c258ae13717e4229942aa13/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f6c61726b2f302f323031382f706e672f31383836322f313534353239363931373838312d32366661626562392d373166612d346633652d386137612d6663333137643333383966342e706e67" alt=""></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>社区活跃，短短几个月时间star数已经上W，目前已经更新0.8版本，到1.0版本可供线上环境使用。</li><li>灵活，对于seata的使用而言，使用非常简单，特别对于AT模式来说，几乎只要加一个注解就能实现分布式事务。</li><li>高性能，虽然对于使用2pc协议的一个最大诟病就是性能问题，多个库同时锁定造成性能的急剧下降。 而seata在这个基础上有较大的提升，特别对于tcc模式而言。 而目前AT模式只会</li><li>目前TC还不支持集群部署，一旦TC宕机，整个系统分布式事务全都无法处理</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;深入学习Seata（一）：什么是Seata&quot;&gt;&lt;a href=&quot;#深入学习Seata（一）：什么是Seata&quot; class=&quot;headerlink&quot; title=&quot;深入学习Seata（一）：什么是Seata&quot;&gt;&lt;/a&gt;深入学习Seata（一）：什么是Seata&lt;/
      
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="seata" scheme="https://jsbintask.cn/tags/seata/"/>
    
      <category term="分布式事务" scheme="https://jsbintask.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="事务" scheme="https://jsbintask.cn/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>从未这么明白的设计模式（四）：策略模式</title>
    <link href="https://jsbintask.cn/2019/07/10/designpattern/strategy/"/>
    <id>https://jsbintask.cn/2019/07/10/designpattern/strategy/</id>
    <published>2019-07-10T03:11:00.000Z</published>
    <updated>2019-07-10T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/sunset-sd_2.png-blog_960_440.jpg" alt="cover"><br><a id="more"></a></p><blockquote><p>本文原创地址：<a href="https://jsbintask.cn/2019/07/10/designpattern/strategy/">jsbintask的博客</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>策略模式是一种行为模式，它用以运行时动态的改变类的行为，通过将一系列类似的算法封装成不同的类来达到目的，可以有效减少代码中if else的冗余。它实现的关键是面向接口接口编程以及有一个算法切换者。它的优点是扩展性良好，可以自由切换策略。</p><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>周末天气不错，小明准备去爬武功山，于是他请教它的出行助手应该选择怎样的工具去目的地才能让他最大化周末的快乐。于是它的出行助手开始了一段计算，操作。。。最终。。。</p><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>针对上面的案例，重点在于出行助手如何帮小明选择出行工具，这恰好可以对应我们一开始说的需要封装的算法，并且能够随意切换，于是我们可以得出下面的uml类图：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/strategy-1.png" alt="Strategy"><br>小明通过使用出行助手来选择不同的交通工具。而出行助手内部则通过代理<code>TravelStrategy</code>接口来切换不同的出行算法。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先定义出行接口<code>TravelStrategy</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TravelStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着实现不同的出行算法，此处有<code>BikeTravelStrategy</code>, <code>FootTravelStrategy</code>, <code>CarTravelStrategy</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BikeTravelStrategy</span> <span class="keyword">implements</span> <span class="title">TravelStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      log.info(<span class="string">"自行车骑行半小时，行程18公里，感觉卡路里在燃烧！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">============================================================</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FootTravelStrategy</span> <span class="keyword">implements</span> <span class="title">TravelStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"徒步旅行半小时，行走5公里，可以好好欣赏周边景色"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">============================================================</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarTravelStrategy</span> <span class="keyword">implements</span> <span class="title">TravelStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      log.info(<span class="string">"自驾旅行半小时，行程40公里，感觉时间走的真慢。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着就需要实现出行助手类：<code>TravelService</code>，它内部通过代理<code>TravelStategy</code>来切换不同的策略：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TravelService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TravelStrategy travelStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chooseTravelStrategy</span><span class="params">(TravelStrategy travelStrategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.travelStrategy = travelStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTravel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.travelStrategy.travel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，编写一个测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"天气不错，小明准备出门旅行，它带上了它的旅行助手'TravelService'来帮它制定出行策略."</span>);</span><br><span class="line">        TravelService travelService = <span class="keyword">new</span> TravelService();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"'TravelService': 天气不错，您可以选择徒步出行"</span>);</span><br><span class="line">        travelService.chooseTravelStrategy(<span class="keyword">new</span> FootTravelStrategy());</span><br><span class="line">        travelService.doTravel();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"'TravelService': 2小时后可能转小雨，建议您选择自行车加快形成，锻炼身体！"</span>);</span><br><span class="line">        travelService.chooseTravelStrategy(<span class="keyword">new</span> BikeTravelStrategy());</span><br><span class="line">        travelService.doTravel();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"'TravelService': 半小时后会有暴雨，建议您选择自驾汽车去目的地."</span>);</span><br><span class="line">        travelService.chooseTravelStrategy(<span class="keyword">new</span> CarTravelStrategy());</span><br><span class="line">        travelService.doTravel();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"'TravelService': 天气已经好转，您可以随意选择出行方式。"</span>);</span><br><span class="line">        travelService.chooseTravelStrategy(() -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">"骑行摩托车开始，半小时形成30公里。刺激！"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"'TravelService': 您已到达目的地."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意上面的关键代码为<code>TravelService</code>根据不同的天气选择了不同的出行策略。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/strategy-2.png" alt="Strategy"><br>根据结果我们可以知道我们切换了三次不同的策略，并且使用lambda表达式添加了一个匿名策略。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用策略模式的关键在于面向接口编程，并且有一个全局切换策略的辅助类，它的优点在于扩展性良好，算法可以自由切换动态改变类的行为。<br>而它的缺点也很明显：策略类过多会导致“类爆炸“，并且所有的策略类都需要向外暴露。 所以使用时如果策略过多可以考虑使用混合模式，配合其它模式一起使用。</p><p><code>关注我，这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/sunset-sd_2.png-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="设计模式" scheme="https://jsbintask.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>从未这么明白的设计模式（二）：装饰器模式</title>
    <link href="https://jsbintask.cn/2019/05/23/designpattern/decorator/"/>
    <id>https://jsbintask.cn/2019/05/23/designpattern/decorator/</id>
    <published>2019-05-23T03:11:00.000Z</published>
    <updated>2019-05-23T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/monaco-viewpoint-with-binoculars-telescope-2210x1473.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a></p><blockquote><p>本文原创地址：<a href="https://jsbintask.cn/2019/05/22/designpattern/decorator/">jsbintask的博客</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>装饰器模式是为了运行时动态的扩展一个类的功能。它谨遵<code>开闭原则</code>，它实现的关键在于<code>继承和组合的结合使用</code>，解耦对象之间的关系。<br><code>各种设计模式学习地址：</code><a href="https://github.com/jsbintask22/design-pattern-learning" target="_blank" rel="noopener">https://github.com/jsbintask22/design-pattern-learning</a></p><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>首先我们列举一个案例，并且按照面向对象的思想来对应实体之间的关系。</p><p>有一个咖啡店，销售各种各样的咖啡，拿铁，卡布奇洛，蓝山咖啡等，在冲泡前，会询问顾客是否要加糖，加奶，加薄荷等。这样不同的咖啡配上不同的调料就会卖出不同的价格。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/decorator-1.png" alt="Decorator"></p><h2 id="V1"><a href="#V1" class="headerlink" title="V1"></a>V1</h2><p>针对上面的栗子，我们很容易就抽象出对应的实现，如上图。接着，我们就要编写对应的类来实现对应的功能。在这个例子中，主题当然就是<code>咖啡</code>，并且它有一个属性是<code>名字</code>，一个行为 <code>价格</code>，出于“面向对象”的思想，我们自然会设计出抽象类<code>Coffee</code>:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/decorator-2.png" alt="Decorator"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取咖啡得名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取咖啡的价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着，按照继承的思想，我们要开始设计出具体的实现类，因为拿铁，卡布奇洛，蓝山搭配上不同的调料（上面三种）会有不同的价格，名字，所以我们至少得设计出 3 X 3 = 9 个类来分别对应它们的名字和价格：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/decorator-4.png" alt="Decorator"><br>嗯！我想不用说这样设计得缺陷也很明显了！ 由于不同的咖啡和不同的调料得各种任意组合，使得出现了<code>类爆炸</code>的现象。既然有这么明显的缺陷，那我们当然得改！ 我们可以考虑把各种调料当作属性加入到Coffee这个抽象类中，接着在实现类中计算价格和名字时，分别判断是否加入了各种调料包，得到不同的名字和价格！</p><p>按照上面的思想，我们的Coffee类现在变成了这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 是否加了牛奶</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> addedMilk;</span><br><span class="line">    <span class="comment">// 是否加了糖</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> addedSugar;</span><br><span class="line">    <span class="comment">// 是否加了薄荷</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> addedMint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取咖啡得名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取咖啡的价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着，我们实现一种咖啡，蓝山咖啡：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuleCoffee</span> <span class="keyword">extends</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder name = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        name.append(<span class="string">"蓝山"</span>);</span><br><span class="line">        <span class="keyword">if</span> (addedMilk) &#123;</span><br><span class="line">            name.append(<span class="string">"牛奶"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (addedMilk) &#123;</span><br><span class="line">            name.append(<span class="string">"薄荷"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (addedSugar) &#123;</span><br><span class="line">            name.append(<span class="string">"加糖"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> price = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (addedMilk) &#123;</span><br><span class="line">            price += <span class="number">1.1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (addedMilk) &#123;</span><br><span class="line">            price += <span class="number">3.2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (addedSugar) &#123;</span><br><span class="line">            price += <span class="number">2.7</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>嗯！现在似乎比上面愉快多了。其实不然！我们仔细分析这种设计，会发现它似乎不太符合”封装的思想“，比如说针对拿铁，对于加薄荷而言，对他总是多余的！ 而对于蓝山而言，牛奶又显得很多余！ 所以这种设计也并不合理。 另外，我们假设coffee，拿铁等实体类来自第三方类库，我们并不能改动这些类的实现， 又要怎么得到名字和价格呢？ </p><p>这个时候，我们就得使用<code>装饰器</code>模式来动态的扩展类行为！ 所以我们设计出V3版本。</p><h2 id="V3"><a href="#V3" class="headerlink" title="V3"></a>V3</h2><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>首先，我们需要了解一个面向对象的一个基本设计原则：<code>开闭原则</code>，它指的是<code>类应该对修改关闭，对扩展开放</code>。 </p><p>怎么理解呢？ 就比如我们上方说的：假如cofee和它的一众实现拿铁，卡布奇洛，蓝山来自第三方类库，并且这个类库已经很”适合“，”实用“了。 而我们为了得到加入不同调料的咖啡的名字和价格，我们就得修改这些实现，而这样的修改，总是免不了<code>稳定性</code>的改变。对原本的系统来说也是一种风险！  所以我们应该 <code>对修改关闭，对扩展开放</code>;</p><h3 id="继承和组合"><a href="#继承和组合" class="headerlink" title="继承和组合"></a>继承和组合</h3><p>遵循开闭原则，那我们就得对外扩展，那怎么对外扩展呢？ 这也是装饰器模式实现的关键，利用<code>继承和组合</code>的结合； 现在我们可以考虑设计出一个装饰类，它也继承自coffee，并且它内部有一个coffee的实例对象：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/decorator-5.png" alt="Decorator"><br>现在，我们多了一个<code>咖啡装饰器</code>: CoffeeDecorator:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeDecorator</span> <span class="keyword">implements</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Coffee delegate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoffeeDecorator</span><span class="params">(Coffee coffee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = coffee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着，我们将牛奶，薄荷作为抽象出一个类，继承自CoffeeDecorator，所以，现在类图就成了这样：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/decorator-6.png" alt="Decorator"><br>我们实现一个<code>MilkCoffeeDecorator</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkCoffeeDecorator</span> <span class="keyword">extends</span> <span class="title">CoffeeDecorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MilkCoffeeDecorator</span><span class="params">(Coffee coffee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"牛奶, "</span> + <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.1</span> + <span class="keyword">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按同样的方法可以实现出<code>MintCoffeeDecorator</code>，<code>SugarCoffeeDecorator</code>。接着我们写一个测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 得到一杯原始的蓝山咖啡</span></span><br><span class="line">        Coffee blueCoffee = <span class="keyword">new</span> BlueCoffee();</span><br><span class="line">        System.out.println(blueCoffee.getName() + <span class="string">": "</span> + blueCoffee.getPrice());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入牛奶</span></span><br><span class="line">        blueCoffee = <span class="keyword">new</span> MilkCoffeeDecorator(blueCoffee);</span><br><span class="line">        System.out.println(blueCoffee.getName() + <span class="string">": "</span> + blueCoffee.getPrice());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再加入薄荷</span></span><br><span class="line">        blueCoffee = <span class="keyword">new</span> MintCoffeeDecorator(blueCoffee);</span><br><span class="line">        System.out.println(blueCoffee.getName() + <span class="string">": "</span> + blueCoffee.getPrice());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再加入糖</span></span><br><span class="line">        blueCoffee = <span class="keyword">new</span> SugarCoffeeDecorator(blueCoffee);</span><br><span class="line">        System.out.println(blueCoffee.getName() + <span class="string">": "</span> + blueCoffee.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/decorator-7.png" alt="Decorator"><br>从结果我们可以看出，随着不断加入各种调料，价格，名字都在改变！ 这说明我们加入不同的调料，动态的改变了咖啡的名字和价格！</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>从上面的最后的装饰器模式的实现来看，我们可以得出以下结论：</p><ol><li>通过装饰器模式可以动态的将责任附加到原有的对象上，而不改变原有的code。</li><li>遵循<code>开闭原则</code></li><li>装饰者和被装饰者有相同的父类（如栗子中的Coffee）</li><li>可以用多个装饰器装饰同一个对象。（见运行类）</li><li>装饰者可以在被装饰者的行为之前或之后动态的加上自己的行为。(参考装饰实现)</li><li>组合比继承更加的灵活（上面的coffee代理）</li></ol><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>到现在，我们已经实现了一个自己的装饰器，我们来看看jdk中用到的装饰器实现.</p><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><p>我们可以查看FilterInputStream：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/decorator-8.png" alt="Decorator"><br>它的主要是实现者为<code>BufferedInputStream</code>:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/decorator-9.png" alt="Decorator"><br>所以我们经常可以使用BufferedInputStream装饰一个InputStream，比如FileInputStream：<br><code>new BufferedInputStream(FileInputStream);</code><br>这就是装饰器模式的典型应用。</p><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><p>在tomcat的HttpServletRequest的内部实现代码中，<code>RequestFacde</code>继承自HttpServlet，而它内部的实现也是通过代理<code>Request</code>对象，而Request对象继承自HttpServlet，Request内部代理了<code>org.apache.coyote.Request</code>来实现的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>装饰器模式充分展示了组合的灵活。利用它来实现扩展。它同时也是开闭原则的体现。 如果相对某个类实现运行时功能动态的扩展。 这个时候你就可以考虑使用装饰者模式！</p><p><code>关注我，这里只有干货!</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/monaco-viewpoint-with-binoculars-telescope-2210x1473.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="设计模式" scheme="https://jsbintask.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>神奇的Unsafe，你get了吗</title>
    <link href="https://jsbintask.cn/2019/05/05/jdk/jdk8-unsafe/"/>
    <id>https://jsbintask.cn/2019/05/05/jdk/jdk8-unsafe/</id>
    <published>2019-05-05T08:05:00.000Z</published>
    <updated>2019-05-05T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/grain-field-detail_free_stock_photos_picjumbo_IMG_9857-2210x1473.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/05/05/jdk/jdk8-unsafe/">https://jsbintask.cn/2019/05/05/jdk/jdk8-unsafe/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Unsafe</code>是jdk提供的一个直接访问操作系统资源的工具类（底层c++实现），它可以直接分配内存，内存复制，copy，提供cpu级别的<code>CAS</code>乐观锁等操作。它的目的是为了增强java语言直接操作底层资源的能力，无疑带来很多方便。但是，使用的同时就得额外小心！它的总体作用如下（图片来源网络）：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-1.png" alt="Unsafe"></p><p><code>Unsafe</code>位于sun.misc包下，jdk中的并发编程包juc(java.util.concurrent)基本全部靠<code>Unsafe</code>实现，由此可见其重要性。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>Unsafe被设计为单例，并且只允许被引导类加载器（BootstrapClassLoader)加载的类使用：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-2.png" alt="Unsafe"><br>所以我们自己写的类是无法直接通过<code>Unsafe.getUnsafe()</code>获取的。当然，既然是java代码，我们就可以使用一点<code>歪道</code>，比如通过反射直接new一个或者将其内部静态成员变量<code>theUnsafe</code>获取出来：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// method 1</span></span><br><span class="line">    Class&lt;Unsafe&gt; unsafeClass = Unsafe.class;</span><br><span class="line">    Constructor&lt;Unsafe&gt; constructor = unsafeClass.getDeclaredConstructor();</span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Unsafe unsafe1 = constructor.newInstance();</span><br><span class="line">    System.out.println(unsafe1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// method2</span></span><br><span class="line">    Field theUnsafe = unsafeClass.getDeclaredField(<span class="string">"theUnsafe"</span>);</span><br><span class="line">    theUnsafe.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Unsafe unsafe2 = (Unsafe) theUnsafe.get(<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(unsafe2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-3.png" alt="Unsafe"><br>现在我们能够在自己代码里面使用Unsafe了，接下来看下它的使用以及jdk使用操作的。</p><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p><code>CAS</code>译为Compare And Swap，它是乐观锁的一种实现。假设内存值为v，预期值为e，想要更新成得值为u，当且仅当内存值v等于预期值e时，才将v更新为u。 这样可以有效避免多线程环境下的同步问题。</p><p>在unsafe中，实现CAS算法通过cpu的原子指令<code>cmpxchg</code>实现，它对应的方法如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-4.png" alt="Unsafe"><br>简单介绍下它使用的参数，<code>var1</code>为内存中要操作的对象，<code>var2</code>为要操作的值的内存地址偏移量，<code>var4</code>为预期值，<code>var5</code>为想要更新成的值。</p><p>为了方便理解，举个栗子。类User有一个成员变量name。我们new了一个对象User后，就知道了它在内存中的<code>起始值</code>,而成员变量name在对象中的位置偏移是固定的。这样通过这个起始值和这个偏移量就能够定位到name在内存中的具体位置。</p><p>所以我们现在的问题就是如何得出name在对象User中的偏移量，Unsafe自然也提供了相应的方法：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-5.png" alt="Unsafe"><br>他们分别为获取静态成员变量，成员变量的方法，所以我们可以使用unsafe直接更新内存中的值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field theUnsafe = Unsafe.class.getDeclaredField(<span class="string">"theUnsafe"</span>);</span><br><span class="line">        theUnsafe.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Unsafe unsafe = (Unsafe) theUnsafe.get(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"jsbintask"</span>);</span><br><span class="line">        <span class="keyword">long</span> nameOffset = unsafe.objectFieldOffset(User.class.getDeclaredField(<span class="string">"name"</span>));</span><br><span class="line">        unsafe.compareAndSwapObject(user, nameOffset, <span class="string">"jsbintask1"</span>, <span class="string">"jsbintask2"</span>);</span><br><span class="line">        System.out.println(<span class="string">"第一次更新后的值："</span> + user.getName());</span><br><span class="line">        unsafe.compareAndSwapObject(user, nameOffset, <span class="string">"jsbintask"</span>, <span class="string">"jsbintask2"</span>);</span><br><span class="line">        System.out.println(<span class="string">"第二次更新后的值："</span> + user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-6.png" alt="Unsafe"><br>因为内存中name的值为”jsbintask”,而第一次使用<code>compareAndSwapObject</code>方法预期值为”jsbintask1”，这显然是不相等的，所以第一次更新失败，第二次我们传入了正确的预期值，更新成功！</p><p>如果我们分析juc包下的<code>Atomic</code>开头的原子类就会发现，它内部的原子操作全部来源于unsafe的CAS方法，比如AtomicInteger的getAndIncrement方法，内部直接调用unsafe的<code>getAndAddInt</code>方法，它的实现原理为：cas失败，就循环，直到成功为止，这就是我们所说的<code>自旋锁</code>！<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-7.png" alt="Unsafe"></p><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>Unsafe还给我们提供了直接分配内存，释放内存，拷贝内存，内存设置等方法，值得注意的是，这里的内存指的是<code>堆外内存</code>！它是不受jvm内存模型掌控的，所以使用需要及其小心：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分配内存, 相当于C++的malloc函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">allocateMemory</span><span class="params">(<span class="keyword">long</span> bytes)</span></span>;</span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">freeMemory</span><span class="params">(<span class="keyword">long</span> address)</span></span>;</span><br><span class="line"><span class="comment">//在给定的内存块中设置值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">setMemory</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">long</span> bytes, <span class="keyword">byte</span> value)</span></span>;</span><br><span class="line"><span class="comment">//内存拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">copyMemory</span><span class="params">(Object srcBase, <span class="keyword">long</span> srcOffset, Object destBase, <span class="keyword">long</span> destOffset, <span class="keyword">long</span> bytes)</span></span>;</span><br><span class="line"><span class="comment">//为给定地址设置值，忽略修饰限定符的访问限制，与此类似操作还有: putInt,putDouble，putLong，putChar等</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object o, <span class="keyword">long</span> offset, Object x)</span></span>;</span><br></pre></td></tr></table></figure></p><p>我们可以写一段代码验证一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Field theUnsafe = Unsafe.class.getDeclaredField(<span class="string">"theUnsafe"</span>);</span><br><span class="line">    theUnsafe.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Unsafe unsafe = (Unsafe) theUnsafe.get(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配 10M的堆外内存</span></span><br><span class="line">    <span class="keyword">long</span> _10M_Address = unsafe.allocateMemory(<span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 将10M内存的 前面1M内存值设置为10</span></span><br><span class="line">    unsafe.setMemory(_10M_Address, <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1</span>, (<span class="keyword">byte</span>) <span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 获取第1M内存的值： 10</span></span><br><span class="line">    System.out.println(unsafe.getByte(_10M_Address + <span class="number">1000</span>));</span><br><span class="line">    <span class="comment">// 获取第1M内存后的值： 0（没有设置）</span></span><br><span class="line">    System.out.println(unsafe.getByte(_10M_Address + <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-8.png" alt="Unsafe"><br>我们分配了10M内存，并且将前1M内存的值设置为了10，取出了内存中的值进行比较，验证了unsafe的方法。</p><p>堆外内存不受jvm内存模型掌控，在nio（netty，mina）中大量使用对外内存进行管道传输，copy等，使用它们的好处如下：</p><ul><li>对垃圾回收停顿的改善。由于堆外内存是直接受操作系统管理而不是JVM，所以当我们使用堆外内存时，即可保持较小的堆内内存规模。从而在GC时减少回收停顿对于应用的影响。</li><li>提升程序I/O操作的性能。通常在I/O通信过程中，会存在堆内内存到堆外内存的数据拷贝操作，对于需要频繁进行内存间数据拷贝且生命周期较短的暂存数据，都建议存储到堆外内存。<br>而在jdk中，堆外内存对应的类为<code>DirectByteBuffer</code>，它内部也是通过unsafe分配的内存:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-9.png" alt="Unsafe"><br>这里值得注意的是，对外内存的回收借助了<code>Cleaner</code>这个类。</li></ul><h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><p>通过Unsafe还可以直接将某个线程挂起，这和调用<code>Object.wait()</code>方法作用是一样的，但是效率确更高！<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-10.png" alt="Unsafe"><br>我们熟知的AQS(<code>AbstractQueuedSynchronizer</code>)内部挂起线程使用了<code>LockSupport</code>方法，而LockSupport内部依旧使用的是Unsafe：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-11.png" alt="Unsafe"><br>我们同样可以写一段代码验证：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Field theUnsafe = Unsafe.class.getDeclaredField(<span class="string">"theUnsafe"</span>);</span><br><span class="line">    theUnsafe.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Unsafe unsafe = (Unsafe) theUnsafe.get(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="comment">// i == 5时，将当前线程挂起</span></span><br><span class="line">                unsafe.park(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" printing i : "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">" Thread__Unsafe__1"</span>);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主线程休息三秒</span></span><br><span class="line">    Thread.sleep(<span class="number">3000L</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" printing i : "</span> + i);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="comment">// 将线程 t1 唤醒</span></span><br><span class="line">            unsafe.unpark(t1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.in.read();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-12.png" alt="Unsafe"><br>当线程t1运行到i=5时，被挂起，主线程执行，而主线程运行到i=9时，将t1唤醒，t1继续打印！ 在park出debug可以观察t1线程的状态：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-13.png" alt="Unsafe"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-14.png" alt="Unsafe"></p><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><p>对于数组，Unsafe提供了特别的方法返回不同类型数组在内存中的偏移量：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-16.png" alt="Unsafe"><br><code>arrayBaseOffset</code>方法返回数组在内存中的偏移量，这个值是固定的。<code>arrayIndexScale</code>返回数组中的每一个元素的内存地址换算因子。举个栗子，double数组（注意不是包装类型）每个元素占用8个字节，所以换算因子为8，int类型则为4，通过这两个方法我们就能定位数组中每个元素的内存地址，从而赋值，下面代码演示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Class&lt;Unsafe&gt; unsafeClass = Unsafe.class;</span><br><span class="line">    Constructor&lt;Unsafe&gt; constructor = unsafeClass.getDeclaredConstructor();</span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Unsafe unsafe = constructor.newInstance();</span><br><span class="line"></span><br><span class="line">    Integer[] integers = <span class="keyword">new</span> Integer[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 打印数组的原始值</span></span><br><span class="line">    System.out.println(Arrays.toString(integers));</span><br><span class="line">    <span class="comment">// 获取Integer数组在内存中的固定的偏移量</span></span><br><span class="line">    <span class="keyword">long</span> arrayBaseOffset = unsafe.arrayBaseOffset(Integer[].class);</span><br><span class="line">    System.out.println(unsafe.arrayIndexScale(Integer[].class));</span><br><span class="line">    System.out.println(unsafe.arrayIndexScale(<span class="keyword">double</span>[].class));</span><br><span class="line">    <span class="comment">// 将数组中第一个元素的更新为100</span></span><br><span class="line">    unsafe.putObject(integers, arrayBaseOffset, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 将数组中第五个元素更新为50  注意 引用类型占用4个字节，所以内存地址 需要 4 * 4 = 16</span></span><br><span class="line">    unsafe.putObject(integers, arrayBaseOffset + <span class="number">16</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="comment">// 打印更新后的值</span></span><br><span class="line">    System.out.println(Arrays.toString(integers));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-17.png" alt="Unsafe"><br>我们通过获取Integer数组的内存偏移量，结合换算因子将第一个元素，第五个元素分别替换为了100，50。验证了我们的说法。</p><p>数组的原子操作，juc包也已经提供了相应的工具类，比如<code>AtomicIntegerArray</code>内部就是同过Unsafe的上述方法实现了数组的原子操作。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-18.png" alt="Unsafe"></p><h2 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h2><p>Unsafe还提供了操作系统级别的方法如获取内存页的大小<code>public native int pageSize();</code>，获取系统指针大小<code>public native int addressSize();</code><br>jdk8还加入了新的方法，内存屏障，它的目的是为了防止指令重排序（编译器为了优化速度，会在保证单线程不出错的情况下将某些代码的顺序调换，比如先分配内存，或者先返回引用等，这样在多线程环境下就会出错）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内存屏障，禁止load操作重排序。屏障前的load操作不能被重排序到屏障后，屏障后的load操作不能被重排序到屏障前</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">loadFence</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//内存屏障，禁止store操作重排序。屏障前的store操作不能被重排序到屏障后，屏障后的store操作不能被重排序到屏障前</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">storeFence</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//内存屏障，禁止load、store操作重排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">fullFence</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><p>jdk1.8引入的<code>StampedLock</code>就是基于此实现的乐观读写锁.<br>另外，jdk1.8引入了lambda表达式，它其实会帮我们调用Unsafe的<code>public native Class&lt;?&gt; defineAnonymousClass(Class&lt;?&gt; var1, byte[] var2, Object[] var3);</code>方法生成匿名内部类，如下面的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Function&lt;String, Integer&gt; function = Integer::parseInt;</span><br><span class="line">        System.out.println(function.apply(<span class="string">"100"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查看字节码：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-19.png" alt="Unsafe"><br>发现它调用了<code>LambdaMetafactory.metafactory</code>方法，最终调用了<code>InnerClassLambdaMetafactory</code>的spinInnerClass方法：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/unsafe-20.png" alt="Unsafe"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过反射可以获取Unsafe类的实例，他可以帮助我们进行堆外内存操作，内存copy，内存复制，线程挂起，提供了cpu级别的cas原子操作。另外还有lambda的匿名内部类的生成，数组内存操作等。juc包基本全部基于此类实现！</p><p><code>关注我，这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/grain-field-detail_free_stock_photos_picjumbo_IMG_9857-2210x1473.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="jdk" scheme="https://jsbintask.cn/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>JAVA中各种锁介绍</title>
    <link href="https://jsbintask.cn/2019/04/19/jdk/java-lock/"/>
    <id>https://jsbintask.cn/2019/04/19/jdk/java-lock/</id>
    <published>2019-04-19T03:11:00.000Z</published>
    <updated>2019-04-19T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/no-way-blocked-road-stop_free_stock_photos_picjumbo_P1020637-2210x1475.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a><br>java中的锁按状态，特性，功能，实现可以划分为多种锁; <code>公平锁/非公平锁</code>,<code>可重入锁</code>,<code>独享锁/共享锁</code>,<code>互斥锁/读写锁</code>,<code>乐观锁/悲观锁</code>,<code>分段锁</code>,<code>偏向锁/轻量级锁/重量级锁</code>,<code>自旋锁</code> 。</p><h2 id="乐观锁，悲观锁"><a href="#乐观锁，悲观锁" class="headerlink" title="乐观锁，悲观锁"></a>乐观锁，悲观锁</h2><p>从并发同步的角度。悲观锁认为对于同一个数据的并发操作，一定是会发生修改的，哪怕没有修改，也会认为修改。因此对于同一个数据的并发操作，悲观锁采取加锁的形式。悲观的认为，不加锁的并发操作一定会出问题。乐观锁则认为对于同一个数据的并发操作，是不会发生修改的。在更新数据的时候，会采用尝试更新，不断重新的方式更新数据。乐观的认为，不加锁的并发操作是没有事情的。从上面的描述我们可以看出，悲观锁适合写操作非常多的场景，乐观锁适合读操作非常多的场景，不加锁会带来大量的性能提升。悲观锁在Java中的使用，就是利用各种锁。乐观锁在Java中的使用，是无锁编程，常常采用的是CAS算法，典型的例子就是原子类，通过CAS自旋实现原子操作的更新。</p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>在Java中，自旋锁是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点如果有大量线程竞争同一个资源，循环会耗费更多的CPU资源。<code>JDK</code>中的<code>Atom</code>开头的类工具类就是基于此实现（底层通过<code>Unsafe</code>实现）。</p><h2 id="公平锁，非公平锁"><a href="#公平锁，非公平锁" class="headerlink" title="公平锁，非公平锁"></a>公平锁，非公平锁</h2><p>公平锁是指多个线程按照申请锁的顺序来获取锁。非公平锁是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁。有可能，会造成优先级反转或者饥饿现象。对于Java ReentrantLock而言，通过构造函数指定该锁是否是公平锁，默认是非公平锁。非公平锁的优点在于吞吐量比公平锁大。对于Synchronized而言，也是一种非公平锁。由于其并不像ReentrantLock是通过AQS(<code>AbstractQueuedSynchronizer</code>)的来实现线程调度，所以并没有任何办法使其变成公平锁。</p><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，在进入内层方法会自动获取锁。说的有点抽象，下面会有一个代码的示例。对于Java ReentrantLock而言, 他的名字就可以看出是一个可重入锁，其名字是Re entrant Lock重新进入锁。对于Synchronized而言,也是一个可重入锁。可重入锁的一个好处是可一定程度避免死锁。<br>synchronized void methodA () {<br>    Thread.sleep(10000L);<br>    methodB();<br>}<br>synchronized void methodB () throws Exception{<br>    Thread.sleep(10000L);<br>}上面的代码就是一个可重入锁的一个特点，如果不是可重入锁的话，setB可能不会被当前线程执行，可能造成死锁。</p><h2 id="独享锁，共享锁"><a href="#独享锁，共享锁" class="headerlink" title="独享锁，共享锁"></a>独享锁，共享锁</h2><p><code>独享锁是指该锁一次只能被一个线程所持有</code>。<br><code>共享锁是指该锁可被多个线程所持有</code>。</p><p>对于Java ReentrantLock而言，其是独享锁。但是对于Lock的另一个实现类ReadWriteLock，其读锁是共享锁，其写锁是独享锁。读锁的共享锁可保证并发读是非常高效的，读写，写读 ，写写的过程是互斥的。独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。对于Synchronized而言，当然是独享锁。</p><h2 id="互斥锁，读写锁"><a href="#互斥锁，读写锁" class="headerlink" title="互斥锁，读写锁"></a>互斥锁，读写锁</h2><p>上面讲的独享锁/共享锁就是一种广义的说法，互斥锁/读写锁就是具体的实现。</p><p>互斥锁在Java中的具体实现就是<code>ReentrantLock</code><br>读写锁在Java中的具体实现就是<code>ReadWriteLock</code></p><h2 id="分段锁"><a href="#分段锁" class="headerlink" title="分段锁"></a>分段锁</h2><p>分段锁其实是一种锁的设计，并不是具体的一种锁，比如对于<code>ConcurrentHashMap(JDK1.7)</code>而言，其并发的实现就是通过分段锁的形式来实现高效的并发操作。我们以ConcurrentHashMap来说一下分段锁的含义以及设计思想，内部拥有一个Entry数组，数组中的每个元素又是一个链表；同时又是一个ReentrantLock（<code>Segment</code>继承了ReentrantLock)。当需要put元素的时候，并不是对整个hashmap进行加锁，而是先通过hashcode来知道他要放在那一个分段中，然后对这个分段进行加锁，所以当多线程put的时候，只要不是放在一个分段中，就实现了真正的并行的插入。但是，在统计size的时候，可就是获取所有Segment全局信息的时候，就需要获取所有的分段锁才能统计。分段锁的设计目的是细化锁的粒度，当操作不需要更新整个数组的时候，就仅仅针对数组中的一项进行加锁操作。</p><h2 id="偏向锁，轻量级锁，重量级锁"><a href="#偏向锁，轻量级锁，重量级锁" class="headerlink" title="偏向锁，轻量级锁，重量级锁"></a>偏向锁，轻量级锁，重量级锁</h2><p>针对Synchronized的状态。在Java 5通过引入锁升级的机制来实现高效Synchronized。这三种锁的状态是通过对象监视器在对象头中的字段来表明的。</p><ol><li>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价。</li><li>轻量级锁是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。</li><li>重量级锁是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/no-way-blocked-road-stop_free_stock_photos_picjumbo_P1020637-2210x1475.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>netty极简教程（二）：Netty组件介绍</title>
    <link href="https://jsbintask.cn/2019/04/18/netty/netty-startup-process/"/>
    <id>https://jsbintask.cn/2019/04/18/netty/netty-startup-process/</id>
    <published>2019-04-18T03:11:00.000Z</published>
    <updated>2019-04-18T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/man-throwing-a-stone-into-a-calm-lake-during-beautiful-sunrise-2210x1243.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/04/18/netty/netty-startup-process/">https://jsbintask.cn/2019/04/18/netty/netty-startup-process/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><p><code>Netty</code>底层对JDK <code>NIO</code>进行了封装，而在jdk中，使用nio的主要类为事件轮询器<code>Selector</code>，以及流处理管道<code>ServerSocketChannel</code>，我们可以通过分析Netty源码来看看它是如何调用jdk底层NIO的。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>下面为一段经典Netty启动的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">    b.group(bossGroup, workerGroup)</span><br><span class="line">        .channel(NioServerSocketChannel.class)    <span class="comment">// 1</span></span><br><span class="line">        .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))  <span class="comment">// 2</span></span><br><span class="line">        .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;  <span class="comment">// 3</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"DiscardServer.initChannel"</span>);</span><br><span class="line">                ChannelPipeline p = ch.pipeline();</span><br><span class="line">                p.addLast(<span class="keyword">new</span> DiscardServerHandler());   <span class="comment">// 4</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    ChannelFuture f = b.bind(PORT).sync();  <span class="comment">// 5</span></span><br><span class="line">    f.channel().closeFuture().sync();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    workerGroup.shutdownGracefully();</span><br><span class="line">    bossGroup.shutdownGracefully();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>添加两个线程组，bossGroup用于轮询处理Selector接入的连接，workerGroup用于处理收到连接请求后的逻辑。</li><li>添加一个全局服务端</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/man-throwing-a-stone-into-a-calm-lake-during-beautiful-sunrise-2210x1243.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="netty" scheme="https://jsbintask.cn/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>BIO，NIO，AIO，同步，异步介绍</title>
    <link href="https://jsbintask.cn/2019/04/16/essay/nio/"/>
    <id>https://jsbintask.cn/2019/04/16/essay/nio/</id>
    <published>2019-04-16T03:11:00.000Z</published>
    <updated>2019-04-16T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/man-throwing-a-stone-into-a-calm-lake-during-beautiful-sunrise-2210x1243.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/04/16/essay/nio/">https://jsbintask.cn/2019/04/16/essay/nio/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><p>在理解什么是BIO，NIO，AIO之前，我们首先需要了解什么是同步，异步，阻塞，非阻塞。假如我们现在要去银行取钱：<br><code>同步</code> ： 自己亲自出马持银行卡到银行取钱（使用同步IO时，Java自己处理IO读写）；<br><code>异步</code> ： 委托一小弟拿银行卡到银行取钱，然后给你（使用异步IO时，Java将IO读写委托给OS处理，需要将数据缓冲区地址和大小传给OS(银行卡和密码)，OS需要支持异步IO操作API）；<br><code>阻塞</code> ： ATM排队取款，你只能等待（使用阻塞IO时，Java调用会一直阻塞到读写完成才返回）；<br><code>非阻塞</code> ： 柜台取款，取个号，然后坐在椅子上做其它事，等号广播会通知你办理，没到号你就不能去，你可以不断问大堂经理排到了没有，大堂经理如果说还没到你就不能去（使用非阻塞IO时，如果不能读写Java调用会马上返回，当IO事件分发器会通知可读写时再继续进行读写，不断循环直到读写完成）</p><h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><p><code>Blocking IO</code>，同步阻塞式IO，jdk1.4以前，一直采用BIO编程模型，在<code>Socket</code>网络编程中，我们通常会使用<code>ServerSocket.accept()</code>方法获取一个新连接，该方法会阻塞当前主线程，所以通常一个连接来了后，会将其放入线程池去执行后续操作。而客户端发送请求后，先咨询服务端是否有线程相应，如果没有则会一直等待或者遭到拒绝请求，如果有的话，客户端Socket的connect方法同样会阻塞当前线程等待请求结束后才继续执行。</p><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p><code>New IO</code>，同步非阻塞式IO，jdk1.4后引入，主要用于解决BIO大并发的问题，由于BIO会为任何连接都分配一个线程，而操作系统资源有限，如果客户端的请求过多，服务端程序可能会因为不堪重负而拒绝客户端的请求，甚至服务器可能会因此而瘫痪。</p><p> NIO基于Reactor，当socket有流可读或可写入socket时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。  也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。<br> <img src="http://images2015.cnblogs.com/blog/37237/201512/37237-20151222220329015-207666376.png" alt=""><br>NIO最大的不同在于当一个新连接进入时，不会直接为其分配线程，始终只有一个<code>Selector</code>在不断轮询注册这些新连接，当连接准备好后，再将其加入线程池。</p><p>HTTP/1.1出现后，有了Http长连接，这样除了超时和指明特定关闭的http header外，这个链接是一直打开的状态的，这样在NIO处理中可以进一步的进化，在后端资源中可以实现资源池或者队列，当请求来的话，开启的线程把请求和请求数据传送给后端资源池或者队列里面就返回，并且在全局的地方保持住这个现场(哪个连接的哪个请求等)，这样前面的线程还是可以去接受其他的请求，而后端的应用的处理只需要执行队列里面的就可以了，这样请求处理和后端应用是异步的.当后端处理完，到全局地方得到现场，产生响应，这个就实现了异步处理。</p><p>对应BIO中的<code>ServerSocket</code>，<code>Socket</code>，再NIO中的编程类为：<br><code>ServerSocketChannel</code>, <code>SocketChannel</code>，值得注意的是，它们的<code>accept()</code>，<code>connect</code>方法均不是阻塞的，当没有连接或者连接没有立即建立时，它们都会直接返回，不会阻塞当前线程！</p><p>值得注意的是，虽然jdk已经为我们提供了NIO编程模型，但是使用难度较大，并且存在空轮询的bug。所以一般我们会考虑使用在 jdk NIO的基础上继续封装的<code>Netty</code>！</p><h2 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h2><p><code>NIO.2</code>，异步非阻塞IO。jdk1.7引入。与NIO不同，当进行读写操作时，只须直接调用API的read或write方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序。  即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。 主要在java.nio.channels包下增加了下面四个异步通道：<br><code>AsynchronousSocketChannel</code>, <code>AsynchronousServerSocketChannel</code>, <code>AsynchronousFileChannel</code>, <code>AsynchronousDatagramChannel</code><br>其中的read/write方法，会返回一个带回调函数的对象，当执行完读取/写入操作后，直接调用回调函数。</p><p><code>关注我，这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/man-throwing-a-stone-into-a-calm-lake-during-beautiful-sunrise-2210x1243.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>从未这么明白的设计模式（二）：观察者模式</title>
    <link href="https://jsbintask.cn/2019/04/15/designpattern/observer/"/>
    <id>https://jsbintask.cn/2019/04/15/designpattern/observer/</id>
    <published>2019-04-15T03:11:00.000Z</published>
    <updated>2019-04-15T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/young-girl-with-snapback-looking-over-the-old-city_free_stock_photos_picjumbo_HNCK6022-2210x1474.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/04/15/designpattern/observer/">https://jsbintask.cn/2019/04/15/designpattern/observer/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>观察者模式定义了对象间的一种一对多依赖关系，当一个对象状态发生改变时，观察者们都可以做出相应的更新，使得系统更易于扩展！<br><code>代码地址：</code><a href="https://github.com/jsbintask22/design-pattern-learning" target="_blank" rel="noopener">https://github.com/jsbintask22/design-pattern-learning</a></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ol><li>小丽长得很漂亮，”天生丽质难自弃”, 是一个不折不扣的”女神”。</li><li>小丽身边有很多”备胎“，他们通过各种方式添加了小丽的微信，“小豪，小吴”都是其中之一。</li><li>小丽总是会在朋友圈发布自己的各种生活状态。</li><li>”备胎们“总是及时并且积极地和女神互动！</li><li>小丽发现”备胎“小豪不爱互动了，于是删除了“备胎”小豪的微信。</li><li>小豪发现自己看不了女神动态了。最终死心！</li><li>小丽认识了新“备胎”小李，于是小李也添加了女神微信。</li><li>小丽发布自己的朋友圈动态，小李也开始了互动！<br>上面这个过程我们可以抽象出来两个主题，<code>女神小丽</code>,<code>备胎小豪，小吴，小李</code>，我们用代码模拟这个<strong>追女神</strong>的过程。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="V1-0"><a href="#V1-0" class="headerlink" title="V1.0"></a>V1.0</h3><p><code>Beauty</code>代表女神，<code>LittleBoy</code>表示备胎，他们时刻在关注着女神的朋友圈，希望获得互动，代码实现如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-1.png" alt="Observer"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-2.png" alt="Observer"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Beauty beauty = <span class="keyword">new</span> Beauty();</span><br><span class="line">        <span class="comment">// 成功添加了女神微信</span></span><br><span class="line">        LittleBoy littleBoy = <span class="keyword">new</span> LittleBoy(beauty);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始查看女神朋友圈</span></span><br><span class="line">        littleBoy.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5s后，女神发布了朋友圈。</span></span><br><span class="line">        Thread.sleep(<span class="number">5000L</span>);</span><br><span class="line">        beauty.publishWechat();</span><br><span class="line"></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-3.png" alt="Observer"><br>嗯！似乎很完美！ 美中不足的是好像<code>LittleBoy</code>的run方法一直在轮询查看女神朋友圈，它没办法做自己的事情了：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-4.png" alt="Observer"><br>这样下去很快他就会失去和女神互动的耐心！ 所以我们稍微修改下，让这段代码看起来更加”智能”。</p><h3 id="V2-0"><a href="#V2-0" class="headerlink" title="V2.0"></a>V2.0</h3><p>为了不让<code>LittleBoy</code>一直轮询查看女神状态，我们可以修改为女神主动推送她的状态给“备胎们”，这样他们就可以去做其他事情了！<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-5.png" alt="Observer"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-6.png" alt="Observer"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Beauty beauty = <span class="keyword">new</span> Beauty();</span><br><span class="line">        LittleBoy littleBoy = <span class="keyword">new</span> LittleBoy();</span><br><span class="line">        <span class="comment">// 添加女神微信</span></span><br><span class="line">        beauty.littleBoy = littleBoy;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布动态</span></span><br><span class="line">        beauty.publishWechat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-7.png" alt="Observer"><br>嗯！这样一来就智能多了！ 女神更新朋友圈后主动推送消息给备胎！备胎不用死守着女神的朋友圈，而是收到消息后自动去查看。所以他们的关系是这样了：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-8.png" alt="Observer"><br>但是，现在又有一个新问题！这段代码好像显得不够<code>面向对象</code>，不够专业。</p><ol><li>女神如果想要新加一个舔狗，就要动女神的逻辑代码。</li><li>新加了一个备胎之后，不知道如何把自己的动态分享给他（例如上面的active方法，可能“新备胎”没有）。</li><li>备胎突然舔不动了怎么办了，他不想再收到女神动态了！<br>既然这样，我们把这段代码修改下，让它变得“灵活”，更加“面向对象”些！</li></ol><h3 id="V3-0"><a href="#V3-0" class="headerlink" title="V3.0"></a>V3.0</h3><p>既然要灵活，面向对象。我们这么处理：将女神抽象为一个接口，并且她要能够删除备胎，添加备胎，通知备胎。同时我们将备胎抽象为一个接口，他能够在收到女神通知后及时做出反应！<br>Beauty:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-9.png" alt="Observer"><br>LittleBoy:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-10.png" alt="Observer"><br>它们分别有一个实现：<code>BeautyImpl</code>和<code>LittleBoyImpl</code>:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-11.png" alt="Observer"><br>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Beauty beauty = <span class="keyword">new</span> BeautyImpl();</span><br><span class="line">        LittleBoy boy1 = <span class="keyword">new</span> LittleBoyImpl(<span class="string">"小豪"</span>);</span><br><span class="line">        LittleBoy boy2 = <span class="keyword">new</span> LittleBoyImpl(<span class="string">"小吴"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加两个备胎</span></span><br><span class="line">        beauty.addLittleBoy(boy1);</span><br><span class="line">        beauty.addLittleBoy(boy2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布朋友圈</span></span><br><span class="line">        beauty.publishWechat(<span class="string">"最美的不是下雨天，是曾和你一起躲过雨的屋檐！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除备胎1，并且新添加了备胎3</span></span><br><span class="line">        beauty.removeLittleBoy(boy1);</span><br><span class="line">        beauty.addLittleBoy(msg -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">" 小李：哎哟，不错哦！"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次发布朋友圈</span></span><br><span class="line">        beauty.publishWechat(<span class="string">"哪里有彩虹告诉我。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-12.png" alt="Observer"><br>嗯！通过面向接口编程完美的解决了上面的问题，现在<strong>女神</strong>这个类已经变得非常灵活了，仔细观察，我们已经把我们上面的说的案例完全实现！现在它们的关系是这样的：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-13.png" alt="Observer"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>观察者模式这种<code>发布与订阅的思想</code>使用的非常广泛，基本各个框架，思想都能看到它的身影，而jdk中也已经抽象了观察与被观察者：<br><code>java.util.Observer</code>表示观察者:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-14.png" alt="Observer"><br><code>java.util.Obserable</code>表示被观察者（例如上面的女神）：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/design-mode/observer-15.png" alt="Observer"><br>然后美中不足的是，jdk把Observable设计成了一个类，这并不利于扩展！ 当然我们仍然可以自己实现接口，就像上面所做的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们从观察者模式特点入手，通过一个案例，一步一步完善了观察着的写法，特点！组后介绍了jdk总已有的实现！</p><p><code>关注我，这里只有干货！</code></p><p>同系列文章：<br><a href="https://www.jianshu.com/p/79bceb850ca8" target="_blank" rel="noopener">从未这么明白的设计模式（一）：单例模式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/young-girl-with-snapback-looking-over-the-old-city_free_stock_photos_picjumbo_HNCK6022-2210x1474.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="设计模式" scheme="https://jsbintask.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-Zuul（三）：常用配置详解</title>
    <link href="https://jsbintask.cn/2019/04/11/springcloud/springcloud-zuul-config/"/>
    <id>https://jsbintask.cn/2019/04/11/springcloud/springcloud-zuul-config/</id>
    <published>2019-04-11T08:05:00.000Z</published>
    <updated>2019-04-11T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/road-in-woods-aerial-2210x1596.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/04/11/springcloud/springcloud-zuul-config/">https://jsbintask.cn/2019/04/11/springcloud/springcloud-zuul-config/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><p>SpringCloud Zuul同系列文章：<br><a href="https://jsbintask.cn/2019/03/28/springcloud/springcloud-zuul-process/">SpringCloud-Zuul（一）：技术选型及请求流程源码走读</a><br><a href="https://jsbintask.cn/2019/04/03/springcloud/springcloud-customfilters/">SpringCloud-Zuul（二）：自定义Filter及内部路由源码解析</a><br><a href="https://jsbintask.cn/2019/04/11/springcloud/springcloud-zuul-config/">SpringCloud-Zuul（三）：常用配置详解</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringCloud-Zuul的配置都较为简单，介绍下spring-cloud-zuul常用配置.</p><h2 id="配置详情"><a href="#配置详情" class="headerlink" title="配置详情"></a>配置详情</h2><ol><li>配置开启网关代理。<br>在启动类上加上注解<code>@EnableZuulProxy</code>即可。</li><li>配置微服务路由转发<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    a:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/a/**</span></span><br><span class="line"><span class="attr">      service-id:</span> <span class="string">service-a</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    b:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/b/**</span></span><br><span class="line"><span class="attr">      service-id:</span> <span class="string">service-b</span></span><br></pre></td></tr></table></figure></li></ol><p>service-id为微服务在注册中心的名称。 prefix为访问所有api都需要加上的前缀。a，b为每个服务的映射（可以随便写），例如现在a服务有一个controller： /user/{userId}，那么经过网关映射后的全路径为：<code>/api/a/user/{userId}</code>，这相当于给所有服务的api添加了别名，方便管理！</p><ol start="3"><li><p>路由转发超时配置<br>zuul的默认路由转发超时时间只有2s，因为它内部使用<code>ribbon</code>作负载均衡处理，所以我们需要配置ribbon的超时时间：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">  SocketTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure></li><li><p>敏感头配置<br>zuul默认过滤了所有的http header，这代表被代理的微服务将没有任何请求头，我们需要添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  sensitive-headers:</span></span><br></pre></td></tr></table></figure></li></ol><p>sensitive-headers表示要被过滤的头，为空则可放行所有请求头。</p><ol start="5"><li>过滤返回的请求头<br>有时候我们需要把被代理的微服务返回的请求头过滤掉（例如跨域在网关添加了，如果各微服务也添加了也将造成跨域失败，所以我们需要过滤掉）：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  ignored-headers:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Access-Control-Allow-Origin</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Access-Control-Allow-Methods</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Access-Control-Allow-Headers</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Access-Control-Allow-Credentials</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Access-Control-Max-Age</span></span><br></pre></td></tr></table></figure></li></ol><p><code>关注我，这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/road-in-woods-aerial-2210x1596.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="springcloud" scheme="https://jsbintask.cn/tags/springcloud/"/>
    
      <category term="zuul" scheme="https://jsbintask.cn/tags/zuul/"/>
    
  </entry>
  
  <entry>
    <title>谈一谈ConcurrentModificationException</title>
    <link href="https://jsbintask.cn/2019/04/09/jdk/jdk8-concurrentmodification/"/>
    <id>https://jsbintask.cn/2019/04/09/jdk/jdk8-concurrentmodification/</id>
    <published>2019-04-08T16:00:00.000Z</published>
    <updated>2019-04-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/cover.png-blog_960_440.jpg" alt="ConcurrentModificationException"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/04/09/jdk/jdk8-concurrentmodification/">https://jsbintask.cn/2019/04/09/jdk/jdk8-concurrentmodification/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>ConCurrentModificationException</code>是jdk用于限制并发情况下容器结构改变的异常类。当一个线程操作一个容器时，此时如果有另一个线程修改了容器大小，将抛出这个异常，我们看下面两段代码<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/concurrentmo-1.png" alt="ConcurrentModificationException"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/concurrentmo-2.png" alt="ConcurrentModificationException"><br><strong>Code 2:</strong>:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/concurrentmo-3.png" alt="ConcurrentModificationException"><br><code>说明</code>：一个线程进行list的排序操作，一个线程移除list中的元素，结果：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/concurrentmo-4.png" alt="ConcurrentModificationException"><br>上面代码说明不管是单线程情况下还是多线程并发运行模式下，一旦在某些情况下（如上面的遍历，排序），容器的结构一旦被修改就将抛出<code>ConCurrentModificationException</code>。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p><code>为什么会这样呢，这样是不是就代表这些容器是线程安全的呢？</code> 我们通过源码来讨论一下。<br>首先第一个例子，一个线程进行遍历操作：<code>for(T t: Collections)</code>，通过查看字节码知道，它其实就是使用了<code>Iterator</code>进行了遍历操作：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/concurrentmo-5.png" alt="ConcurrentModificationException"><br>接着查看ArrayList中的Iterator发现它内部是这么定义的：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/concurrentmo-6.png" alt="ConcurrentModificationException"><br>ArrayList内部有一个<code>modCount</code>成员变量，每次就行修改操作如增加，删除等会增加该值：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/concurrentmo-7.png" alt="ConcurrentModificationException"><br>而当初始化一个Iterator时，会记录当前的modCount，以后每次操作（next(), remove())都会检查该值：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/concurrentmo-8.png" alt="ConcurrentModificationException"><br>一旦和记录的初始值不相等，则会抛出异常！<br>同理，上面的排序操作<code>sort()</code>方法同样是这么定义的：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/concurrentmo-9.png" alt="ConcurrentModificationException"></p><p>这样我们上面的疑问就解开了，之所以会抛出异常，是因为容器内部<code>维护了一个变量modCount</code>，在进行某些操作时（iterator，sort）时，会记录当时的这个值，在操作过程中这个值一旦发生改变则会抛出ConcurrentModificationException。</p><p>在<code>jdk</code>中，这种行为被称为<code>快速失败</code>,它的目的是为了尽最大努力的检测线程安全！但是！ <code>它并不能保证容器的线程安全</code>！<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/concurrentmo-10.png" alt="ConcurrentModificationException"><br>这个例子中，我们使用多线程添加了10000个元素，最后成功添加的却只有9993个元素，说明它内部并没有保证线程安全！ 当我们在并发情况下使用这些容器时就需要考虑线程安全问题，替换线程安全的容器类（如<code>ConcurrentHashMap, Vector, CopyOnWriteArrayList等</code>）或者使用额外的同步手段如加锁！</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>在单线程遍历时，如果想删除某个元素，可以使用<code>iterator.remove()</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    list.add(<span class="string">"list-&gt;"</span> + (i + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    String next = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (next.equals(<span class="string">"list-&gt;3"</span>)) &#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(next);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/concurrentmo-11.png" alt="ConcurrentModificationException"><br>对于ArrayList而言，你也可以调用<code>lsitIterator()</code>方法获取内部的<code>ListIterator</code>从而进行添加，插入操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="string">"list-&gt;"</span> + (i + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListIterator&lt;String&gt; iterator = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            String next = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (next.equals(<span class="string">"list-&gt;3"</span>)) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(next);</span><br><span class="line">            iterator.add(<span class="string">"list-&gt;7"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/concurrentmo-12.png" alt="ConcurrentModificationException"><br><code>关注我，这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/cover.png-blog_960_440.jpg&quot; alt=&quot;ConcurrentModificationException&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="jdk" scheme="https://jsbintask.cn/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-Zuul（二）：自定义Filter及内部路由源码解析</title>
    <link href="https://jsbintask.cn/2019/04/03/springcloud/springcloud-customfilters/"/>
    <id>https://jsbintask.cn/2019/04/03/springcloud/springcloud-customfilters/</id>
    <published>2019-04-03T08:05:00.000Z</published>
    <updated>2019-04-03T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/dd3n54p-8d677181-c61e-49cc-b484-8faf81ea9d14.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/04/03/springcloud/springcloud-zuul-customfilters/">https://jsbintask.cn/2019/04/03/springcloud/springcloud-zuul-customfilters/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇介绍了<code>SpringCloud使用Zuul的调用流程</code>,明白了Zuul的工作原理关键在于ZuulServlet和它的内置Filter，所以在实际工作中，编写业务逻辑的关键就在于自定义filter。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="实现ZuulFilter"><a href="#实现ZuulFilter" class="headerlink" title="实现ZuulFilter"></a>实现ZuulFilter</h3><p>实现一个自定义Filter很简单，继承自<code>ZuulFilter</code>即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext context = RequestContext.getCurrentContext().getRequest();</span><br><span class="line">        HttpServletRequest request = context.getRequest();</span><br><span class="line">        HttpServletResponse response = context.getResponse();</span><br><span class="line">        System.out.println(<span class="string">"Filter.run"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>filterType方法返回filter类型</li><li>filterOrder返回<code>同类型filter执行顺序</code></li><li>shouldFilter返回请求是否应该执行run方法。</li><li>run表示业务逻辑执行过程。</li><li>处理逻辑过程中如果需要用到HttpServletRequest和HttpServletResponse可以用<code>RequestContext.getCurrentContext()</code>拿出。</li></ol><h3 id="Filter类型"><a href="#Filter类型" class="headerlink" title="Filter类型"></a>Filter类型</h3><p>Zuul的Filter一共分为四个种类，<code>Pre</code>,<code>Route</code>,<code>Post</code>,<code>Error</code>，每种Filter的执行时机不同，所以他们在业务逻辑功能上有所不同，如图：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-8.png" alt="Zuul"></p><ol><li>Pre类型的Filter总是先执行，它可以做<code>限流</code>,<code>权限控制</code>等。</li><li>Route类型的Filter为Zuul内部转发请求到真正的服务的Filter，一般我们不需要实现这种类型.</li><li>Post为请求转发完成后的后续动作，可以进行日志等的一些添加。</li><li>Error为上述Filter出错后执行的动作，可以进行错误处理等。<br>关于它们的执行顺序，如图：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-2.png" alt="Zuul"></li></ol><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>zuul内部已经定义了各种类型的filter，如预处理，路由转发，错误处理等。我们可以通过源码来研究Zuul是如何帮我们转发请求的：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-9.png" alt="Zuul"></p><ol><li><code>RibbonRoutingFilter</code></li><li><code>SimpleHostRoutingFilter</code></li><li><code>SendForwardFilter</code><br>上面三个Filter只会执行一个，控制它们执行过程的为<code>PreDecorationFilter</code>:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-10.png" alt="Zuul"><br>当整合的是微服务时，则配置的为服务名，如：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/api</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    espay-auth:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/test/**</span></span><br><span class="line"><span class="attr">      service-id:</span> <span class="string">service-name</span></span><br></pre></td></tr></table></figure></li></ol><p>这个时候将调用RibbonRoutingFilter作负载均衡转发请求：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ClientHttpResponse <span class="title">forward</span><span class="params">(RibbonCommandContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; info = <span class="keyword">this</span>.helper.debug(context.getMethod(),</span><br><span class="line">            context.getUri(), context.getHeaders(), context.getParams(),</span><br><span class="line">            context.getRequestEntity());</span><br><span class="line"></span><br><span class="line">    RibbonCommand command = <span class="keyword">this</span>.ribbonCommandFactory.create(context);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ClientHttpResponse response = command.execute();</span><br><span class="line">        <span class="keyword">this</span>.helper.appendDebug(info, response.getRawStatusCode(), response.getHeaders());</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (HystrixRuntimeException ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> handleException(info, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而当我们配置的直接为某个地址:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    espay-auth:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/auth/**</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">http://baidu.com</span></span><br></pre></td></tr></table></figure></p><p>则会调用SimpleHostRoutingFilter进行转发，它内部直接使用HttpClient进行转发：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-11.png" alt="Zuul"><br>而当请求出错时，则会交由<code>SendErrorFilter</code>处理，它会设置标志位<code>SEND_ERROR_FILTER_RAN</code>为true，然后重新发送请求到<code>PreDecorationFilter</code>。这个时候的流程为：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-14.png" alt="Zuul"><br>SendForwardFilter:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-12.png" alt="Zuul"><br>这样一次完整的路由，转发，错误处理就分析完毕。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Zuul内部使用自定义filter处理业务逻辑。</li><li>Zuul内部有四种不同类型的Filter。</li><li>Zuul内部转发请求有两种，为服务下边的<code>RibbonRoutingFilter</code>，普通http转发的<code>SimpleHostRoutingFilter</code>.</li></ol><p><strong><code>关注我，这里只有干货！</code></strong></p><p>相关文章：<br><a href="https://www.jianshu.com/p/9f967ad2490a" target="_blank" rel="noopener">SpringCloud-Zuul（一）：技术选型及请求流程源码走读</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/dd3n54p-8d677181-c61e-49cc-b484-8faf81ea9d14.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="springcloud" scheme="https://jsbintask.cn/tags/springcloud/"/>
    
      <category term="zuul" scheme="https://jsbintask.cn/tags/zuul/"/>
    
  </entry>
  
  <entry>
    <title>jdk你不得不了解的实现：ThreadLocal源码全解析</title>
    <link href="https://jsbintask.cn/2019/04/01/jdk/jdk8-threadlocal/"/>
    <id>https://jsbintask.cn/2019/04/01/jdk/jdk8-threadlocal/</id>
    <published>2019-04-01T09:05:00.000Z</published>
    <updated>2019-04-01T09:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/03/28/jdk/jdk8-threadlocal/">https://jsbintask.cn/2019/04/01/jdk/jdk8-threadlocal/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>ThreadLocal</code>是jdk中一个非常重要的工具，它可以控制堆内存中的对象只能被指定线程访问，如果你经常阅读源码，基本在各大框架都能发现它的踪影。而它最经典的应用就是<code>事务管理</code>，同时它也是面试中的常客。<br><a id="more"></a></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>我们知道，堆内存是共享的，为什么ThreadLocal能够控制指定线程访问呢？ 如图：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadlocal-1.png" alt="ThreadLocal"></p><ol><li>调用ThreadLocal的<code>get</code>方法。</li><li>获取当前线程t1.</li><li>获取t1的成员变量<code>ThreadLocalMap</code>。</li><li>根据ThreadLocal的hashcode计算出ThreadLocalMap中Entry[]数组的索引。</li><li>返回索引位置的值。<br>这样我们就很容易理解了，为什么只有当前线程才能获取到某些值，因为这是这些值都直接保存在当前线程的成员变量ThreadLocalMap中，而ThreadLocal在这个过程中充当的角色则是提供它独一无二的hashcode值，这样我们就能计算出我们保存的值在ThreadLocalMap的位置。</li></ol><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>我们从构建一个ThreadLocal到调用它的set，get方法完整的分析一遍它的源码。</p><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>当我们使用<code>new ThreadLocal&lt;&gt;()</code> new一个ThreadLocal对象时，它初始化了一个成员变量<code>threadLocalHashCode</code>，这个成员变量代表当前ThreadLocal的hashcode值，而它肯定是唯一的：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadlocal-2.png" alt="ThreadLocal"></p><ol><li>ThreadLocal内部有一个静态hashCode生成器<code>nextHashCode</code>。</li><li><p>每次新new一个ThreadLocal对象，调用这个生成器同步方法获取hashcode。<br>因为依赖于静态成员变量<code>nextHashCode</code>的关系，所以它的hashcode肯定唯一！</p><h3 id="set-T-t"><a href="#set-T-t" class="headerlink" title="set(T t)"></a>set(T t)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取当前线程t。</p></li><li>从t中获取<code>ThreadLocalMap</code> map。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadlocal-3.png" alt="ThreadLocal"></li><li>如果map不为空，将当前值value放入map。</li><li>如果map为空，新建一个ThreadLocalMap放入线程t。<br><strong>ThreadLocalMap是ThreadLocal中的内部类，它的结构如下：</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">        Object value;</span><br><span class="line"></span><br><span class="line">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">            <span class="keyword">super</span>(k);</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Entry[] table;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// Default to 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>类似于ArrayList内部的构造，它内部有一个<code>Entry</code>数组table，并且Entry继承自弱引用，所以每一个Entry中保存着两个值，<code>ThreadLocal</code>,<code>value</code>，value既是我们要保存的值。<br>接着，我们回过头详细分析第三步，ThreadLocalMap的set方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="keyword">int</span> len = tab.length;</span><br><span class="line">            <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">                 e != <span class="keyword">null</span>;         <span class="comment">// 2</span></span><br><span class="line">                 e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">                ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (k == key) &#123;   <span class="comment">// 3</span></span><br><span class="line">                    e.value = value;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;   <span class="comment">// 4</span></span><br><span class="line">                    replaceStaleEntry(key, value, i);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tab[i] = <span class="keyword">new</span> Entry(key, value);  <span class="comment">// 5</span></span><br><span class="line">            <span class="keyword">int</span> sz = ++size;</span><br><span class="line">            <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)   <span class="comment">// 6</span></span><br><span class="line">                rehash();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><ol><li>根据ThreadLocal的hashCode计算出在entry中的索引i。</li><li>取出i对应的Entry值e。</li><li>如果e的key等于当前ThreadLocal，代表已经有一个一样的ThreadLocal在这个entry设值，直接替换这个entry上的value。</li><li>e上面的ThreadLocal为null，代表垃圾收集器准备回收这个Entry了，重新计算数组大小，重新hash。</li><li>i位置还没有初始化（第一次set这个ThreadLocal），直接将value放到i的位置。</li><li>扩容Entry数组。</li></ol><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取当前线程。</li><li>从当前线程中获取ThreadLocalMap</li><li>从ThreadLocalMap中找出ThreadLocal对应的Entry.</li><li>如果Entry不为null，直接返回Entry中的value</li><li>返回初始值。<br>其中，ThreadLocalMap的get(ThreadLocal tl)如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadlocal-4.png" alt="ThreadLocal"><br>它和我们一开始的分析一样，根据ThreadLocal的hashcode成员变量计算出索引位置i，得到Entry。这里同样有特殊情况，如果得到的Entry的key和当前ThreadLocal不相等，代表这个Entry将被垃圾收集处理，调用<code>getEntryAfterMiss</code> rehash，计算数组大小。</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>从上面的代码分析中，我们知道，ThreadLocalMap的生命周期和当前线程同步，如果当前线程被销毁，则map中的所有引用均被销毁。但如果当前线程不被销毁呢（线程池，tomcat处理请求等）？Entry中保存了ThreadLocal的弱引用以及value，gc时可能清理掉ThreadLocal，而这个value确再没有访问之地，这个时候就会造成内存泄漏！<br>所以我们需要手动调用remove方法清理掉当前线程ThreadLocalMap的引用！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>ThreadLocal中真正保存的值还是在线程的ThreadLocalMap中，ThreadLocal只是使用它的hashcode值充当中间计算变量。</li><li>ThreadLocalMap内部使用一个Entry数组保存数据。</li><li>ThreadLocal可能出现内存泄漏的情况，最好手动调用remove方法。</li></ol><p><strong><code>关注我，这里只有干货！</code></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文原创地址，&lt;code&gt;我的博客&lt;/code&gt;：&lt;a href=&quot;https://jsbintask.cn/2019/03/28/jdk/jdk8-threadlocal/&quot;&gt;https://jsbintask.cn/2019/04/01/jdk/jdk8-threadlocal/&lt;/a&gt;(食用效果最佳)，转载请注明出处!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;是jdk中一个非常重要的工具，它可以控制堆内存中的对象只能被指定线程访问，如果你经常阅读源码，基本在各大框架都能发现它的踪影。而它最经典的应用就是&lt;code&gt;事务管理&lt;/code&gt;，同时它也是面试中的常客。&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="jdk" scheme="https://jsbintask.cn/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-Zuul（一）：技术选型及请求流程源码走读</title>
    <link href="https://jsbintask.cn/2019/03/28/springcloud/springcloud-zuul-process/"/>
    <id>https://jsbintask.cn/2019/03/28/springcloud/springcloud-zuul-process/</id>
    <published>2019-03-28T08:05:00.000Z</published>
    <updated>2019-03-28T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/03/28/springcloud/springcloud-zuul-process/">https://jsbintask.cn/2019/03/28/springcloud/springcloud-zuul-process/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近公司最新架构确定使用微服务之后，经过讨论，最终还是选用了<code>SpringCloud</code>的体系。我负责网关，鉴权服务的研发。记录下这段时间新接触的知识。</p><h2 id="网关技术选型"><a href="#网关技术选型" class="headerlink" title="网关技术选型"></a>网关技术选型</h2><p>springcloud选用了最新的稳定版本<code>Greenwich</code>，所以对于网关来说，有两种框架选择：<code>SpringCloud Gateway</code>， <code>Zuul</code>，经过调研我最终选用了Zuul，原因如下：</p><ol><li>目前项目在一个快速迭代的过程中，Zuul相比于Gateway来说更加稳定。</li><li>Gateway文档还有待完善，我在调查过程中，发现官网文档甚至代码还留有很多<code>TODO</code>，这不是一个大坑吗！ <a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.0.RELEASE/single/spring-cloud-gateway.html#_writing_custom_route_predicate_factories" target="_blank" rel="noopener">Gateway文档</a></li><li>Gateway相对Zuul来说显得难以使用，Gateway使用Spring5开发，基于函数，响应式编程，可能对于刚接触<code>Reactive</code>的人来说阅读源码有一定难度。</li><li>虽然Zuul在性能上来说不如Gateway，但对于我们的业务来说这点时间消耗显得不那么重要。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Proxy    Avg Latency    Avg Req/Sec/Thread</span><br><span class="line">gateway    <span class="number">6.61</span>ms        <span class="number">3.24</span>k</span><br><span class="line">linkered<span class="number">7.62</span>ms        <span class="number">2.82</span>k</span><br><span class="line">zuul    <span class="number">12.56</span>ms        <span class="number">2.09</span>k</span><br><span class="line">none    <span class="number">2.09</span>ms        <span class="number">11.77</span>k</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h2 id="Zuul工作原理"><a href="#Zuul工作原理" class="headerlink" title="Zuul工作原理"></a>Zuul工作原理</h2><p>使用Zuul的关键在于自定义<code>Filter</code>，当然这个Filter不是Servlet对应的Filter，并且不同类型的Filter使用相同的配置却有不同的效果。秉着<code>知其所以然</code>的精神，把整个Zuul处理过程的源码debug了一遍；</p><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>Zuul处理请求的入口是一个Servlet：<code>ZuulServlet</code>，SpringCloud也提供另外的处理入口，一个Servlet Filter: <code>ZuulServletFilter</code>，修改配置文件<code>zuul.use-filter=true</code>即可。 它进入ZuulServlet的过程如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-1.png" alt="Zuul"><br>http依然先进入DispatchServlet，接着调用ZuulController，再接着调用ZuulServlet。这中间经过不少反射处理，可能这也是性能低的一个原因。不太明白为什么不直接进入ZuulServlet。</p><h3 id="源码走读"><a href="#源码走读" class="headerlink" title="源码走读"></a>源码走读</h3><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-2.png" alt="Zuul"><br>进入了ZuulServlet后，调用service方法，这个时候就开始调用各个类型的ZuulFilter了，它主要做了如下事情。</p><ol><li>初始化RequestContext，其实就是一个<code>ThreadLocal</code>，将httpServlet，httResponse放入其中，方便后面自定义的ZuulFilter可以获取。</li><li>调用<code>pre filter</code>。</li><li>调用<code>route filter</code>。</li><li>调用<code>post filter</code>。<br><strong>注意点：再调用各个filter的过程中如果出现异常，都会调用<code>error filter</code>。</strong><br>接着我们查看pre filter是如何调用的：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-3.png" alt="Zuul"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-4.png" alt="Zuul"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-5.png" alt="Zuul"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-6.png" alt="Zuul"><br>也就是说，现在上面的流程图变成了这样:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springcloud/zuul-7.png" alt="Zuul"><br>这样，我们的思路就很清晰了，从请求进入，到zuul的调用完整过程都已经整理了出来，接下来我们只要开始自定义filter处理我们的业务逻辑即可。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章我们从技术选型出发，比较了zuul和gateway的优缺点。最后通过阅读源码的方式整理了Zuul处理请求的整个过程。<br>下一章：<code>如何自定义Zuul Filter以及所遇到坑！</code></p><p><code>关注我，这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文原创地址，&lt;code&gt;我的博客&lt;/code&gt;：&lt;a href=&quot;https://jsbintask.cn/2019/03/28/springcloud/springcloud-zuul-process/&quot;&gt;https://jsbintask.cn/2019/03/28/springcloud/springcloud-zuul-process/&lt;/a&gt;(食用效果最佳)，转载请注明出处!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近公司最新架构确定使用微服务之后，经过讨论，最终还是选用了&lt;code&gt;SpringCloud&lt;/code&gt;的体系。我负责网关，鉴权服务的研发。记录下这段时间新接触的知识。&lt;/p&gt;
&lt;h2 id=&quot;网关技术选型&quot;&gt;&lt;a href=&quot;#网关技术选型&quot; class=&quot;headerlink&quot; title=&quot;网关技术选型&quot;&gt;&lt;/a&gt;网关技术选型&lt;/h2&gt;&lt;p&gt;springcloud选用了最新的稳定版本&lt;code&gt;Greenwich&lt;/code&gt;，所以对于网关来说，有两种框架选择：&lt;code&gt;SpringCloud Gateway&lt;/code&gt;， &lt;code&gt;Zuul&lt;/code&gt;，经过调研我最终选用了Zuul，原因如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;目前项目在一个快速迭代的过程中，Zuul相比于Gateway来说更加稳定。&lt;/li&gt;
&lt;li&gt;Gateway文档还有待完善，我在调查过程中，发现官网文档甚至代码还留有很多&lt;code&gt;TODO&lt;/code&gt;，这不是一个大坑吗！ &lt;a href=&quot;https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.0.RELEASE/single/spring-cloud-gateway.html#_writing_custom_route_predicate_factories&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gateway文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gateway相对Zuul来说显得难以使用，Gateway使用Spring5开发，基于函数，响应式编程，可能对于刚接触&lt;code&gt;Reactive&lt;/code&gt;的人来说阅读源码有一定难度。&lt;/li&gt;
&lt;li&gt;虽然Zuul在性能上来说不如Gateway，但对于我们的业务来说这点时间消耗显得不那么重要。&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Proxy	    Avg Latency	    Avg Req/Sec/Thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gateway	    &lt;span class=&quot;number&quot;&gt;6.61&lt;/span&gt;ms	        &lt;span class=&quot;number&quot;&gt;3.24&lt;/span&gt;k&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;linkered	&lt;span class=&quot;number&quot;&gt;7.62&lt;/span&gt;ms	        &lt;span class=&quot;number&quot;&gt;2.82&lt;/span&gt;k&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zuul	    &lt;span class=&quot;number&quot;&gt;12.56&lt;/span&gt;ms	        &lt;span class=&quot;number&quot;&gt;2.09&lt;/span&gt;k&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;none	    &lt;span class=&quot;number&quot;&gt;2.09&lt;/span&gt;ms	        &lt;span class=&quot;number&quot;&gt;11.77&lt;/span&gt;k&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="springcloud" scheme="https://jsbintask.cn/tags/springcloud/"/>
    
      <category term="zuul" scheme="https://jsbintask.cn/tags/zuul/"/>
    
  </entry>
  
  <entry>
    <title>HashSet源码解析从一道面试题说起：HashSet内部是怎么实现的？</title>
    <link href="https://jsbintask.cn/2019/03/27/jdk/jdk8-hashset/"/>
    <id>https://jsbintask.cn/2019/03/27/jdk/jdk8-hashset/</id>
    <published>2019-03-27T08:05:00.000Z</published>
    <updated>2019-03-27T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/03/27/jdk/jdk8-hashset/">https://jsbintask.cn/2019/03/27/jdk/jdk8-hashset/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间朋友面试遇到这个问题：谈一谈HashSet的特点，它是怎么实现的，使用时有什么需要注意的点呢？恰好最近在写这方面的文章，于是正好通过本篇文章讲解下<code>HashSet</code>的源码实现，需要注意的点。<br><code>HashSet</code>实现了<code>Set</code>接口，是一个不能够存放重复元素的容器，内部直接使用<code>HashMap</code>实现，即底层使用数组存储数据，HashSet没有任何同步手段，在多线程环境下需慎重考虑，可以使用<code>Collections.synchronizedSet(new HashSet(...));</code>给原有的Set方法同步。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/hashset-1.png" alt="HashSet"></p><blockquote><p>友情链接：<a href="https://www.jianshu.com/p/a090a0f0c4d6" target="_blank" rel="noopener">HashMap源码全解析从一道面试题说起：请一行一行代码描述下hashmap put方法</a></p></blockquote><a id="more"></a><h2 id="HashSet结构详解"><a href="#HashSet结构详解" class="headerlink" title="HashSet结构详解"></a>HashSet结构详解</h2><h3 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h3><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/hashset-2.png" alt="HashSet"><br>关系图没有需要注意的点，<code>HashSet</code>实现了<code>Set</code>接口，Set是<code>集合</code>的抽象概念，它内部不允许出现重复的元素。</p><h3 id="类成员"><a href="#类成员" class="headerlink" title="类成员"></a>类成员</h3><p>前面我们已经说过，Set内部是不能够存在重复元素的，那HashSet内部是怎么做的呢？如图：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/hashset-3.png" alt="HashSet"><br>直接使用HashMap存放数据，因HashMap的Key须唯一，所以可以将我们需要存放的数据放到Key，而所有的value对应一个内部的对象PRESENT即可。</p><h2 id="源码详解"><a href="#源码详解" class="headerlink" title="源码详解"></a>源码详解</h2><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单明了，直接new一个HashMap。 这里需要注意的是，它还有另一个不常用的构造方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</span><br><span class="line">    map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用这个构造方法会内部将不再使用HashMap操作元素，而是<code>LinkedHashMap</code>，而LinkedHashMap继承自HashMap，他们之间的不同是LinkedHashMap在HashMap底层使用数组的是线上加了两个“指针”分别指向头和尾。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/hashset-4.png" alt="HashSet"></p><h3 id="add-E-e-添加元素"><a href="#add-E-e-添加元素" class="headerlink" title="add(E e) 添加元素"></a>add(E e) 添加元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接调用HashMap的put方法，将元素e放到map的key位置来保证唯一性。我们知道HashMap的put方法如果该位置已经存在一个一样的Key（==或者equals相等），会用新的value替换原来的旧的value，并且返回旧的value，所以对于HashSet而言第一次插入返回null就代表成功，以后再次插入同样的元素，返回的是一个对象，表示已经存在这样的元素了，插入失败！<br>其它remove，contains方法类似。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>HashSet中存储的元素都是“无序的”，因为底层使用数组实现，存储时将key进行hash得出数组位置，这是一个随机的过程，所以存储的元素时无序的。</li><li>为了HashSet迭代时的性能考虑，初始容量可以尽量设置的小一点，而加载引子则可以设置的大一点（默认0.75）。因为HashSet和HashMap关注的中心不同，HashMap关注的是其中的键值对的存储以及扩容时的性能考虑。<br>HashSet的迭代方法直接调用HashMap内部KeySet的iterator方法，返回<code>KeyIterator</code>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.keySet().iterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/hashset-5.png" alt="HashSet"><br>该方法在迭代时循环判断数组是否为null，不为null则认为该位置上有元素。所以确定初始容量，尽量设置的更小有利于HashSet迭代其中的key。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>HashSet是一个元素不会重复并且无序的容器。</li><li>HashSet内部使用HashMap实现，即最终依然使用数组存储数据。</li><li>使用时应该尽可能确定容器的大小，尽量设置初始容量小一点，并且加载引子大一点以加快迭代性能。</li></ol><p><code>关注我，这里只有干货！</code></p><p>关联文章：<br><a href="https://www.jianshu.com/p/a090a0f0c4d61" target="_blank" rel="noopener">HashMap源码全解析从一道面试题说起：请一行一行代码描述下hashmap put方法</a><br><a href="https://www.jianshu.com/p/a01659ca07f8" target="_blank" rel="noopener">jdk1.8源码解析-ArrayList</a><br><a href="https://www.jianshu.com/p/6a9cb631b2ef" target="_blank" rel="noopener">jdk1.8 LinkedList源码全分析</a><br><a href="https://www.jianshu.com/p/0f8d9cd4adc5" target="_blank" rel="noopener">线程池？面试？看这篇就够了！</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文原创地址，&lt;code&gt;我的博客&lt;/code&gt;：&lt;a href=&quot;https://jsbintask.cn/2019/03/27/jdk/jdk8-hashset/&quot;&gt;https://jsbintask.cn/2019/03/27/jdk/jdk8-hashset/&lt;/a&gt;(食用效果最佳)，转载请注明出处!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间朋友面试遇到这个问题：谈一谈HashSet的特点，它是怎么实现的，使用时有什么需要注意的点呢？恰好最近在写这方面的文章，于是正好通过本篇文章讲解下&lt;code&gt;HashSet&lt;/code&gt;的源码实现，需要注意的点。&lt;br&gt;&lt;code&gt;HashSet&lt;/code&gt;实现了&lt;code&gt;Set&lt;/code&gt;接口，是一个不能够存放重复元素的容器，内部直接使用&lt;code&gt;HashMap&lt;/code&gt;实现，即底层使用数组存储数据，HashSet没有任何同步手段，在多线程环境下需慎重考虑，可以使用&lt;code&gt;Collections.synchronizedSet(new HashSet(...));&lt;/code&gt;给原有的Set方法同步。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jsbintask22/static/master/jdk/hashset-1.png&quot; alt=&quot;HashSet&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;友情链接：&lt;a href=&quot;https://www.jianshu.com/p/a090a0f0c4d6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HashMap源码全解析从一道面试题说起：请一行一行代码描述下hashmap put方法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="jdk" scheme="https://jsbintask.cn/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>jdk1.8 LinkedList源码全分析</title>
    <link href="https://jsbintask.cn/2019/03/26/jdk/jdk8-linkedlist/"/>
    <id>https://jsbintask.cn/2019/03/26/jdk/jdk8-linkedlist/</id>
    <published>2019-03-26T08:05:00.000Z</published>
    <updated>2019-03-26T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/03/26/jdk/jdk8-linkedlist/">https://jsbintask.cn/2019/03/26/jdk/jdk8-linkedlist/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>LinkedList</code>内部是一个链表的实现，一个节点除了保持自身的数据外，还持有前，后两个节点的引用。所以就数据存储上来说，它相比使用数组作为底层数据结构的<code>ArrayList</code>来说，会更加耗费空间。但也正因为这个特性，它删除，插入节点很快！LinkedList没有任何同步手段，所以多线程环境须慎重考虑，可以使用<code>Collections.synchronizedList(new LinkedList(...));</code>保证线程安全。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-2.png" alt="LinkedList"></p><blockquote><p>友情链接：<a href="https://www.jianshu.com/p/a01659ca07f8" target="_blank" rel="noopener">jdk1.8 ArrayList源码全分析</a><br><a id="more"></a></p></blockquote><h2 id="LinkedList结构"><a href="#LinkedList结构" class="headerlink" title="LinkedList结构"></a>LinkedList结构</h2><h3 id="类关系"><a href="#类关系" class="headerlink" title="类关系"></a>类关系</h3><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-1.png" alt="LinkedList"><br>这里我们需要注意的是，相比于ArrayList，它额外实现了双端队列接口<code>Deque</code>，这个接口主要是声明了队头，队尾的一系列方法。</p><h3 id="类成员"><a href="#类成员" class="headerlink" title="类成员"></a>类成员</h3><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-3.png" alt="LinkedList"><br>LinkedList内部有两个引用，一个<code>first</code>，一个<code>last</code>，分别用于指向链表的头和尾，另外有一个<code>size</code>，用于标识这个链表的长度，而它的接的引用类型是<code>Node</code>,这是他的一个内部类：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-4.png" alt="LinkedList"><br>很容易理解，<code>item</code>用于保存数据，而<code>prve</code>用于指向当前节点的前一个节点，<code>next</code>用于指向当前节点的下一个节点。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="add-E-e-方法"><a href="#add-E-e-方法" class="headerlink" title="add(E e)方法"></a>add(E e)方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法直接调用<code>linkLast</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们用作图来解释下这个方法的执行过程，一开始，first和last都为null，此时链表什么都没有，当第一次调用该方法后，first和last均指向了第一个新加的节点E1：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-5.png" alt="LinkedList"><br>接着，第二次调用该方法，加入新节点E2。首先，将last引用赋值给l，接着new了一个新节点E2，并且E2的prve指向l，接着将新节点E2赋值为last。现在结构如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-6.png" alt="LinkedList"><br>接着判断l==null? 所以走的else语句，将l的next引用指向新节点E2，现在数据结构如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-7.png" alt="LinkedList"><br>接着size+1，modCount+1，退出该方法，局部变量l销毁，所以现在数据结构如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-8.png" alt="LinkedList"><br>这样就完成了链表新节点的构建。</p><h3 id="add-int-index-E-element-这个方法是在指定位置插入新元素"><a href="#add-int-index-E-element-这个方法是在指定位置插入新元素" class="headerlink" title="add(int index, E element) 这个方法是在指定位置插入新元素"></a>add(int index, E element) 这个方法是在指定位置插入新元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>index位置检查（不能小于0，大于size）</li><li>如果index==size，直接在链表最后插入，相当于调用<code>add(E e)</code>方法</li><li>小于size，首先调用node方法将index位置的节点找出，接着调用linkBefore<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>我们同样作图分析，假设现在链表中有三个节点，调用node方法后找到的第二个节点E2，则进入方法后，结构如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-9.png" alt="LinkedList"><br>接着，将succ的prev赋值给pred，并且构造新节点E4，E4的prev和next分别为pred和suc，同时将新节点E4赋值为succ的prev引用，则现在结构如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-10.png" alt="LinkedList"><br>接着，将新节点赋值给pred节点的next引用，结构如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-11.png" alt="LinkedList"><br>最后，size+1，modCount+1，推出方法，本地变量succ，pred销毁，最后结构如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-12.png" alt="LinkedList"><br>这样新节点E4就插入在了第二个E2节点前面。新链表构建完成。从这个过程中我们可以知道，这里并没有大量移动移动以前的元素，所以效率非常高！</p><h3 id="E-get-int-index-获取指定节点数据"><a href="#E-get-int-index-获取指定节点数据" class="headerlink" title="E get(int index)获取指定节点数据"></a>E get(int index)获取指定节点数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接调用node方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>判断index在链表的哪边。</li><li>遍历查找index或者size-index次，找出对应节点。<br>这里我们知道，相比于数组的直接索引获取，遍历获取节点效率并不高。</li></ol><h3 id="E-remove-int-index-移除指定节点"><a href="#E-remove-int-index-移除指定节点" class="headerlink" title="E remove(int index)移除指定节点"></a>E remove(int index)移除指定节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>检查index位置</li><li>调用node方法获取节点，接着调用<code>unlink(E e)</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这个方法就不做分析了，其原理就是将当前节点X的前一个节点P的next直接指向X的下一个节点D，这样X就不再关联任何引用，等待垃圾回收即可。<br>这里我们同样知道，相比于ArrayList的copy数组覆盖原来节点，效率同样更高！</p><p><strong>到现在，我们关于链表的核心方法，增删改都分析完毕，最后介绍下它实现的队列Deque的各个方法：</strong><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-13.png" alt="LinkedList"></p><ul><li>add(E e):队尾插入新节点，如果队列空间不足，抛出异常；LinkedList没有空间限制，所以可以无限添加。</li><li>offer(E e):队尾插入新节点，空间不足，返回false，在LinkedList中和add方法同样效果。</li><li>remove():移除队头节点，如果队列为空（没有节点，first为null），抛出异常。LinkedList中就是first节点（链表头）</li><li>poll()：同remove，不同点：队列为空，返回null</li><li>element()：查询队头节点(不移除)，如果队列为空，抛出异常。</li><li>peek()：同element，不同点：队列为空，返回null。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>LinkedList内部使用链表实现，相比于ArrayList更加耗费空间。</li><li>LinkedList插入，删除节点不用大量copy原来元素，效率更高。</li><li>LinkedList查找元素使用遍历，效率一般。</li><li>LinkedList同时是双向队列的实现。</li></ol><p><code>关注我，这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文原创地址，&lt;code&gt;我的博客&lt;/code&gt;：&lt;a href=&quot;https://jsbintask.cn/2019/03/26/jdk/jdk8-linkedlist/&quot;&gt;https://jsbintask.cn/2019/03/26/jdk/jdk8-linkedlist/&lt;/a&gt;(食用效果最佳)，转载请注明出处!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;LinkedList&lt;/code&gt;内部是一个链表的实现，一个节点除了保持自身的数据外，还持有前，后两个节点的引用。所以就数据存储上来说，它相比使用数组作为底层数据结构的&lt;code&gt;ArrayList&lt;/code&gt;来说，会更加耗费空间。但也正因为这个特性，它删除，插入节点很快！LinkedList没有任何同步手段，所以多线程环境须慎重考虑，可以使用&lt;code&gt;Collections.synchronizedList(new LinkedList(...));&lt;/code&gt;保证线程安全。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jsbintask22/static/master/jdk/linkedlist-2.png&quot; alt=&quot;LinkedList&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;友情链接：&lt;a href=&quot;https://www.jianshu.com/p/a01659ca07f8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jdk1.8 ArrayList源码全分析&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="jdk" scheme="https://jsbintask.cn/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>jdk8源码解析-ArrayList</title>
    <link href="https://jsbintask.cn/2019/03/22/jdk/jdk8-arraylist/"/>
    <id>https://jsbintask.cn/2019/03/22/jdk/jdk8-arraylist/</id>
    <published>2019-03-22T08:05:00.000Z</published>
    <updated>2019-03-22T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/tree_swing_by_t1na_d78qocc-pre.jpg-blog_960_440.jpg" alt="ArrayList"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/03/22/jdk/jdk8-arraylist/">https://jsbintask.cn/2019/03/22/jdk/jdk8-arraylist/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>ArrayList</code>是一个长度可调节的数组，使用者只需向其中添加，删除，获取元素，可以向其中添加任何对象（包括null值），无需关系它的扩容，，缩减问题。它实现了<code>list</code>接口所有方法，它基本等价于<code>Vector</code>，唯一不同的是它没有任何同步手段，多线程环境须慎重考虑。</p><h2 id="ArrayList结构"><a href="#ArrayList结构" class="headerlink" title="ArrayList结构"></a>ArrayList结构</h2><h3 id="类关系"><a href="#类关系" class="headerlink" title="类关系"></a>类关系</h3><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/arraylist-1.png" alt="ArrayList"><br>这里唯一需要注意的是，它实现了一个<code>RandomAccess</code>接口，这个接口没有任何方法声明，是一个标记接口，它是为了告诉使用者如果实现了这个接口那么你的实现在算法上应该for循环会比使用iterator更快，<code>LinkedList</code>则没有实现这个接口，它则是iterator更快。<br>我们查看Collections工具类二分搜索方法：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/arraylist-2.png" alt="ArrayList"><br>这就验证了我们上面说的那句话，实现了这个接口的子类在随机访问时会更快（for循环），而没有实现，则顺序访问会更加快（iterator迭代）。</p><h3 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h3><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/arraylist-3.png" alt="ArrayList"><br>它内部主要有两个成员变量，elementData用于存储数据，size用于标记存储了多少个元素，size总是按最大值显示的（考虑多线程环境，添加元素先增加size）。</p><h3 id="方法解析"><a href="#方法解析" class="headerlink" title="方法解析"></a>方法解析</h3><p><code>add(E e)</code> 末尾插入新元素<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">//判断是否需要扩容</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>首先进行了扩容，最终调用的是grow方法：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/arraylist-4.png" alt="ArrayList"><br>从这里我们知道每次扩容后的大小为原来的容量 n + n/2，例如原来的容量是10，扩容后的容量则成了15.</li><li>将新元素放到了原来的元素的后面，因为不用移动原来的元素，所以比较快。</li></ol><p><code>add(int index, E e)</code> 指定位置插入新元素<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>检查index位置是否合理（太小，太大）</li><li>同上，检查是否需要扩大数组容量。</li><li>将原来index后面的所有元素往后面移动一个位置，这样index位置就空出来了。</li><li>将新元素放到index位置，接着size加1<br>从这里我们知道，因为每次插入都需要移动index后面的元素，所以效率很低，尽量避免使用该方法。<code>其它的add方法同上类似，这里不再赘述。</code></li></ol><p><code>get(int index)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>获取指定位置元素，直接返回数组对应的位置，不需要额外操作，很快！（这也是为什么它能够实现了AccessRandom）</p><p><code>remove(int index)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>直接移动index后面的所有元素向前移动，覆盖index位置，简单粗暴。 从这里我们知道需要移动数组，效率并不高。</li></ol><p><code>index(E e)</code> 查询元素位置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>遍历查找第一个equals要找的的元素的位置，返回，简单粗暴。<br>最后我们介绍下另一个方法<code>trimToSize()</code>:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">        elementData = (size == <span class="number">0</span>)</span><br><span class="line">          ? EMPTY_ELEMENTDATA</span><br><span class="line">          : Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这个方法是用来缩减空间的，当你的ArrayList装的东西已经确定以后（以后不会再删除，添加），可以调用这个方法节省内存空间。 它会把数组的长度缩减得和size一样。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>ArrayList内部使用一个数组存储数据，使用一个size变量标记储存了多少个元素。</li><li>它可以存储任一对象，包括null，当向其中添加元素时，会进行扩容操作，每次扩容增加的大小为原来数组长度的一半。所以最好使用之前能够估计好元素的数量。</li><li>查找元素，末尾插入元素很快，指定位置插入元素，移除元素效率很低，因为需要移动数组。 所以查找操作多推荐使用ArrayList，删除操作多时推荐使用LinkedList。</li><li>可以调用trimToSize”瘦身“。</li><li>继承了一个AccessRandom标记接口，继承者在算法实现上应该考虑for循环遍历元素要快于iterator遍历。<br><code>关注我，这里只有干货！</code></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/tree_swing_by_t1na_d78qocc-pre.jpg-blog_960_440.jpg&quot; alt=&quot;ArrayList&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="jdk" scheme="https://jsbintask.cn/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>你的rest服务幂等吗？</title>
    <link href="https://jsbintask.cn/2019/03/21/api/restful-api-idempotent/"/>
    <id>https://jsbintask.cn/2019/03/21/api/restful-api-idempotent/</id>
    <published>2019-03-21T08:05:00.000Z</published>
    <updated>2019-03-21T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/restful_by_xxseadragonxx_d4ahvcl-pre.jpg-blog_960_440.jpg" alt="restful api"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/03/21/api/restful-api-idempotent/">https://jsbintask.cn/2019/03/21/api/restful-api-idempotent/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇我们介绍了<code>restful api</code>相关知识，本篇我们介绍另一个于rest息息相关的概念：<code>幂等</code>;</p><blockquote><p><a href="https://www.jianshu.com/p/a35bad7dbc54" target="_blank" rel="noopener">你真的了解rest api吗？</a></p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我们知道，springcloud做微服务时，服务之间的调用，服务的暴露使用的就是restful api，现在可以考虑这么一种情况，加入我们有订单服务A，支付服务B，A向B服务发送了一次请求，但由于网络，超时等的原因，A认为B该次服务失败，于是A又发起了一次同样的请求，那么这次请求会不会有什么不良影响呢？如果B又调用了其它服务呢？</p><blockquote><p>这里我们可以引出一个概念：在REST API中，当发送多个相同的请求与发送单个请求具有相同的效果时，该REST API就可以称为幂等。</p></blockquote><p>所以A发送相同的请求调用B服务不会出现业务逻辑的偏差，这样B服务就是幂等的。</p><h2 id="http-method-幂等"><a href="#http-method-幂等" class="headerlink" title="http method 幂等"></a>http method 幂等</h2><p>如果你在设计API时遵循REST原则，则GET，PUT，DELETE，HEAD，OPTIONS和TRACE HTTP方法的自动幂等REST API。只有POST API不是幂等的。</p><p>POST 不是幂等的。<br>GET，PUT，DELETE，HEAD，OPTIONS和TRACE是幂等。<br>why？</p><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>通常，当然不是绝对； 我们使用POST API在服务器上是为了创建新资源。所以，调用相同的POST请求N次时，您将在服务器上拥有N个新资源。因此，POST不是幂等的。</p><h3 id="GET，HEAD，OPTIONS和TRACE"><a href="#GET，HEAD，OPTIONS和TRACE" class="headerlink" title="GET，HEAD，OPTIONS和TRACE"></a>GET，HEAD，OPTIONS和TRACE</h3><p>GET，HEAD，OPTIONS和TRACE方法永远不会改变服务器上的资源状态。因为它们全部用来获取数据。因此，调用多个请求将不会在服务器上进行任何写操作，所以GET，HEAD，OPTIONS和TRACE是幂等的。</p><h3 id="PUT和PATCH"><a href="#PUT和PATCH" class="headerlink" title="PUT和PATCH"></a>PUT和PATCH</h3><p>使用PUT，PATCH API来更新资源状态。调用PUT API N次，则第一个请求将更新资源; N-1请求将一次又一次地覆盖相同的资源状态 - 实际上不会改变任何东西。因此，PUT是幂等的。</p><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>调用N个相同的DELETE请求时，第一个请求将删除资源，响应将是200 (OK)或204 (No Content)。其他N-1请求将返回404 (Not Found)。显然，响应与第一个请求不同，但服务器端的任何资源都没有状态更改，因为原始资源已被删除。因此，DELETE是幂等的。<br>这里值得注意的是，delete可能有这样一种设计：<br>DELETE <code>/user/latest</code> 删除最新的用户，这样的话调用N次将删除N个用户，DELETE同样不是幂等的，所以该api可以考虑设计成 <code>POST</code></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>通常，我们为了给所有服务都设计成幂等，有以下解决办法：</p><ol><li>异步处理，利用消息中间件，A向中间件中发送一个消息，A服务直接返回成功，B服务异步消费。</li><li>唯一ID，每次请求都可带上唯一ID，A发送请求时，B可以知道该请求是否已经发送过，有则直接忽略。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从幂等概念谈起，再结合http各method意义谈了每个方法是否幂等。 最后引出解决办法。</p><p><code>关注我，这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/restful_by_xxseadragonxx_d4ahvcl-pre.jpg-blog_960_440.jpg&quot; alt=&quot;restful api&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="api" scheme="https://jsbintask.cn/tags/api/"/>
    
      <category term="restful" scheme="https://jsbintask.cn/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>你真的了解restful api吗？</title>
    <link href="https://jsbintask.cn/2019/03/20/api/restful-api-best-practices/"/>
    <id>https://jsbintask.cn/2019/03/20/api/restful-api-best-practices/</id>
    <published>2019-03-20T08:05:00.000Z</published>
    <updated>2019-03-20T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/restful_by_miguel_santos_dbvfrth-pre.jpg-blog_960_440.jpg" alt="restful api"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/03/20/api/restful-api-best-practices/">https://jsbintask.cn/2019/03/20/api/restful-api-best-practices/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在以前，一个网站的完成总是“all in one”，页面，数据，渲染全部在服务端完成，这样做的最大的弊端是后期维护，扩展极其痛苦，开发人员必须同时具备前后端知识。于是慢慢的后来兴起了<code>前后端分离</code>的思想：<br>后端负责<code>数据编造</code>,而前端则负责<code>数据渲染</code>，前端静态页面调用指定api获取到有固定格式的数据，再将数据展示出来，这样呈现给用户的就是一个”动态“的过程，而关于api这部分的设计则成了一个问题。如何设计出一个便于理解，容易使用的api则成了一个问题。<br>而所谓的<code>restful</code>就是用来规范我们的api的一种约束。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>rest</code>是<code>REpresentational State Transfer</code>三个单词的缩写，由Roy Fielding于2000年论文中提出，它代表着分布式服务的架构风格。而如果想你的api被称为restful api，只要遵循其规定的约束即可。</p><h2 id="rest设计原则"><a href="#rest设计原则" class="headerlink" title="rest设计原则"></a>rest设计原则</h2><ol><li>客户端-服务器：通过将用户UI与数据存储分开，我们可以简化服务器组件来提高跨多个平台的用户界面的可移植性并提高可伸缩性。 它可以比表现成前后端分离的思想。</li><li>无状态：从客户端到服务器的每个请求都必须包含理解请求所需的所有信息，并且不能利用服务器上任何存储的上下文。 这表示你应该尽可能的避免使用session，由客户端自己标识会话状态。（token）</li><li>规范接口：REST接口约束定义：资源识别; 请求动作; 响应信息; 它表示通过uri标出你要操作的<code>资源</code>，通过请求动作（http method）标识要执行的操作，通过返回的状态码来表示这次请求的执行结果。</li><li>可缓存： 缓存约束要求将对请求的响应中的数据隐式或显式标记为可缓存或不可缓存。如果响应是可缓存的，则客户端缓存有权重用该响应数据以用于以后的等效请求。 它表示get请求响应头中应该表示有是否可缓存的头（Cache-Control)<br>其中1，2，3约束最为重要，其中1容易理解。接下来我们就谈谈无状态和规范接口的原则。</li></ol><h3 id="uri规范"><a href="#uri规范" class="headerlink" title="uri规范"></a>uri规范</h3><p>资源的描述构成了uri，它一般有以下约束：</p><ol><li><p>使用名词。如 user, student, class<br><a href="http://api.example.com/class-management/students" target="_blank" rel="noopener">http://api.example.com/class-management/students</a><br><a href="http://api.example.com/device-management/managed-devices/{device-id}" target="_blank" rel="noopener">http://api.example.com/device-management/managed-devices/{device-id}</a><br><a href="http://api.example.com/user-management/users/" target="_blank" rel="noopener">http://api.example.com/user-management/users/</a><br><a href="http://api.example.com/user-management/users/{id}" target="_blank" rel="noopener">http://api.example.com/user-management/users/{id}</a></p></li><li><p>http method对应不同的请求动作（数据库或者业务逻辑）<br><code>GET</code>：查询操作：<br>HTTP GET /devices?startIndex=0&amp;size=20<br>HTTP GET /configurations?startIndex=0&amp;size=20<br>HTTP GET /devices/{id}/configurations<br>HTTP GET /devices/{id}<br><code>POST</code>：新增操作：<br>HTTP POST /device<br><code>PUT</code> 更新操作（代表更新一个实体的所有属性）<br>HTTP PUT /devices/{id}<br><code>PATCH</code> 部分更新（代表更新一个尸体的部分属性）由于有的浏览器兼容性问题，一般推荐使用put<br>HTTP PATCH /devices/{id}<br><code>DELETE</code> 删除操作<br>HTTP DELETE /devices/{id}</p></li><li><p>使用连字符（ - ）而不是（_）来提高URI的可读性<br><a href="http://api.example.com/inventory-management/managed-entities/{id}/install-script-location" target="_blank" rel="noopener">http://api.example.com/inventory-management/managed-entities/{id}/install-script-location</a> //更易读<br><a href="http://api.example.com/inventory_management/managed_entities/{id}/install_script_location" target="_blank" rel="noopener">http://api.example.com/inventory_management/managed_entities/{id}/install_script_location</a> //更容易出错</p></li><li><p>在URI中使用小写字母<br><a href="http://api.example.org/my-folder/my-doc" target="_blank" rel="noopener">http://api.example.org/my-folder/my-doc</a></p></li><li><p>不要使用文件扩展名 文件扩展名看起来很糟糕，不会增加任何优势。删除它们也会减少URI的长度。没理由保留它们。<br><a href="http://api.example.com/device-management/managed-devices.xml" target="_blank" rel="noopener">http://api.example.com/device-management/managed-devices.xml</a> / <em>不要使用它</em> /<br><a href="http://api.example.com/device-management/managed-devices" target="_blank" rel="noopener">http://api.example.com/device-management/managed-devices</a> / <em>这是正确的URI </em> /</p></li><li><p>使用查询组件过滤URI集合<br>很多时候，我们会遇到需要根据某些特定资源属性对需要排序，过滤或限制的资源集合的要求。为此，请不要创建新的API - 而是在资源集合API中启用排序，过滤和分页功能，并将输入参数作为查询参数传递。例如<br><a href="http://api.example.com/device-management/managed-devices" target="_blank" rel="noopener">http://api.example.com/device-management/managed-devices</a><br><a href="http://api.example.com/device-management/managed-devices?region=USA" target="_blank" rel="noopener">http://api.example.com/device-management/managed-devices?region=USA</a><br><a href="http://api.example.com/device-management/managed-devices?region=USA&amp;brand=XYZ" target="_blank" rel="noopener">http://api.example.com/device-management/managed-devices?region=USA&amp;brand=XYZ</a><br><a href="http://api.example.com/device-management/managed-devices?region=USA&amp;brand=XYZ&amp;sort=installation-date" target="_blank" rel="noopener">http://api.example.com/device-management/managed-devices?region=USA&amp;brand=XYZ&amp;sort=installation-date</a></p></li><li><p>不要在末尾使用<code>/</code><br>作为URI路径中的最后一个字符，正斜杠（/）不会添加语义值，并可能导致混淆。最好完全放弃它们。</p></li><li><p>使用http状态码定义api执行结果<br><strong>1xx：信息</strong><br>通信传输协议级信息。</p></li></ol><p><strong>2xx：成功</strong><br>表示客户端的请求已成功接受。</p><p><strong>3xx：重定向</strong><br>表示客户端必须执行一些其他操作才能完成其请求。</p><p><strong>4xx：客户端错误</strong><br>此类错误状态代码指向客户端。</p><p><strong>5xx：服务器错误</strong><br>服务器负责这些错误状态代码。<br>另外完整的更为详细的状态码此处不做赘述。一般简化版本的api会使用200，400，500，其中400代表客户端调用有误，将错误信息放入response：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"username.or.password.error"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="9"><li>api版本定义<br>当我们需要对现有的api接口升级的时候，因为该api接口已经投入使用，所以新添加的业务可能无法保证兼容原来的逻辑，这个时候就需要新的接口，而这个接口一般表示对原来的接口的升级（不同版本），那版本怎么定义呢？</li></ol><ul><li>URI版本控制（推荐）<br><a href="http://api.example.com/v1" target="_blank" rel="noopener">http://api.example.com/v1</a><br><a href="http://apiv1.example.com" target="_blank" rel="noopener">http://apiv1.example.com</a></li><li>使用自定义请求标头进行版本控制<br>Accept-version：v1<br>Accept-version：v2</li><li>使用Accept header 进行版本控制<br>Accept:application / vnd.example.v1 + json<br>Accept:application / vnd.example + json; version = 1.0</li></ul><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>使REST API无状态有一些非常显着的优点：</p><ol><li>无状态通过将API部署到多个服务器，有助于将API扩展到数百万并发用户。任何服务器都可以处理任何请求，因为没有与会话相关的依赖。（集群）</li><li>无状态使得REST API不那么复杂 - 可以删除所有服务器端状态同步逻辑。（删除session，清理多余空间）</li><li>无状态API也很容易缓存。特定软件可以通过查看该一个请求来决定是否缓存HTTP请求的结果。从先前的请求中获得的状态可能会影响这个请求的可缓存性，这并不存在任何不确定性。它提高了应用程序的性能。</li><li>服务器永远不会忘记每个客户端身份”，因为客户端会在每个请求中发送所有必要的信息。（携带token）</li></ol><p>那么无状态又要怎么实现呢？前面我们已经说了，服务端不应该再保存session会话，这个工作全部交由http请求去标识，而最常见的做法则是使用token。生成token可以考虑使用jwt，oauth。其中jwt可以参考我的另一篇文章：<a href="https://www.jianshu.com/p/6ff0e30fc9e9" target="_blank" rel="noopener">https://www.jianshu.com/p/6ff0e30fc9e9</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们首先介绍rest服务背景，引出rest架构的介绍，最后重点介绍了rest api的约束设计。</p><p><code>关注我，这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/restful_by_miguel_santos_dbvfrth-pre.jpg-blog_960_440.jpg&quot; alt=&quot;restful api&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="api" scheme="https://jsbintask.cn/tags/api/"/>
    
      <category term="restful" scheme="https://jsbintask.cn/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>线程池？面试？看这篇就够了！</title>
    <link href="https://jsbintask.cn/2019/03/10/jdk/jdk8-threadpool/"/>
    <id>https://jsbintask.cn/2019/03/10/jdk/jdk8-threadpool/</id>
    <published>2019-03-10T08:05:00.000Z</published>
    <updated>2019-03-10T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/never_easy_by_tryingtofly_daipdis-pre.jpg-blog_960_440.jpg" alt="ThreadPool"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/03/10/jdk/jdk8-threadpool/">https://jsbintask.cn/2019/03/10/jdk/jdk8-threadpool/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在实际工作中，<code>线程</code>是一个我们经常要打交道的角色，它可以帮我们灵活利用资源，提升程序运行效率。但是我们今天不是探讨<code>线程</code>！我们今天来聊聊另一个与线程息息相关的角色：<code>线程池</code>.本篇文章的目的就是全方位的解析线程池的作用，以及jdk中的接口，实现以及原理，另外对于某些重要概念，将从<code>源码</code>的角度探讨。<br><code>tip：本文较长，建议先码后看。</code></p><h2 id="线程池介绍"><a href="#线程池介绍" class="headerlink" title="线程池介绍"></a>线程池介绍</h2><p>首先我们看一段创建线程并且运行的常用代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"run thread-&gt;"</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="comment">//to do something, send email, message, io operator, network...</span></span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码很容易理解，我们为了异步，或者效率考虑，将某些耗时操作放入一个新线程去运行，但是这样的代码却存在这样的问题：</p><ol><li>创建销毁线程资源消耗； 我们使用线程的目的本是出于效率考虑，可以为了创建这些线程却消耗了额外的<code>时间</code>，<code>资源</code>，对于线程的销毁同样需要系统资源。</li><li>cpu资源有限，上述代码创建线程过多，造成有的任务不能即时完成，响应时间过长。</li><li>线程无法管理，无节制地创建线程对于有限的资源来说似乎成了“得不偿失”的一种作用。<br>手动创建执行线程存在以上问题，而线程池就是用来解决这些问题的。怎么解决呢？我们可以先粗略的定义一下线程池：<blockquote><p>线程池是一组已经创建好的，一直在等待任务执行的线程的集合。</p></blockquote></li></ol><p>因为线程池中线程是已经创建好的，所以对于任务的执行不会消耗掉额外的资源，线程池中线程个数由我们自定义添加，可相对于资源，资源任务做出调整，对于某些任务，如果线程池尚未执行，可手动取消，线程任务变得能够管理！<br>所以，线程池的作用如下：</p><ol><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。 </li><li>提高线程的可管理性。</li></ol><h2 id="jdk线程池详解"><a href="#jdk线程池详解" class="headerlink" title="jdk线程池详解"></a>jdk线程池详解</h2><p>上面我们已经知道了线程池的作用，而对于这样一个好用，重要的工具，<code>jdk</code>当然已经为我们提供了实现，这也是本篇文章的重点。<br>在jdk中，关于线程池的接口，类都定义在<code>juc</code>（java.util.concurrent）包中，这是jdk专门为我们提供用于并发编程的包，当然，本篇文章我们只介绍与线程池有关的接口和类，首先我们看下重点要学习的接口和类：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-1.png" alt="ThreadPool"><br>如图所示，我们将一一讲解这6个类的作用并且分析。</p><h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p>首先我们需要了解就是<code>Executor</code>接口，它有一个方法，定义如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-2.png" alt="ThreadPool"><br>Executor自jdk1.5引入，这个接口只有一个方法<code>execute</code>声明，它的作用以及定义如下：接收一个任务（<code>Runnable</code>）并且执行。<code>注意：同步执行还是异步执行均可</code>！<br>由它的定义我们就知道，它是一个线程池最基本的作用。但是在实际使用中，我们常常使用的是另外一个功能更多的子类<code>ExecutorService</code>。</p><h3 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h3><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-3.png" alt="ThreadPool"><br>这个接口继承自Executor，它的方法定义就丰富多了，可以关闭，提交Future任务，批量提交任务，获取执行结果等，我们一一讲解下每个方法作用声明：</p><ol><li><code>void shutdown()</code>: “优雅地”关闭线程池，为什么是“优雅地”呢？因为这个线程池在关闭前会先等待线程池中已经有的任务执行完成，一般会配合方法<code>awaitTermination</code>一起使用，调用该方法后，线程池中不能再加入新的任务。</li><li><code>List&lt;Runnable&gt; shutdownNow();</code>: “尝试”终止正在执行的线程，返回在正在等待的任务列表，调用这个方法后，会调用正在执行线程的<code>interrupt（）</code>方法，所以如果正在执行的线程如果调用了<code>sleep，join，await</code>等方法，会抛出<code>InterruptedException</code>异常。</li><li><code>boolean awaitTermination(long timeout, TimeUnit unit)</code>: 该方法是一个阻塞方法，参数分别为时间和时间单位。这个方法一般配合上面两个方法之后调用。如果先调用<code>shutdown</code>方法，所有任务执行完成返回true，超时返回false，如果先调用的是<code>shutdownNow</code>方法，正在执行的任务全部完成true，超时返回false。</li><li><code>boolean isTerminated();</code>： 调用方法1或者2后，如果所有人物全部执行完毕则返回true，也就是说，就算所有任务执行完毕，但是不是先调用1或者2，也会返回false。</li><li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</code>: 提交一个能够返回结果的<code>Callable</code>任务，返回任务结果抽象对象是<code>Future</code>，调用<code>Future.get()</code>方法可以阻塞等待获取执行结果，例如：<br><code>result = exec.submit(aCallable).get();</code>，提交一个任务并且一直阻塞知道该任务执行完成获取到返回结果。</li><li><code>&lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</code>： 提交一个<code>Runnable</code>任务，执行成功后调用Future.get()方法返回的是result（这是什么骚操作？）。</li><li><code>Future&lt;?&gt; submit(Runnable task);</code>：和6不同的是调用<code>Future.get（）</code>方法返回的是<code>null</code>（这又是什么操作？）。</li><li><code>&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</code>: 提交一组任务，并且返回每个任务执行结果的抽象对象<code>List&lt;Future&lt;T&gt;&gt;</code>，Future作用同上，值得注意的是：<br>当调用其中任一<code>Future.isDone()</code>(判断任务是否完成，正常，异常终止都算）方法时，必须等到所有任务都完成时才返回true，简单说：<code>全部任务完成才算完成</code>。</li><li><code>&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, long timeout, TimeUnit unit)</code>: 同方法8，多了一个时间参数，不同的是：如果超时，Future.isDone()同样返回true。</li><li><code>&lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</code>：这个看名字和上面对比就容易理解了，返回第一个正常完成的任务地执行结果，后面没有完成的任务将被取消。</li><li><code>&lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, long timeout, TimeUnit unit)</code>：同10相比，多了一个超时参数。不同的是：在超时时间内，一个任务都没有完成，将抛出<code>TimeoutException</code>。<br>到现在，我们已经知道了一个线程池基本的所有方法，知道了每个方法的作用，接下来我们就来看看具体实现，首先我们研究下ExecutorService的具体实现抽象类：<code>AbstractExecutorService</code>。</li></ol><h3 id="AbstractExecutorService"><a href="#AbstractExecutorService" class="headerlink" title="AbstractExecutorService"></a>AbstractExecutorService</h3><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-4.png" alt="ThreadPool"><br><code>AbstractExecutorService</code>是一个抽象类，继承自<code>ExecutorService</code>，它实现了ExecutorService接口的<code>submit, invokeAll, invokeAny</code>方法，主要用于将ExecutorService的公共实现封装，方便子类更加方便使用，接下来我们看看具体实现：</p><h4 id="1-submit方法："><a href="#1-submit方法：" class="headerlink" title="1. submit方法："></a>1. submit方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, <span class="keyword">null</span>);</span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Callable&lt;T&gt; callable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FutureTask&lt;T&gt;(callable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判空</li><li>利用task构建一个Future的子类RunnableFuture，最后返回</li><li>执行这个任务（execute方法声明在Executor接口中，所以也是交由子类实现)。<br>execute方法交由子类实现了，这里我们主要分析<code>newTaskFor</code>方法，看它是如何构建Future对象的：<br>首先，<code>RunnableFuture</code>接口定义如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>他就是Future和Runnable的组合，它的实现是<code>FutureTask</code>：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-6.png" alt="ThreadPool"></p><h4 id="2-invokeAll方法："><a href="#2-invokeAll方法：" class="headerlink" title="2. invokeAll方法："></a>2. invokeAll方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (tasks == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        ArrayList&lt;Future&lt;T&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;Future&lt;T&gt;&gt;(tasks.size());</span><br><span class="line">        <span class="keyword">boolean</span> done = <span class="keyword">false</span>;  <span class="comment">// ①</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Callable&lt;T&gt; t : tasks) &#123;  <span class="comment">// ②</span></span><br><span class="line">                RunnableFuture&lt;T&gt; f = newTaskFor(t);</span><br><span class="line">                futures.add(f);</span><br><span class="line">                execute(f);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = futures.size(); i &lt; size; i++) &#123;</span><br><span class="line">                Future&lt;T&gt; f = futures.get(i);    <span class="comment">// ③</span></span><br><span class="line">                <span class="keyword">if</span> (!f.isDone()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        f.get();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (CancellationException ignore) &#123;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ExecutionException ignore) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            done = <span class="keyword">true</span>;   <span class="comment">//  ④</span></span><br><span class="line">            <span class="keyword">return</span> futures;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!done)     <span class="comment">//   ⑤</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = futures.size(); i &lt; size; i++)</span><br><span class="line">                    futures.get(i).cancel(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>声明一个flag判断所有任务是否全部完成</li><li>调用newTaskFor方法构建RunnableFuture对象，循环调用<code>execute</code>方法添加每一个任务。</li><li>遍历每个任务结果，判断是否执行完成，没有完成调用 get()阻塞方法等待完成。</li><li>所有任务全部完成，将flag设置成true。</li><li><p>出现异常，还有任务没有完成，所有任务取消：<code>Future.cancel()</code>（实际是调用执行线程的<code>interrupt</code>方法。<br>上面代码分析和我们一开始讲解<code>ExecutorService</code>的<code>invokeAll</code>一致。</p><h4 id="3-invokeAny方法"><a href="#3-invokeAny方法" class="headerlink" title="3. invokeAny方法"></a>3. invokeAny方法</h4><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-7.png" alt="ThreadPool"><br><code>invokeAny</code>实际调用<code>doInvokeAny</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">doInvokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tasks == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">int</span> ntasks = tasks.size();</span><br><span class="line">        <span class="keyword">if</span> (ntasks == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        ArrayList&lt;Future&lt;T&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;Future&lt;T&gt;&gt;(ntasks);</span><br><span class="line">        ExecutorCompletionService&lt;T&gt; ecs =     <span class="comment">// ①</span></span><br><span class="line">            <span class="keyword">new</span> ExecutorCompletionService&lt;T&gt;(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ExecutionException ee = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> deadline = timed ? System.nanoTime() + nanos : <span class="number">0L</span>;</span><br><span class="line">            Iterator&lt;? extends Callable&lt;T&gt;&gt; it = tasks.iterator();</span><br><span class="line">            </span><br><span class="line">            futures.add(ecs.submit(it.next()));       <span class="comment">// ②</span></span><br><span class="line">            --ntasks;</span><br><span class="line">            <span class="keyword">int</span> active = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                Future&lt;T&gt; f = ecs.poll();    <span class="comment">//  ③</span></span><br><span class="line">                <span class="keyword">if</span> (f == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ntasks &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        --ntasks;</span><br><span class="line">                        futures.add(ecs.submit(it.next()));</span><br><span class="line">                        ++active;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (active == <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (timed) &#123;</span><br><span class="line">                        f = ecs.poll(nanos, TimeUnit.NANOSECONDS);</span><br><span class="line">                        <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">                        nanos = deadline - System.nanoTime();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>                  <span class="comment">//  ④</span></span><br><span class="line">                        f = ecs.take();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;           <span class="comment">// ⑤</span></span><br><span class="line">                    --active;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> f.get();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ExecutionException eex) &#123;</span><br><span class="line">                        ee = eex;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException rex) &#123;</span><br><span class="line">                        ee = <span class="keyword">new</span> ExecutionException(rex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ee == <span class="keyword">null</span>)       </span><br><span class="line">                ee = <span class="keyword">new</span> ExecutionException();</span><br><span class="line">            <span class="keyword">throw</span> ee;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = futures.size(); i &lt; size; i++)      <span class="comment">//  ⑥</span></span><br><span class="line">                futures.get(i).cancel(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>声明一个<code>ExecutorCompletionService</code> ecs，这个对象实际是一个任务执行结果阻塞队列和线程池的结合，所以它可以加入任务，执行任务，将任务执行结果加入阻塞队列。</p></li><li>向ecs添加tasks中的第一个任务并且执行。</li><li>从ecs的阻塞队列中取出第一个（队头），如果为null（不为null跳到注释⑤），说明一个任务都还没执行完成，继续添加任务。</li><li>如果所有任务都被添加了，阻塞等待任务的执行结果，知道有任一任务执行完成。</li><li>如果取到了某个任务的执行结果，直接返回。</li><li>取消所有还没执行的任务。<br>上面代码分析和我们一开始讲解<code>ExecutorService</code>的<code>invokeAny</code>一致。 到现在，我们已经分析完了<code>AbstractExecutorService</code>中的公共的方法，接下来就该研究最终的具体实现了：<code>ThreadPoolExecutor</code></li></ol><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p><code>ThreadPoolExecutor</code>继承自<code>AbstractExecutorService</code>,它是线程池的具体实现：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-8.png" alt="ThreadPool"><br>我们首先分析下构造方法：<code>public ThreadPoolExecutor(int corePoolSize,                                           int maximumPoolSize,                                           long keepAliveTime,                                           TimeUnit unit,                                           BlockingQueue&lt;Runnable&gt; workQueue,                                           ThreadFactory threadFactory,                                           RejectedExecutionHandler handler)</code>。<br><code>corePoolSize</code>：核心线程数，<code>maximumPoolSize</code>：线程池最大允许线程数，<code>workQueue</code>：任务队列，<code>threadFactory</code>：线程创建工厂，<code>handler</code>: 任务拒绝策，<code>keepAliveTime, unit</code>：等待时长，它们的具体作用如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-9.png" alt="ThreadPool"><br><code>提交一个task（Runnable）后（执行execute方法），检查总线程数是否小于corePoolSize，小于等于则使用threadFactory直接创建一个线程执行任务，大于则再次检查线程数量是否等于maximumPoolSize，等于则直接执行handler拒绝策略，小于则判断workQueue是否已经满了，没满则将任务加入等待线程执行，满了则使用threadFactory创建新线程执行队头任务。</code><br>通过流程图我们知道每个参数作用，这里值得注意的是，如果我们将某些参数特殊化，则可以得到特殊的线程池：</p><ol><li>corePoolSize=maximuPoolSize，我们可以创建一个线程池线程数量固定的任务。</li><li>maximumPoolSize设置的足够大（Integer.MAX_VALUE），可以无限制的加入任务。</li><li>workQueue设置的足够大，线程池中的数量不会超过corePoolSize，此时maximumPoolSize参数无用。</li><li>corePoolSize=0，线程池一旦空闲（超过时间），线程都将被回收。</li><li>我们上面知道，如果多余的空闲线程空闲时间超过keepAliveTime*unit，这些线程将被回收。我们可以通过方法<code>allowCoreThreadTimeOut</code>使这个参数对线程池中所有线程都有效果。</li><li>workQueue一般有三种实现：</li></ol><ul><li>SynchronousQueue，这是一个空队列，不会保存提交的task（添加操作必须等待另外的移除操作）。</li><li>ArrayBlockingQueue，数组实现的丢列，可以指定队列的长度。</li><li>LinkedBlockingQueue, 链表实现的队列，所以理论上可以无限大，也可以指定链表长度。</li></ul><ol start="7"><li>而RejectedExecutionHandler一般由四种实现：</li></ol><ul><li>AbortPolicy, 直接抛出<code>RejectedExecutionException</code>，这是线程池中的默认实现</li><li>DiscardPolicy，什么都不做</li><li>DiscardOldestPolicy，丢弃workQueue队头任务，加入新任务</li><li>CallerRunsPolicy，直接在调用者的线程执行任务<br>最后，我们再分析下ThreadPoolExecutor核心方法<code>execute</code>：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();   <span class="comment">// ①</span></span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;   <span class="comment">// ②</span></span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();     <span class="comment">// ③</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;    <span class="comment">// ④</span></span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))   <span class="comment">// ⑤</span></span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)    <span class="comment">// ⑥</span></span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))    <span class="comment">// ⑦</span></span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>获取线程池中的线程数量</li><li>线程池中线程数量小于corePoolSize，直接调用addWorker添加新线程执行任务返回。</li><li>因为多线程的关系，上一步可能调用addWorker失败（其它线程创建了，数以数量已经超过了），重启获取线程数量。</li><li>向workQueue添加添加任务，如果添加成功，double获取线程数量，添加失败，走到步骤⑦</li><li>double检查后发现线程池已经关闭或者数量超出，回滚已经添加的任务（remove（command））并且执行拒绝策略。</li><li>double检查通过，添加一个新线程。</li><li>再次添加线程，失败则调用拒绝策略。<br>好了，到现在jdk中的线程池核心的实现，策略，分析我们已经分析完成了。接下来我我们就来看看关于线程池的另外的一些扩展，也就是图上的剩下的接口和类：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-10.png" alt="ThreadPool"></li></ol><h3 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h3><p><code>ScheduledExecutorService</code>继承自<code>ExecutorService</code>，ExecutorService的分析上面我们已经知道了，我们来看看它扩展了哪些方法：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-11.png" alt="ThreadPool"><br>这个接口作为线程池的定义主要增加了可以<code>定时执行任务</code>（执行一次）和<code>定期执行任务</code>（重复执行），我们来一一简述下每个方法的作用。</p><ol><li><code>public ScheduledFuture&lt;?&gt; schedule(Runnable command, long delay, TimeUnit unit);</code>: 这个方法用于定时执行任务command，延迟的时间为delay*unit，它返回一个<code>ScheduledFuture</code>对象用于获取执行结果或者剩余延时，调用Future.get()方法将阻塞当前线程最后返回null。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-12.png" alt="ThreadPool"></li><li><code>public &lt;V&gt; ScheduledFuture&lt;V&gt; schedule(Callable&lt;V&gt; callable, long delay, TimeUnit unit);</code>：同上，不同的是，调用Future.get()方法将返回执行的结果，而不是null。</li><li><code>public ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, long initialDelay, long period,TimeUnit unit);</code>: 重复执行任务command，第一次执行时间为initialDelay延迟后，以后的执行时间将在<code>initialDelay + period * n</code>，unit代表时间单位，值得注意的是，如果某次执行出现异常，后面该任务就不会再执行。或者通过返回对象Future手动取消，后面也将不再执行。</li><li><code>public ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command,long initialDelay,long delay, TimeUnit unit);</code>: 效果同上，不同点：<code>如果command耗时为 y，则上面的计算公式为initialDelay + period * n + y</code>，也就是说，它的定时时间会加上任务耗时，而上面的方法则是一个固定的频率，不会算上任务执行时间！<br>这是它扩展的四个方法，其中需要注意的是scheduleAtFixedRate和scheduleWithFixedDelay的细微差别，最后，我们来看下它的实现类：<code>ScheduledThreadPoolExecutor</code></li></ol><h3 id="ScheduledThreadPoolExecutor"><a href="#ScheduledThreadPoolExecutor" class="headerlink" title="ScheduledThreadPoolExecutor"></a>ScheduledThreadPoolExecutor</h3><p><code>ScheduledThreadPoolExecutor</code>继承自<code>ThreadPoolExecutor</code>类，实现了<code>ScheduledExecutorService</code>接口，上面均已经分析。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-13.png" alt="ThreadPool"><br>它的构造器如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-14.png" alt="ThreadPool"><br>看起来比它的父类构造器简洁，主要因为它的任务队列workQueue是默认的（<code>DelayedWorkQueue</code>），并且最大的线程数为最大值。接着我们看下DelayedWorkQueue实现：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-15.png" alt="ThreadPool"><br>它内部使用数组维护了一个二叉树，提高了任务查找时间，而之所以ScheduledThreadPoolExecutor能够实现延时的关键也在于DelayedWorkQueue的<code>take()</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> RunnableScheduledFuture&lt;?&gt; take() <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">           <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">           lock.lockInterruptibly();</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">for</span> (;;) &#123;    <span class="comment">// ①</span></span><br><span class="line">                   RunnableScheduledFuture&lt;?&gt; first = queue[<span class="number">0</span>];</span><br><span class="line">                   <span class="keyword">if</span> (first == <span class="keyword">null</span>)</span><br><span class="line">                       available.await();</span><br><span class="line">                   <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="keyword">long</span> delay = first.getDelay(NANOSECONDS);</span><br><span class="line">                       <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>)</span><br><span class="line">                           <span class="keyword">return</span> finishPoll(first);</span><br><span class="line">                       first = <span class="keyword">null</span>; <span class="comment">// don't retain ref while waiting</span></span><br><span class="line">                       <span class="keyword">if</span> (leader != <span class="keyword">null</span>)</span><br><span class="line">                           available.await();</span><br><span class="line">                       <span class="keyword">else</span> &#123;</span><br><span class="line">                           Thread thisThread = Thread.currentThread();</span><br><span class="line">                           leader = thisThread;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               available.awaitNanos(delay);</span><br><span class="line">                           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                               <span class="keyword">if</span> (leader == thisThread)</span><br><span class="line">                                   leader = <span class="keyword">null</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (leader == <span class="keyword">null</span> &amp;&amp; queue[<span class="number">0</span>] != <span class="keyword">null</span>)</span><br><span class="line">                   available.signal();</span><br><span class="line">               lock.unlock();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><ol><li>工作线程调用take方法获取剩余任务。</li><li>检查这个任务是否已经到了执行时间。</li><li>未到执行时间，await等待。</li><li>自己唤醒，进入循环再次计算时间。<br>好了，到目前为止jdk中关于线程池的6个核心类已经全部分析完毕了。接下来还有最后一个小问题，我们手动创建线程池参数也太了，不管是<code>ThreadPoolExecutor</code>还是<code>ScheduledThreadPoolExecutor</code>，这对于用户来说似乎并不太友好，当然，jdk已经想到了这个问题，所以，我们最后再介绍一个创建这些线程池的工具类：<code>Executors</code>:</li></ol><h3 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h3><p>它的主要工具方法如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-16.png" alt="ThreadPool"><br>比起手动创建，它帮我们加了很多默认值，用起来当然就方便多了，比如说<code>newFixedThreadPool</code><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/threadpool-17.png" alt="ThreadPool"><br>创建一个线程数固定的线程池，其实就是核心线程数等于最大线程数，和我们一开始分析的结果一样。<br>值得注意的是：<code>为了我们的程序安全可控性考虑，我们应该尽量考虑手动创建线程池，知晓每一个参数的作用，降低不稳定性！</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次，我们首先从代码出发，分析了线程池给我们带来的好处以及直接使用线程的弊端，接着引出了jdk中的已经实现了的线程池。然后重点分析了jdk中关于线程池的六个最重要的接口和类，并且从源码角度讲解了关键点实现，最后，处于方便考虑，我们还知道jdk给我们留了一个创建线程池的工具类，简化了手动创建线程池的步骤。<br>真正做到了<code>知其然，知其所以然</code>。</p><p><code>关注我，这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/never_easy_by_tryingtofly_daipdis-pre.jpg-blog_960_440.jpg&quot; alt=&quot;ThreadPool&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="jdk" scheme="https://jsbintask.cn/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>【干货】SSM，Jqeury, Bootstrap从零打造一个论坛系统</title>
    <link href="https://jsbintask.cn/2019/03/09/springboot/ssm-jsbintask-bbs/"/>
    <id>https://jsbintask.cn/2019/03/09/springboot/ssm-jsbintask-bbs/</id>
    <published>2019-03-09T08:05:00.000Z</published>
    <updated>2019-03-09T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/the_sphere_by_syntetyc_dd1llx8-pre.jpg-blog_960_440.jpg" alt="android"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/03/09/springboot/ssm-jsbintask-bbs/">https://jsbintask.cn/2019/03/09/springboot/ssm-jsbintask-bbs/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天给大家分享一个以前学习SSM的实战项目，一个使用<code>springmvc</code>，<code>mybatis</code>，<code>jequery</code>，<code>bootstrap</code>，<code>ueditor</code>打造的论坛系统，主要包含论坛主体，后台管理两个部分。<br><code>git地址如下：</code><a href="https://github.com/jsbintask22/bbs.git" target="_blank" rel="noopener">https://github.com/jsbintask22/bbs.git</a></p><h2 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h2><p>该系统主要使用服务端主要使用spring，mybatis进行搭建，前端主要为bootstrap，jquery编写的jsp页面，并且集成百度ueditor进行富文本编辑，功能实现，技术点如下：<br><code>用户注册</code>：用户如若要进行发帖，回帖等操作，必须先注册账号。注册账号使用邮箱进行注册（邮件发送），使用ajax验证邮箱，用户名唯一性。<br><code>用户登录</code>: 用户登录需输入验证码，验证码为请求登陆页面时后台生成图片，记录到session中。<br><code>权限验证</code>：系统中某些行为必须进行登陆方可操作，所以必须提供同意权限验证，此系统主要使用拦截器（Interceptor）进行用户的权限验证。<br><code>用户发帖</code>：已登陆的用户可以进行发帖，回帖。提供直接图片，文件上传功能，此处前端使用UEDITOR配合后端文件上传实现。<br><code>用户回帖</code>：用户可以回复某一帖子，并且可以引用。所以此处设计数据库设计 树状结构的表设计。<br><code>帖子收藏</code>：用户可以收藏喜欢的帖子，并且在个人中心中找到。<br><code>用户关注</code>：用户可以关注其他用户。<br><code>个人信息</code>：用户可以查看个人信息，修改维护个人信息，并且设置头像。<br><code>帖子管理</code>：后台主要功能为对帖子进行维护，可以及时删除，恢复已经存在的帖子。</p><h2 id="关键代码讲解"><a href="#关键代码讲解" class="headerlink" title="关键代码讲解"></a>关键代码讲解</h2><h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jsbintask<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsbintask-bbs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>jsbintask-bbs Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://jsbintask.cn<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">org.springframework.version</span>&gt;</span>4.3.10.RELEASE<span class="tag">&lt;/<span class="name">org.springframework.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">org.mybatis.version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">org.mybatis.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">org.mybatis.spring.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">org.mybatis.spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>jsbintask@gmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>jsbintask<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://jsbintask.cn<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>developer<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- hibernate验证jar--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--aop实现--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatisjar--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mybatis.spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/jstl/jstl --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baidu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ueditor-mini<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/ueditor-mini.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>jsbintask-bbs<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>此处值得注意的是，由于百度ueditor未在中央仓库中提供相关jar文件，所以此处为引用本地jar（见项目结构）</strong></p><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>bbs<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置一个首页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/WEB-INF/jsp/article/index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置一个参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>path<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>E:/WorkSpaces/Idea workspace/jsbintask-bbs/bbs_imgs/heads<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pageSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置监听器，启动所有配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config/spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置过滤器防止乱码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置一个servlet，拦截所有的请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config/spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置一个首页--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;servlet-mapping&gt;</span></span><br><span class="line"><span class="comment">        &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="comment">        &lt;url-pattern&gt;/topic/all&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">    &lt;/servlet-mapping&gt;--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置一个404的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/WEB-INF/jsp/article/404.htm<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/WEB-INF/jsp/article/404.htm<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>此处值得注意的是，我们配置了一个<code>&lt;context-param&gt;</code>参数，主要用于定义用户上传头像的文件夹</strong></p><h3 id="sql脚本"><a href="#sql脚本" class="headerlink" title="sql脚本"></a>sql脚本</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : company_localhsot_root</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50724</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : acm_bbs</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50724</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 15/01/2019 09:41:14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="comment">/*!32312 IF NOT EXISTS*/</span><span class="string">`jsbintask_bbs`</span> <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci */</span>;</span><br><span class="line"><span class="keyword">USE</span> <span class="string">`jsbintask_bbs`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for admin</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`admin`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`admin`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`account`</span> <span class="built_in">varchar</span>(<span class="number">15</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">15</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of admin</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`admin`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'admin'</span>, <span class="string">'123456'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for article</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`article`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`article`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`topic_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主题帖的id'</span>,</span><br><span class="line">  <span class="string">`content`</span> longtext <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'回复的内容'</span>,</span><br><span class="line">  <span class="string">`reply_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'回复的时间'</span>,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'userid为该帖子是谁发的'</span>,</span><br><span class="line">  <span class="string">`puser_id`</span> <span class="built_in">int</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'被回复的人的id， 只有当该帖子是引用别人的才有'</span>,</span><br><span class="line">  <span class="string">`arefid`</span> <span class="built_in">int</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'如果该条帖子为引用别人的话，则不为空，并且显示被引用的回复的id'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">44</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of article</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'&lt;p&gt;test&lt;/p&gt;'</span>, <span class="string">'2017-06-10 10:59:54'</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="string">'&lt;p&gt;test&lt;/p&gt;'</span>, <span class="string">'2017-06-10 11:00:55'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">2</span>, <span class="string">'&lt;p&gt;test&lt;/p&gt;'</span>, <span class="string">'2017-06-28 11:02:24'</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">1</span>, <span class="string">'&lt;p&gt;在此写上您的回帖&lt;img src=\"http://img.baidu.com/hi/jx2/j_0002.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-13 14:36:22'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">1</span>, <span class="string">'&lt;p&gt;在此写上您的回帖&lt;/p&gt;'</span>, <span class="string">'2017-06-13 14:38:01'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">1</span>, <span class="string">'&lt;p&gt;在此写上您的回帖&lt;/p&gt;'</span>, <span class="string">'2017-06-13 14:49:32'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="number">1</span>, <span class="string">'&lt;p&gt;在此写上您的回帖sfgsd&lt;/p&gt;'</span>, <span class="string">'2017-06-13 14:50:57'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="number">1</span>, <span class="string">'&lt;p&gt;在此写上您的回帖hhh&lt;/p&gt;'</span>, <span class="string">'2017-06-13 14:54:55'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="number">1</span>, <span class="string">'&lt;p&gt;在此写上您的回帖&lt;/p&gt;'</span>, <span class="string">'2017-06-13 14:58:54'</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="number">1</span>, <span class="string">'&lt;p&gt;这是我的回帖&lt;img src=\"http://localhost:8080/umeditor/jsp/upload/20170613/64251497359650753.png\" style=\"width: 652.4px; height: 164.4px;\"/&gt;&lt;img src=\"http://img.baidu.com/hi/tsj/t_0003.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-13 21:14:55'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="number">2</span>, <span class="string">'&lt;p&gt;在此写上您的回帖&lt;img src=\"http://img.baidu.com/hi/face/i_f18.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-15 10:27:50'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="number">6</span>, <span class="string">'&lt;p&gt;在此写上您的回帖&lt;img src=\"http://img.baidu.com/hi/face/i_f14.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-15 10:45:26'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="number">6</span>, <span class="string">'&lt;p&gt;在此写上您的回帖&lt;img src=\"http://img.baidu.com/hi/jx2/j_0026.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-15 10:45:58'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="number">5</span>, <span class="string">'&lt;p&gt;在此写上您的回帖&lt;img src=\"http://img.baidu.com/hi/jx2/j_0014.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-15 10:48:36'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="number">1</span>, <span class="string">'&lt;p&gt;在此写上您的回帖&lt;img src=\"http://img.baidu.com/hi/bobo/B_0015.gif\"/&gt;&lt;img src=\"http://localhost:8080/umeditor/jsp/upload/20170615/85481497500764167.png\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-15 12:26:06'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">16</span>, <span class="number">5</span>, <span class="string">'&lt;p style=\"text-align: left;\"&gt;在此写上您的回帖&lt;img src=\"http://img.baidu.com/hi/jx2/j_0002.gif\"/&gt;&lt;img src=\"http://localhost:8080/umeditor/jsp/upload/20170616/26781497600431431.png\"/&gt;&lt;span class=\"mathquill-embedded-latex\" style=\"width: 24px; height: 33px;\"&gt;x^&#123; &#125;&lt;/span&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-16 16:08:38'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">17</span>, <span class="number">1</span>, <span class="string">'&lt;p&gt;大家早上好，明天就考试了呢！&lt;img src=\"http://img.baidu.com/hi/bobo/B_0006.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-18 09:40:12'</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">15</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">18</span>, <span class="number">6</span>, <span class="string">'&lt;p&gt;test&lt;/p&gt;'</span>, <span class="string">'2017-06-18 10:15:23'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">13</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">19</span>, <span class="number">6</span>, <span class="string">'&lt;p&gt;&amp;nbsp; Hello&lt;/p&gt;'</span>, <span class="string">'2017-06-18 10:19:54'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">20</span>, <span class="number">6</span>, <span class="string">'&lt;p&gt;你好啊，一楼&lt;/p&gt;'</span>, <span class="string">'2017-06-18 11:00:49'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">21</span>, <span class="number">6</span>, <span class="string">'&lt;p&gt;在此写上您的回帖&lt;img src=\"http://img.baidu.com/hi/face/i_f29.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-18 11:08:59'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">22</span>, <span class="number">3</span>, <span class="string">'&lt;p&gt;在此写上您的回帖&lt;img src=\"http://img.baidu.com/hi/jx2/j_0069.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-18 12:08:38'</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">23</span>, <span class="number">1</span>, <span class="string">'&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Hello&lt;img src=\"http://img.baidu.com/hi/jx2/j_0013.gif\"/&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-18 17:04:22'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">24</span>, <span class="number">1</span>, <span class="string">'&lt;p&gt;&lt;img src=\"http://localhost:8080/umeditor/jsp/upload/20170618/21841497776701354.png\" style=\"width: 448.4px; height: 213.4px;\"/&gt;&lt;/p&gt;&lt;p&gt;这个不错&lt;/p&gt;'</span>, <span class="string">'2017-06-18 17:05:42'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">25</span>, <span class="number">5</span>, <span class="string">'。。。。&lt;img src=\"http://localhost:8080/umeditor/jsp/upload/20170618/98751497778168424.jpg\" width=\"886\" height=\"435\"/&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-18 17:29:36'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">26</span>, <span class="number">5</span>, <span class="string">'&lt;img src=\"http://localhost:8080/umeditor/jsp/upload/20170618/40371497778647806.png\"/&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-18 17:37:29'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">27</span>, <span class="number">5</span>, <span class="string">'&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-18 17:44:06'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">28</span>, <span class="number">10</span>, <span class="string">'&lt;img src=\"http://img.baidu.com/hi/jx2/j_0067.gif\"/&gt;&lt;p&gt;你们好&lt;/p&gt;&lt;p&gt;&lt;img src=\"http://localhost:8080/umeditor/jsp/upload/20170620/81441497953824484.png\"/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-20 18:17:08'</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">29</span>, <span class="number">10</span>, <span class="string">'&lt;p&gt;sssssss&lt;br/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-20 18:17:50'</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">28</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">30</span>, <span class="number">10</span>, <span class="string">'hhhh&lt;img src=\"http://img.baidu.com/hi/jx2/j_0058.gif\"/&gt;&lt;p&gt;&lt;img src=\"http://localhost:8080/umeditor/jsp/upload/20170621/75931498030185101.png\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-21 15:29:48'</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">31</span>, <span class="number">6</span>, <span class="string">'sfsfds&lt;img src=\"http://img.baidu.com/hi/jx2/j_0025.gif\"/&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-21 15:30:19'</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">19</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">32</span>, <span class="number">12</span>, <span class="string">'&lt;img src=\"http://www.yc5301.cn:8888/umeditor/jsp/upload/20170806/12401501981604981.jpg\"/&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-08-06 09:06:51'</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">33</span>, <span class="number">12</span>, <span class="string">'&lt;p&gt;test&lt;/p&gt;'</span>, <span class="string">'2017-08-06 09:07:11'</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">34</span>, <span class="number">12</span>, <span class="string">'&lt;p&gt;test&lt;/p&gt;'</span>, <span class="string">'2017-08-06 09:07:28'</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">33</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">35</span>, <span class="number">12</span>, <span class="string">'&lt;img src=\"http://img.baidu.com/hi/jx2/j_0069.gif\"/&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-08-06 09:37:27'</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">36</span>, <span class="number">12</span>, <span class="string">'&lt;p&gt;test&lt;/p&gt;'</span>, <span class="string">'2017-08-06 10:05:57'</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">37</span>, <span class="number">12</span>, <span class="string">'&lt;p&gt;test&lt;/p&gt;'</span>, <span class="string">'2017-08-06 10:06:56'</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">38</span>, <span class="number">12</span>, <span class="string">'&lt;p&gt;test&lt;/p&gt;'</span>, <span class="string">'2017-08-06 10:07:19'</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">39</span>, <span class="number">12</span>, <span class="string">'&lt;p&gt;&lt;img src=\"http://img.baidu.com/hi/jx2/j_0002.gif\"/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=\"http://www.yc5301.cn:8888/umeditor/jsp/upload/20170823/14321503478764152.png\"/&gt;&lt;/p&gt;&lt;p&gt;gsdgsdg&lt;/p&gt;&lt;p&gt;sdgksdmg&lt;/p&gt;&lt;p&gt;fdhdf&lt;/p&gt;'</span>, <span class="string">'2017-08-23 17:00:14'</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">40</span>, <span class="number">12</span>, <span class="string">'sdfsdf&lt;img src=\"http://img.baidu.com/hi/jx2/j_0037.gif\"/&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-10-17 19:17:25'</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">41</span>, <span class="number">10</span>, <span class="string">'sfads&lt;img src=\"http://img.baidu.com/hi/ldw/w_0015.gif\"/&gt;&lt;p&gt;&lt;img src=\"http://www.yc5301.cn:8888/umeditor/jsp/upload/20171018/56581508337015800.jpg\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-10-18 22:30:19'</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">42</span>, <span class="number">1</span>, <span class="string">'&lt;img src=\"http://img.baidu.com/hi/jx2/j_0003.gif\"/&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-10-30 08:36:53'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`article`</span> <span class="keyword">VALUES</span> (<span class="number">43</span>, <span class="number">12</span>, <span class="string">'dsv&lt;img src=\"http://img.baidu.com/hi/bobo/B_0026.gif\"/&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-12-03 15:41:18'</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for attention</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`attention`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`attention`</span>  (</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'关注的用户的id'</span>,</span><br><span class="line">  <span class="string">`puser_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'被关注的用户的id'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`user_id`</span>, <span class="string">`puser_id`</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">INDEX</span> <span class="string">`attention_id_pid`</span>(<span class="string">`user_id`</span>, <span class="string">`puser_id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of attention</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`attention`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="string">'2017-06-21 12:05:50'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`attention`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">9</span>, <span class="string">'2017-06-21 15:33:55'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for collect</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`collect`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`collect`</span>  (</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">  <span class="string">`topic_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'帖子id'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`user_id`</span>, <span class="string">`topic_id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of collect</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`collect`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'2017-06-30 17:00:21'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`collect`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="string">'2017-06-23 17:00:30'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`collect`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">9</span>, <span class="string">'2017-06-18 17:06:04'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`collect`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">2</span>, <span class="string">'2017-06-01 17:00:49'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`collect`</span> <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="number">1</span>, <span class="string">'2017-06-01 17:00:39'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for topic</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`topic`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`topic`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'帖子id'</span>,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'发帖人的id'</span>,</span><br><span class="line">  <span class="string">`reply_number`</span> <span class="built_in">int</span>(<span class="number">5</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'回复的数量'</span>,</span><br><span class="line">  <span class="string">`topic`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'帖子主题'</span>,</span><br><span class="line">  <span class="string">`content`</span> longtext <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'帖子的内容'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'发帖的时间'</span>,</span><br><span class="line">  <span class="string">`flag`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">COMMENT</span> <span class="string">'帖子的状态，1表示正常，0表示已被删除'</span>,</span><br><span class="line">  <span class="string">`isindex`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'精品帖子，1表示精品，0表示默认'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">14</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of topic</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="string">'骑士获得总冠军'</span>, <span class="string">'2017骑士逆转勇士获得总冠军'</span>, <span class="string">'2017-06-10 10:57:49'</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'Spring最新源码解析'</span>, <span class="string">'深入解析Spring源码及原理'</span>, <span class="string">'2017-06-01 10:58:58'</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'无话可说'</span>, <span class="string">'哈哈'</span>, <span class="string">'2017-06-01 12:07:06'</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">'saf'</span>, <span class="string">'&lt;p&gt;在此写上您的回帖&lt;img src=\"http://localhost:8080/umeditor/jsp/upload/20170612/39591497268654983.png\"/&gt;&lt;img src=\"http://img.baidu.com/hi/jx2/j_0002.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-12 19:57:39'</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="string">'Spring完全源码解析之AOP'</span>, <span class="string">'&lt;p style=\"text-align: left;\"&gt;详情请参考我的博客！&lt;img src=\"http://img.baidu.com/hi/bobo/B_0003.gif\"/&gt;&lt;/p&gt;&lt;p style=\"text-align: left;\"&gt;&lt;img src=\"http://localhost:8080/umeditor/jsp/upload/20170613/1301497339765182.png\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-13 15:42:48'</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="string">'这是一条测试帖子'</span>, <span class="string">'&lt;p style=\"text-align: center;\"&gt;Hello from jsbintask@gmail.com。&lt;img src=\"http://img.baidu.com/hi/babycat/C_0016.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-13 21:16:07'</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">'safds'</span>, <span class="string">'&lt;p style=\"text-align: center;\"&gt;在此写上您的回帖&lt;img src=\"http://img.baidu.com/hi/jx2/j_0058.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-15 12:26:59'</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="string">'Mybatis3.0后的一个小Bug'</span>, <span class="string">'&lt;p&gt;加入po中有一个名字是属于符合属性的，mybatis会按照反射机制，先把属性都转化为小写，然后找到对应的get和set方法，因此打字方法找不到！&lt;img src=\"http://img.baidu.com/hi/jx2/j_0070.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-18 09:42:18'</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="string">'Hello,欢迎你们'</span>, <span class="string">'&lt;p&gt;在此写上您的内容&lt;img src=\"http://img.baidu.com/hi/jx2/j_0068.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-18 14:08:31'</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="string">'Hello，jsbintask'</span>, <span class="string">'&lt;p&gt;&lt;img src=\"http://img.baidu.com/hi/jx2/j_0060.gif\"/&gt;, &lt;img src=\"http://localhost:8080/umeditor/jsp/upload/20170620/71161497953710481.jpg\" width=\"405\" height=\"391\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-20 18:15:24'</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">'safsf'</span>, <span class="string">'&lt;p&gt;在此写上您的内容&lt;img src=\"http://img.baidu.com/hi/jx2/j_0047.gif\"/&gt;&lt;/p&gt;'</span>, <span class="string">'2017-06-21 15:31:07'</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="string">'《鬼谷子-捭阖策》'</span>, <span class="string">'&lt;p&gt;《鬼谷子&lt;/p&gt;&lt;p&gt;捭阖第一&lt;/p&gt;&lt;p&gt;【题解：《易·系辞上》：“是故阖户谓之坤，辟户谓之乾”。捭：开。阖，闭。通过对本文的理解发现，捭阖不仅仅是游说的一种方法，更重要是捭阖已经是一种世界观、哲学观（捭阖者，天地之道。捭阖者，以变动阴阳，四时开闭，以化万物，纵横反出、反复反忤，必由此矣。）。】&lt;/p&gt;&lt;p&gt;粤若稽古，圣人之在天地间也，为众生之先。观阴阳之开阖以名命物，知存亡之门户，筹策万类之终始，达人心之理，见变化之朕焉，而守司其门户。故圣人之在天下也，自古及今，其道一也。【第一句以圣人立论，古人写作惯用手法，如《黄帝内经》、《太公阴符》等中的黄帝、太公。第二句回答了圣人为何为众人之先；故：是一因果关系词，强调了圣人持道为众生之先的方法更古至今都是一致的。】&lt;/p&gt;&lt;p&gt;变化无穷，各有所归。或阴或阳，或柔或刚；或开或闭，或弛或张。是故圣人一守司其门户，审察其所先后，度权量能，校其伎巧短长。【“变化无穷，各有所归”强调“各”和“归”，各，有多种多样之意，强调世界的千变万化，归：归宿，结果，强调千变万化的世界终究是有其归宿点；第二句是对第一句的举例；第三句说明现实情况千变万化，圣人是如何做的。】&lt;/p&gt;&lt;p&gt;夫贤不肖、智愚、勇怯有差，乃可捭，乃可阖；乃可进，乃可退；乃可贱，乃可贵，无为以牧之。审定有无与其实虚，随其嗜欲以见其志意。微排其所言而捭反之，以求其实，贵得其指；阖而捭之，以求其利。【第一句指出人的秉性各有不同，正是这种差别才可以捭阖，也指出了有差、无为是捭阖的关键，无为以牧之是指顺事物秉性来驾驭事物；第二、三句从整体上提出了如何求其实、求其利，实虚：有无，也可指真假；排：1、排斥， &amp;nbsp;2、排查；反：反诘、反问、反驳；指：同旨，主旨，目的。无为作为道家的一种哲学观，可以有两种理解：1、顺应客观世界的规律；2、有所作为和有所不作为，但是有所不作为并不是消极的完全的不作为，而是主动的积极的根据具体情况的不作为，总结起来：顺天之时，随地之性，因人之心。】&lt;/p&gt;&lt;p&gt;或开而示之，或阖而闭之。开而示之者，同其情也；阖而闭之者，异其诚也。可与不可，审明其计谋，以原其同异。离合有守，先从其志。即欲捭之贵周，即欲阖之贵密。周密之贵微，而与道相追。【第一二句指出了示之、闭之的两种情况，结合下一句的“可与不可”来理解，第二句应该理解为对方与己情同则开而示之，对方不以实相告则阖而闭之。第三句的“可与不可”指是否采取示之、闭之取决于后半句，“原”：察。第四句的守指等待，指是离是合需要等待时机。第五句强调捭阖需要做到周详、隐秘。】&lt;/p&gt;&lt;p&gt;捭之者，料其情也；阖之者，结其诚也。皆见其权衡轻重，乃为之度数。圣人因而为之虑。其不中权衡度数，圣人因而自为之虑。【第一句中的“料”：忖（cun）度，估量；结：系，固结；诚：实。第二句、第三句强调圣人进则为他人谋，退则为己谋；自为之虑：为之自虑。】&lt;/p&gt;&lt;p&gt;故捭者，或捭而出之，或捭而内之。阖者，或阖而取之，或阖而去之。捭阖者，天地之道。捭阖者，以变动阴阳，四时开闭，以化万物，纵横反出、反复反忤，必由此矣。【第一二句应该是相对的，第一句中的出应该理解为使对方说出，内理解为使对方采纳。第二句取指使自己获取，去指使自己躲过（祸患），因为前面说过自为之虑。第三句作者将捭阖之道是天地之道，把捭阖的重要性体现出来了。第四句以阴阳立论，指出捭阖这种方法，能够变动阴阳，顺应季节变化，化育各种事物，而人世中的或合纵或连横，或返或出，或反或覆，或反或忤，也都是由捭阖产生的。】&lt;/p&gt;&lt;p&gt;捭阖者，道之大化，说之变也，必豫审其变化。吉凶大命系焉。口者，心之门户也；心者，神之主也。志意、喜欲、思虑、智谋，此皆由门户出入。故关之以捭阖，制之以出入。【第一句中的“道之大化，说之变也”指的是捭阖这种方法是阴阳规律的无限变化，游说应变的关键，所以作者提出需要事先对各种变化有所准备，因为这关系到吉凶大命。豫：事先有所准备。第三、四句指出了口的重要性。所以，作者在第五句提出以捭阖关之，以出入制之（关之以捭阖，制之以出入：用捭阖之法驾驭说话、实情出入）。当然这“口”是否是作者之前提到的“存亡之门户”还有待考量。】&lt;/p&gt;&lt;p&gt;捭之者，开也，言也，阳也；阖之者，闭也，默也，阴也。阴阳其和，终始其义。故言长生、安乐、富贵、尊荣、显名、爱好、财利、得意、喜欲，为阳，曰“始”。故言死亡、忧患、贫贱、苦辱、弃损、亡利、失意、有害、刑戮、诛罚，为阴，曰“终”。诸言法阳之类者，皆曰“始”，言善以始其事。诸言法阴之类者，皆曰“终”，言恶以终其谋。【第一句是对游说中的捭阖（作者前面提到捭阖是天地之道，自然不仅仅包含游说之道，故此处指游说中的捭阖之道）下定义，进行解释。第二句需要结合上下句来理解，阴阳相互调和，从开始到结束的整个过程都要符合捭阖的规律、要理。故，因果关系词，第三、四句中的故是承接第二句而言，说明为何要将法阳之类为始，法阴之类为终。第五、六句是承接在第四句的基础上论述的，所以在理解第五、六句时，需要在每一句中体现因果关系。第五六句理解为：凡是游说中说到 &amp;nbsp;“阳”一类的，我们都称其为“始”，因为从事物好的一面游说，诱导对方行动，促进游说成功；反之，游说中说到 &amp;nbsp;“阴”一类的，我们都称之为“终”，因为从事物有害的一面游说，劝阻对方行动，终止对方谋略实施。】&lt;/p&gt;&lt;p&gt;捭阖之道，以阴阳试之。故与阳言者，依崇高；与阴言者，依卑小。以下求小，以高求大。由此言之，无所不出，无所不入，无所不言可。可以说人，可以说家，可以说国，可以说天下。为小无内，为大无外。益损、去就、倍反，皆以阴阳御其事。【第一句回到了捭阖之道乃天地之道，阴阳之道的根本性世界观上，理解：捭阖的方法就是用阴阳的规律反复地进行试探。试，用。第二句，以“故”这一因果关系词进行举例说明对待阳言者、阴言者的不同方法。第三句是在第二句的基础上进行类比性的演绎，进而得出了第四、五、六、七句的总结性论点。第六句：泛指捭阖的方法无所不包，也可以说捭阖的方法具有普遍适用性。“由此言之中”的“此”就是指第二、三句中所采用的方法。御：治理、统治，引申为用阴阳的规律驾驭游说中的益损、去就、倍反。为小无内，为大无外：小到事物内部再无东西，大到事物外部再无东西，泛指包含一切事物，无所不包。】&lt;/p&gt;&lt;p&gt;阳动而行，阴止而藏，阳动而出，阴隐而入。阳还终始，阴极反阳。以阳动者，德相生也；以阴静者，形相成也。以阳求阴，苞以德也；以阴结阳，施以力也。阴阳相求，由捭阖也。此天地阴阳之道，而说人之法也。为万事之先，是谓“圆方”之门户。【第一二句是阐述阴阳理论的，后面几句都是以该理论展开论述。第三四句应当结合起来理解，德与形相对，德与力相对，故此处德应该指德行、品德，形指刑罚，方与“力”相关，此两句说的是以阴阳御刑德，故整句理解：阳动则德行产生了，阴静则刑戮形成了，用阳求阴需要用德行包容对方，用阴固结阳则需要向对方施加力量。第五句指阴阳相互依赖都是由捭阖之道决定的。第六句中的此指第五句，指的是捭阖之道系天地、阴阳之道，游说的法则，是万事的根本，天地的门户。不知此处之门户是否就是存亡之门户？存亡之门户还有待考量。】&lt;/p&gt;'</span>, <span class="string">'2017-08-06 09:00:33'</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`topic`</span> <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="string">'test'</span>, <span class="string">'&lt;p&gt;在此写上您的内容&lt;/p&gt;'</span>, <span class="string">'2017-08-06 09:45:31'</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>  (</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`sno`</span> <span class="built_in">varchar</span>(<span class="number">11</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">2</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别，只有男和女'</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`register_date`</span> <span class="built_in">date</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sign`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'个人格言，签名之类的'</span>,</span><br><span class="line">  <span class="string">`imgUrl`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'图片上传地址'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">25</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">15</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sdept`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`clazz`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`article_num`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'该用户发帖数'</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">COMMENT</span> <span class="string">'1为可发言, 0表示被禁言'</span>,</span><br><span class="line">  <span class="string">`islock`</span> tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'0表示未锁定，可以被其他用户查看'</span>,</span><br><span class="line">  <span class="string">`reply_num`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`user_id`</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`uemail`</span>(<span class="string">`email`</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`sno`</span>(<span class="string">`sno`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">14</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'14144501413'</span>, <span class="string">'男'</span>, <span class="string">'jsbintask'</span>, <span class="string">'2017-06-06'</span>, <span class="string">'123456'</span>, <span class="string">'微信公众号：jsbintask'</span>, <span class="string">'6.jpg'</span>, <span class="string">'jsbintask@gmail.com'</span>, <span class="string">'15576030460'</span>, <span class="string">'计算机'</span>, <span class="string">'1406'</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'14144501415'</span>, <span class="string">'女'</span>, <span class="string">'test1'</span>, <span class="string">'2017-06-02'</span>, <span class="string">'123456'</span>, <span class="string">'。。。'</span>, <span class="string">'1.jpg'</span>, <span class="string">'123@qq.com'</span>, <span class="string">'110'</span>, <span class="string">'计算机'</span>, <span class="string">'1405'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'14144501417'</span>, <span class="string">'男'</span>, <span class="string">'test2'</span>, <span class="string">'2017-06-01'</span>, <span class="string">'123456'</span>, <span class="string">'嗨。'</span>, <span class="string">'2.jpg'</span>, <span class="string">'110@qq.com'</span>, <span class="string">'15576030460'</span>, <span class="string">'物电'</span>, <span class="string">'1406'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'14144501419'</span>, <span class="string">'男'</span>, <span class="string">'test3'</span>, <span class="string">'2017-06-12'</span>, <span class="string">'123456'</span>, <span class="string">'Hello'</span>, <span class="string">'defaultHead.png'</span>, <span class="string">'124@qq.com'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">'14144501421'</span>, <span class="string">'男'</span>, <span class="string">'test4'</span>, <span class="string">'2017-05-16'</span>, <span class="string">'123456'</span>, <span class="string">'hi.'</span>, <span class="string">'defaultHead.png'</span>, <span class="string">'112@qq.com'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">'14144501425'</span>, <span class="string">'男'</span>, <span class="string">'test5'</span>, <span class="literal">NULL</span>, <span class="string">'123456'</span>, <span class="literal">NULL</span>, <span class="string">'defaultHead.png'</span>, <span class="string">'1111@qq.com'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">'14144501377'</span>, <span class="string">'男'</span>, <span class="string">'test11'</span>, <span class="literal">NULL</span>, <span class="string">'123456'</span>, <span class="string">'test'</span>, <span class="string">'3.jpg'</span>, <span class="string">'1362761867@qq.com'</span>, <span class="string">'15576030460'</span>, <span class="string">'计算机学院'</span>, <span class="string">'网络二班'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">'14144501379'</span>, <span class="string">'男'</span>, <span class="string">'test6'</span>, <span class="literal">NULL</span>, <span class="string">'123456'</span>, <span class="string">'。。。'</span>, <span class="string">'4.jpg'</span>, <span class="string">'727971401@qq.com'</span>, <span class="string">'15173007554'</span>, <span class="string">'计算机学院'</span>, <span class="string">'1406'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">'14144501489'</span>, <span class="string">'男'</span>, <span class="string">'test7'</span>, <span class="literal">NULL</span>, <span class="string">'123456'</span>, <span class="string">'。。。'</span>, <span class="string">'5.jpg'</span>, <span class="string">'1484432123@qq.com'</span>, <span class="string">'15576030460'</span>, <span class="string">'计算机学院'</span>, <span class="string">'1406'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">'14144501381'</span>, <span class="string">'男'</span>, <span class="string">'test8'</span>, <span class="literal">NULL</span>, <span class="string">'123456'</span>, <span class="string">'null'</span>, <span class="string">'defaultHead.png'</span>, <span class="string">'1397744240@qq.com'</span>, <span class="literal">NULL</span>, <span class="string">'计算机学院'</span>, <span class="string">'网络14-2BF'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">'14144501356'</span>, <span class="string">'男'</span>, <span class="string">'test9'</span>, <span class="literal">NULL</span>, <span class="string">'a2145265'</span>, <span class="literal">NULL</span>, <span class="string">'defaultHead.png'</span>, <span class="string">'791392383@qq.com'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">'14141501381'</span>, <span class="string">'男'</span>, <span class="string">'test10'</span>, <span class="literal">NULL</span>, <span class="string">'123456'</span>, <span class="literal">NULL</span>, <span class="string">'defaultHead.png'</span>, <span class="string">'ss@a.com'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>文件上传主要为配合百度ueditor上传文件使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.um;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItemIterator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItemStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadBase.InvalidContentTypeException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadBase.SizeLimitExceededException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.util.Streams;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UEditor文件上传辅助类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Uploader</span> </span>&#123;</span><br><span class="line"><span class="comment">// 输出文件地址</span></span><br><span class="line"><span class="keyword">private</span> String url = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 上传文件名</span></span><br><span class="line"><span class="keyword">private</span> String fileName = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 状态</span></span><br><span class="line"><span class="keyword">private</span> String state = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 文件类型</span></span><br><span class="line"><span class="keyword">private</span> String type = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 原始文件名</span></span><br><span class="line"><span class="keyword">private</span> String originalName = <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 文件大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HttpServletRequest request = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> String title = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存路径</span></span><br><span class="line"><span class="keyword">private</span> String savePath = <span class="string">"upload"</span>;</span><br><span class="line"><span class="comment">// 文件允许格式</span></span><br><span class="line"><span class="keyword">private</span> String[] allowFiles = &#123; <span class="string">".rar"</span>, <span class="string">".doc"</span>, <span class="string">".docx"</span>, <span class="string">".zip"</span>, <span class="string">".pdf"</span>,<span class="string">".txt"</span>, <span class="string">".swf"</span>, <span class="string">".wmv"</span>, <span class="string">".gif"</span>, <span class="string">".png"</span>, <span class="string">".jpg"</span>, <span class="string">".jpeg"</span>, <span class="string">".bmp"</span> &#125;;</span><br><span class="line"><span class="comment">// 文件大小限制，单位KB</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String, String&gt; errorInfo = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Uploader</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.request = request;</span><br><span class="line">HashMap&lt;String, String&gt; tmp = <span class="keyword">this</span>.errorInfo;</span><br><span class="line">tmp.put(<span class="string">"SUCCESS"</span>, <span class="string">"SUCCESS"</span>); <span class="comment">//默认成功</span></span><br><span class="line">tmp.put(<span class="string">"NOFILE"</span>, <span class="string">"未包含文件上传域"</span>);</span><br><span class="line">tmp.put(<span class="string">"TYPE"</span>, <span class="string">"不允许的文件格式"</span>);</span><br><span class="line">tmp.put(<span class="string">"SIZE"</span>, <span class="string">"文件大小超出限制"</span>);</span><br><span class="line">tmp.put(<span class="string">"ENTYPE"</span>, <span class="string">"请求类型ENTYPE错误"</span>);</span><br><span class="line">tmp.put(<span class="string">"REQUEST"</span>, <span class="string">"上传请求异常"</span>);</span><br><span class="line">tmp.put(<span class="string">"IO"</span>, <span class="string">"IO异常"</span>);</span><br><span class="line">tmp.put(<span class="string">"DIR"</span>, <span class="string">"目录创建失败"</span>);</span><br><span class="line">tmp.put(<span class="string">"UNKNOWN"</span>, <span class="string">"未知错误"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> isMultipart = ServletFileUpload.isMultipartContent(<span class="keyword">this</span>.request);</span><br><span class="line"><span class="keyword">if</span> (!isMultipart) &#123;</span><br><span class="line"><span class="keyword">this</span>.state = <span class="keyword">this</span>.errorInfo.get(<span class="string">"NOFILE"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">DiskFileItemFactory dff = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">String savePath = <span class="keyword">this</span>.getFolder(<span class="keyword">this</span>.savePath);</span><br><span class="line">dff.setRepository(<span class="keyword">new</span> File(savePath));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ServletFileUpload sfu = <span class="keyword">new</span> ServletFileUpload(dff);</span><br><span class="line">sfu.setSizeMax(<span class="keyword">this</span>.maxSize * <span class="number">1024</span>);</span><br><span class="line">sfu.setHeaderEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">FileItemIterator fii = sfu.getItemIterator(<span class="keyword">this</span>.request);</span><br><span class="line"><span class="keyword">while</span> (fii.hasNext()) &#123;</span><br><span class="line">FileItemStream fis = fii.next();</span><br><span class="line"><span class="keyword">if</span> (!fis.isFormField()) &#123;</span><br><span class="line"><span class="keyword">this</span>.originalName = fis.getName().substring(fis.getName().lastIndexOf(System.getProperty(<span class="string">"file.separator"</span>)) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.checkFileType(<span class="keyword">this</span>.originalName)) &#123;</span><br><span class="line"><span class="keyword">this</span>.state = <span class="keyword">this</span>.errorInfo.get(<span class="string">"TYPE"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.fileName = <span class="keyword">this</span>.getName(<span class="keyword">this</span>.originalName);</span><br><span class="line"><span class="keyword">this</span>.type = <span class="keyword">this</span>.getFileExt(<span class="keyword">this</span>.fileName);</span><br><span class="line"><span class="keyword">this</span>.url = savePath + <span class="string">"/"</span> + <span class="keyword">this</span>.fileName;</span><br><span class="line">BufferedInputStream in = <span class="keyword">new</span> BufferedInputStream(fis.openStream());</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.getPhysicalPath(<span class="keyword">this</span>.url));</span><br><span class="line">FileOutputStream out = <span class="keyword">new</span> FileOutputStream( file );</span><br><span class="line">BufferedOutputStream output = <span class="keyword">new</span> BufferedOutputStream(out);</span><br><span class="line">Streams.copy(in, output, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">this</span>.state=<span class="keyword">this</span>.errorInfo.get(<span class="string">"SUCCESS"</span>);</span><br><span class="line"><span class="keyword">this</span>.size = file.length();</span><br><span class="line"><span class="comment">//UE中只会处理单张上传，完成后即退出</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">String fname = fis.getFieldName();</span><br><span class="line"><span class="comment">//只处理title，其余表单请自行处理</span></span><br><span class="line"><span class="keyword">if</span>(!fname.equals(<span class="string">"pictitle"</span>))&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">                    BufferedInputStream in = <span class="keyword">new</span> BufferedInputStream(fis.openStream());</span><br><span class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                    StringBuffer result = <span class="keyword">new</span> StringBuffer();  </span><br><span class="line">                    <span class="keyword">while</span> (reader.ready()) &#123;  </span><br><span class="line">                        result.append((<span class="keyword">char</span>)reader.read());  </span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">this</span>.title = <span class="keyword">new</span> String(result.toString().getBytes(),<span class="string">"utf-8"</span>);</span><br><span class="line">                    reader.close();  </span><br><span class="line">                    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SizeLimitExceededException e) &#123;</span><br><span class="line"><span class="keyword">this</span>.state = <span class="keyword">this</span>.errorInfo.get(<span class="string">"SIZE"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvalidContentTypeException e) &#123;</span><br><span class="line"><span class="keyword">this</span>.state = <span class="keyword">this</span>.errorInfo.get(<span class="string">"ENTYPE"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line"><span class="keyword">this</span>.state = <span class="keyword">this</span>.errorInfo.get(<span class="string">"REQUEST"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">this</span>.state = <span class="keyword">this</span>.errorInfo.get(<span class="string">"UNKNOWN"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接受并保存以base64格式上传的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fieldName</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadBase64</span><span class="params">(String fieldName)</span></span>&#123;</span><br><span class="line">String savePath = <span class="keyword">this</span>.getFolder(<span class="keyword">this</span>.savePath);</span><br><span class="line">String base64Data = <span class="keyword">this</span>.request.getParameter(fieldName);</span><br><span class="line"><span class="keyword">this</span>.fileName = <span class="keyword">this</span>.getName(<span class="string">"test.png"</span>);</span><br><span class="line"><span class="keyword">this</span>.url = savePath + <span class="string">"/"</span> + <span class="keyword">this</span>.fileName;</span><br><span class="line">BASE64Decoder decoder = <span class="keyword">new</span> BASE64Decoder();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">File outFile = <span class="keyword">new</span> File(<span class="keyword">this</span>.getPhysicalPath(<span class="keyword">this</span>.url));</span><br><span class="line">OutputStream ro = <span class="keyword">new</span> FileOutputStream(outFile);</span><br><span class="line"><span class="keyword">byte</span>[] b = decoder.decodeBuffer(base64Data);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (b[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">b[i] += <span class="number">256</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ro.write(b);</span><br><span class="line">ro.flush();</span><br><span class="line">ro.close();</span><br><span class="line"><span class="keyword">this</span>.state=<span class="keyword">this</span>.errorInfo.get(<span class="string">"SUCCESS"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">this</span>.state = <span class="keyword">this</span>.errorInfo.get(<span class="string">"IO"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件类型判断</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkFileType</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">Iterator&lt;String&gt; type = Arrays.asList(<span class="keyword">this</span>.allowFiles).iterator();</span><br><span class="line"><span class="keyword">while</span> (type.hasNext()) &#123;</span><br><span class="line">String ext = type.next();</span><br><span class="line"><span class="keyword">if</span> (fileName.toLowerCase().endsWith(ext)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取文件扩展名</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getFileExt</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依据原始文件名生成新文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.fileName = <span class="string">""</span> + random.nextInt(<span class="number">10000</span>)</span><br><span class="line">+ System.currentTimeMillis() + <span class="keyword">this</span>.getFileExt(fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据字符串创建本地目录 并按照日期建立子目录返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> path </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getFolder</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">SimpleDateFormat formater = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">path += <span class="string">"/"</span> + formater.format(<span class="keyword">new</span> Date());</span><br><span class="line">File dir = <span class="keyword">new</span> File(<span class="keyword">this</span>.getPhysicalPath(path));</span><br><span class="line"><span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dir.mkdirs();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">this</span>.state = <span class="keyword">this</span>.errorInfo.get(<span class="string">"DIR"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据传入的虚拟路径获取物理路径</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getPhysicalPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">String servletPath = <span class="keyword">this</span>.request.getServletPath();</span><br><span class="line">String realPath = <span class="keyword">this</span>.request.getSession().getServletContext()</span><br><span class="line">.getRealPath(servletPath);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> File(realPath).getParent() +<span class="string">"/"</span> +path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSavePath</span><span class="params">(String savePath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.savePath = savePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAllowFiles</span><span class="params">(String[] allowFiles)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.allowFiles = allowFiles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maxSize = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getOriginalName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.originalName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h3><p>权限主要使用springmvc拦截器进行处理，拦截未登录的用户，发帖，回帖等信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jsbintask.bbs.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.jsbintask.bbs.po.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现一个拦截器，进行用户的权限控制</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostTopicInter</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入了拦截器页面"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) httpServletRequest.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(user.getStatus()==<span class="number">0</span>) &#123;</span><br><span class="line">                httpServletRequest.setAttribute(<span class="string">"message"</span>, <span class="string">"对不起，您已被管理员禁言，请联系管理员进行处理"</span>);</span><br><span class="line">                httpServletRequest.getRequestDispatcher(<span class="string">"/topic/all"</span>).forward(httpServletRequest, httpServletResponse);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flag  =  <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">            httpServletRequest.setAttribute(<span class="string">"message"</span>, <span class="string">"请先登录再进行操作"</span>);</span><br><span class="line">            httpServletRequest.getRequestDispatcher(<span class="string">"/user/userLogin"</span>).forward(httpServletRequest, httpServletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相应配置文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/topic/postTopic"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/article/postArticle"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/topic/collectTopic"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/otherSpace/attentionUser"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.jsbintask.bbs.interceptor.PostTopicInter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/admin/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/admin/login"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--由于拦截器在controller之前执行，所以这个地址也要拦截掉才行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/admin/index"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.jsbintask.bbs.interceptor.AdminInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h3><p>邮件发送为注册用户时接受注册验证码时使用，关键代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String to, String code)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">String from = <span class="string">"Jsbintask@163.com"</span>;</span><br><span class="line">String smtpUrl = <span class="string">"smtp."</span> + from.split(<span class="string">"@"</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">props.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">    props.put(<span class="string">"mail.smtp.host"</span>, smtpUrl);</span><br><span class="line"></span><br><span class="line">Session session = Session.getInstance(props, <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(<span class="string">"Jsbintask@163.com"</span>, <span class="string">"xxxxxx"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Message message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">message.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"Jsbintask@163.com"</span>));</span><br><span class="line">message.setRecipient(RecipientType.TO, <span class="keyword">new</span> InternetAddress(to));</span><br><span class="line">System.out.println(<span class="string">"BBSCheckCode"</span>);</span><br><span class="line">message.setSubject(<span class="string">"激活码"</span>);</span><br><span class="line">message.setContent(</span><br><span class="line"><span class="string">"&lt;h1&gt;您的验证码：&lt;span style='color=red'&gt;"</span> + code + <span class="string">"&lt;/span&gt;&lt;/h1&gt;"</span>,</span><br><span class="line"><span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">Transport.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意此处邮箱，密码修改为自己的。</p><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><ol><li>用户主界面：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/bbs-resources/main.png" alt="mark"></li><li>用户登录注册和邮箱验证码发送<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/bbs-resources/user-login.png" alt="mark"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/bbs-resources/user-register.png" alt="mark"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/bbs-resources/checkCode.png" alt="mark"></li><li>用户个人信息，查看自己的帖子，收藏，关注用户<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/bbs-resources/personal-info.png" alt="mark"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/bbs-resources/info.png" alt="mark"></li><li>发帖，回帖，帖子详情<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/bbs-resources/post.png" alt="mark"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/bbs-resources/reply.png" alt="mark"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/bbs-resources/article-detail.png" alt="mark"></li><li>管理员登录，后台主界面<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/bbs-resources/admin-login.png" alt="mark"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/bbs-resources/admin-main.png" alt="mark"></li></ol><p><code>关注我，这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/the_sphere_by_syntetyc_dd1llx8-pre.jpg-blog_960_440.jpg&quot; alt=&quot;android&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="ssm" scheme="https://jsbintask.cn/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>HashMap源码全解析从一道面试题说起：请一行一行代码描述下hashmap put方法</title>
    <link href="https://jsbintask.cn/2019/02/27/jdk/jdk8-hashmap-sourcecode/"/>
    <id>https://jsbintask.cn/2019/02/27/jdk/jdk8-hashmap-sourcecode/</id>
    <published>2019-02-26T16:00:00.000Z</published>
    <updated>2019-02-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/dd0twtp-b336f181-aa04-420e-b178-fadb3025905c.jpg-blog_960_440.jpg" alt="jsbintask-HashMap"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/02/27/jdk/jdk8-hashmap-sourcecode/">https://jsbintask.cn/2019/02/27/jdk/jdk8-hashmap-sourcecode/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前阵子（估计也快半年了吧）遇到这么一个面试题：请一行代码一行代码描述下<code>HashMap put</code>方法。<br><code>我：。。。</code><br>哈哈，其实也没有无语，当时知道<code>HashMap</code>的原理，数据结构，以及一些要注意的点，没想到面试官这么狠，所以本文的目的就是全方位的从源码角度分析下<strong>HashMap</strong>。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>jdk1.8相对于jdk1.7有较大改动，本次将只会详细分析jdk1.8的代码，对于1.7只会比较两者不同之处。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>jdk1.8以前，<code>HashMap</code>使用的是<code>数组+链表</code>的结构存储数据。如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/hashmap-1.png" alt="HashMap"><br>维护一个<code>Enyry[]</code>数组存储数据，当发生<code>hash</code>冲突时，数组节点则会变成一个链表，用于存储<code>hash冲突</code>的数据，而在<code>jdk1.8</code>中，这个链表则变成了<code>红黑树</code>,如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/hashmap-2.png" alt="HashMap"><br>值得注意的是，jdk8中不是一开始就使用<code>红黑树</code>维护这些hash冲突的节点，而是当链表长度超过某个<code>阈值</code>时才将<code>链表转换为红黑树</code>，在代码分析中看到。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ol><li>首先查看<code>HashMap</code>中的静态成员常量<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>各个静态常量如图：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/jdk/hashmap-3.png" alt="HashMap"><br>各个静态成员常量意义已经注明.</p><ol start="2"><li><code>HashMap</code>成员变量，接着，我们看下成员变量：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一开分析的 `储存数据的数组`</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> java.util.HashMap.Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于 **entrySet()和values()**方法，返回一个迭代器遍历Map结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 整个hashmap 所包含的节点数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hashmap 的结构修改次数，比如 Put，remove的次数,</span></span><br><span class="line"><span class="comment">     * 和上面的 迭代器配合使用，在迭代过程中，如果其它线程更改了这个值，则会抛出 `ConcurrentModificationException`异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hashmap扩容的阈值，值为 loadFactor*table.length  e.g: 0.75 * 16 = 12</span></span><br><span class="line"><span class="comment">     * 也就是说默认是当数组大小超过 12时就会进行数组扩容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载因子，默认值上图已经说明</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>其中各个值的含义已经在注释中说明，配合上图默认值更能理解。</p><ol start="3"><li>接着我们继续看下 <code>Node</code>类的数据结构：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>很清楚，四个成员变量， <code>key</code>, <code>key的hash值</code>, <code>key对应的value</code>,<code>下一个节点的引用</code>，其中链表的形成就是 <code>next</code>这个引用的作用。</p><ol start="5"><li>好了，准备条件都做好了，接下来就是分析<code>put</code>方法了：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>很清楚，通过<code>hash(key)</code>方法获取到了key的hash值，然后调用了<code>putVal()</code>方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这是<code>putVal</code>的原始方法，看起来有点复杂，很多操作在一行代码中写完，我们稍微改下写法，为每行代码加上注释：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 声明本地变量 tab，p，n，i（提高性能，effective java），可以先多记两边，防止后面不知道变量怎么来的！ */</span></span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        Node&lt;K, V&gt; p;</span><br><span class="line">        <span class="keyword">int</span> n, i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 将成员变量 table 赋值给本地变量 tab，并且将tab的长度赋值给本地变量 n */</span></span><br><span class="line">        tab = table;</span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            n = tab.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 如果tab为空或者 数组长度为0，进行初始化，调用 resize()方法，并且获取赋值后的数组长度 */</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || n = <span class="number">0</span>) &#123;</span><br><span class="line">            tab = resize();</span><br><span class="line">            n = tab.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 根据key的hash值得到当前key在数组中的 位置，赋值给 i */</span></span><br><span class="line">        i = (n - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        <span class="comment">/* 将i在数组中对应的key值去除赋值给p，所以p代表当前的key */</span></span><br><span class="line">        p = tab[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 判断当前数组中取出来的key是否为空（数组中没有），就new一个新的节点，并且放在这个索引 i的位置 */</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 如果不为空，那就表示已经有这样的hash 值已经存在了，可能存在hash冲突 或者 直接替换原来的value */</span>    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 声明本地变量 e, k */</span></span><br><span class="line">            Node&lt;K, V&gt; e;</span><br><span class="line">            K k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 如果取出来的节点 hash值相等，key也和原来的一样（ == 或者 equals方法为true），直接将 这个节点 </span></span><br><span class="line"><span class="comment">            * p 赋值给刚刚声明的本地变量 e （这个操作很重要，在心中记住）</span></span><br><span class="line"><span class="comment">            * 另外这里还将 节点 p的key 赋值给了本地变量 k</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                e = p;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">/* 如果 hash值一样，但不是同一个 key，则表示hash冲突，接着判断这个节点是不是 红黑树的节点</span></span><br><span class="line"><span class="comment">                 * 如果是，则生成一个红黑树的节点然后赋值给本地变量 e */</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) &#123;</span><br><span class="line">                e = ((TreeNode&lt;K, V&gt;) p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* 不是红黑树，hash冲突了，这个时候开始扩展链表 */</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/* 声明一个本地变量 binCount，开始遍历 p节点后面的链表 */</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">/* 首先将p节点的 next（链表的下一个）赋值给 本地变量e */</span></span><br><span class="line">                    e = p.next;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">/* 如果e为空，表示p指向的下一个节点不存在，这个时候直接将 新的 key，value放在链表的最末端 */</span></span><br><span class="line">                    <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/* 放入后，还要判断下 这个链表的长度是否已经大于等于红黑树的阈值 （前面分析静态成员变量已经说明）， </span></span><br><span class="line"><span class="comment">                        *  一旦大于，就可以变形，调用 treeifyBin方法将原来的链表转化为红黑树 ！</span></span><br><span class="line"><span class="comment">                        * */</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) &#123; <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/* 如果不为空，表示还没有到链表的末端， </span></span><br><span class="line"><span class="comment">                    将 e 赋值给 p（p的下一个节点赋值给p），开启下一次循环 */</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/* e不等于null，则表示 key值相等，替换原来的value即可，</span></span><br><span class="line"><span class="comment">             * 这里需要注意，这里不是表示 hash冲突（再观察下前面的分析），</span></span><br><span class="line"><span class="comment">             * hash冲突链表的扩展已经在最后一个 else完成了！</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    e.value = value;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* 替换新值后，回调该方法（子类可扩展） */</span></span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* 返回原来的 key对应的旧值 */</span></span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 完成一次 put方法后，加一次 modCount，看前面成员变量分析 */</span></span><br><span class="line">        ++modCount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 加入了新节点，把 size 自加，并且 判断是否已经大于要扩容的阈值（观察前面成员变量分析），开始扩容 */</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 插入新节点后，回调方法（子类可扩展） */</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 插入的新节点，直接返回 null即可 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其中所有代码均已经加上详细注释，这里值得注意的是，由于这个方法没有任何 线程同步手段，所以不论是在查找对应的key，还是扩容，插入节点，增加size，modCount等，肯定会出现问题（<code>这里先预留一篇文章，ConCurrentHashMap源码分析</code>），所以多线程环境下，绝对不能使用<code>HashMap</code>，<br>而应该使用<code>ConCurrentHashMap</code>。<br>当然到了现在，我们那个面试题的答案也已经能够较为完整的回答出来了！(大笑)</p><ol start="6"><li>上面较为详细的分析了put方法后，我们注意到<code>resize()</code>方法在这个方法中起到了关键作用，初始化，以及扩容。那我们接着来观察下<code>resize()</code>方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K, V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K, V&gt;[] oldTab = table;</span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>) (DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>) newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>) MAXIMUM_CAPACITY ?</span><br><span class="line">                    (<span class="keyword">int</span>) ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        Node&lt;K, V&gt;[] newTab = (Node&lt;K, V&gt;[]) <span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K, V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K, V&gt;) e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        Node&lt;K, V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K, V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K, V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>这个方法看起来也较为复杂，我们同样作下简单分析：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K, V&gt;[] resize() &#123;</span><br><span class="line">        <span class="comment">/* 同样声明本地变量，得到原来的数组，提高性能 */</span></span><br><span class="line">        Node&lt;K, V&gt;[] oldTab = table;</span><br><span class="line">        <span class="comment">/* 获得数组的长度 */</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="comment">/* 获取扩容阈值 */</span></span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="comment">/* 新的数组长度，新的阈值 */</span></span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">                <span class="comment">/* 将原来的数组长度 * 2 判断是否小于最大值，并且原来的数组长度大于 默认初始长度（16）</span></span><br><span class="line"><span class="comment">                * 直接双倍扩容， 阈值，长度都 * 2</span></span><br><span class="line"><span class="comment">                * */</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            <span class="comment">/* 第一次调用 resize方法，初始化数组长度，阈值，这里就对应我们前面成员变量的分析了：</span></span><br><span class="line"><span class="comment">             * 阈值 = 加载因子 * 数组长度</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>) (DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>) newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>) MAXIMUM_CAPACITY ?</span><br><span class="line">                    (<span class="keyword">int</span>) ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        threshold = newThr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 根据前面计算出来的新长度，声明一个新数组 */</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        Node&lt;K, V&gt;[] newTab = (Node&lt;K, V&gt;[]) <span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 开始将旧数组的长度复制到新数组 */</span></span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K, V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/* 原数组的值先置换为null，帮助gc */</span></span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/* 如果节点的next不为空（没有形成链表），直接复制到新数组 */</span></span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    </span><br><span class="line">                        <span class="comment">/* 不为空但是已经是 红黑树了，按红黑树规则置换 */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K, V&gt;) e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/* 已经形成链表了，循环将链表的引用到新数组，不再使用链表 */</span></span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        <span class="comment">/* 声明四个引用，可以防止多线程环境下 死循环！ */</span></span><br><span class="line">                        Node&lt;K, V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K, V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K, V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 最后返回新数组 */</span></span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>注释已经简要说明流程，这里可以看出有数组复制以及重新计算hash的操作，<code>所以我们在实际开发中使用HashMap的时候，最好设置一个初始容量，防止经常扩容操作耗费性能！</code></p><ol start="7"><li>好了，<code>HashMap</code>两个关键方法都分析完毕了，接下来我们最后分析一个方法，<code>get(key)</code>:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>get方法首先通过 <code>hash(key)</code>方法获取到了hash值，接着通过<code>getNode(hash)</code>方法获取节点，所以我们重点看下<code>getNode</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 声明本地变量，提高性能 */</span></span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line">        Node&lt;K, V&gt; first, e;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        K k;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 本地变量赋值，n为数组长度 */</span></span><br><span class="line">        tab = table;</span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            n = tab.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 通过 hash值算出key在数组中的 位置，取出该节点 */</span></span><br><span class="line">        first = tab[n - <span class="number">1</span>] &amp; hash;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 不为空，表示key在数组中存在，接下来开始遍历链表获取红黑树，找出具体位置 */</span></span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; n &gt; <span class="number">0</span> &amp;&amp; first != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 如果链表或者红黑树的第一个节点 hash值，key相等，这个节点就是我们要找的，直接返回 */</span></span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                    ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 开始遍历链表 */</span></span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">/* 如果是红黑树，直接按树规则 查找然后返回 */</span></span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K, V&gt;) first).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="comment">/* 遍历链表找到了，返回 */</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 最后没有找到，直接返回null */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>所有代码均已经加上详细注释，这里值得注意的是， <code>我们发现在链表中查找节点采用的是遍历的方式，所以一旦链表过长，查找性能就较慢，这也是为什么jdk1.8会在链表长度超过阈值的时候将链表转换为红黑树的原因！（链表时间复杂度为O(n)，红黑树为 O(logn).</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>相信到了现在，HashMap的各类问题各位应该都能够明白了，我们通过阅读源码的方式较为详细的分析了 <code>HashMap</code>（jdk1.8）中的关键方法（put，get，resize），明白了<code>HashMap</code>中的每一个成员变量，静态常量的含义，<br>另外我们还通过源码知道了多线程环境下HashMap会出现的问题，引申出了<code>ConCurrentHashMap</code>的解析，下一章，我们同样将通过源码解析<code>ConCurrentHashMap</code>！</p><p><code>关注我，这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/dd0twtp-b336f181-aa04-420e-b178-fadb3025905c.jpg-blog_960_440.jpg&quot; alt=&quot;jsbintask-HashMap&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="jdk" scheme="https://jsbintask.cn/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>（干货）Android入门完整项目：一个有定时提醒功能的备忘录</title>
    <link href="https://jsbintask.cn/2019/02/23/android/android-memo/"/>
    <id>https://jsbintask.cn/2019/02/23/android/android-memo/</id>
    <published>2019-02-23T08:05:00.000Z</published>
    <updated>2019-02-23T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/d396zy4-aff6fa96-0caa-44a3-87f2-a2f0bc0d1c61.jpg-blog_960_440.jpg" alt="android"><br><a id="more"></a></p><blockquote><p>本文原创地址，<code>我的博客</code>：<a href="https://jsbintask.cn/2019/02/23/android/android-memo/">https://jsbintask.cn/2019/02/23/android/android-memo/</a>(食用效果最佳)，转载请注明出处!</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>今天给大家分享一个以前学习<code>android</code>时做的小项目，一个<code>带有定时提醒功能的备忘录</code>，主要用到<code>RecycleView</code>, <code>sqlite</code>, <code>butterknife</code>，效果如下：<br><img src="http://qiniu.jsbintask.cn/memo.gif" alt="android"><br><a href="https://github.com/jsbintask22/memo/blob/master/apk/jsbintask-memo.apk" target="_blank" rel="noopener">apk地址</a></p><h2 id="详细功能实现"><a href="#详细功能实现" class="headerlink" title="详细功能实现"></a>详细功能实现</h2><h3 id="建立db，编写db-helper类"><a href="#建立db，编写db-helper类" class="headerlink" title="建立db，编写db helper类"></a>建立db，编写db helper类</h3><ol><li><p>新建一个常量类，包含所有操作db的语句，<code>ColumnContacts</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColumnContacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_TABLE_NAME = <span class="string">"event"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_TITLE_COLUMN = <span class="string">"title"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_CONTENT_COLUMN = <span class="string">"content"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_CREATED_TIME_COLUMN = <span class="string">"created_time"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_UPDATED_TIME_COLUMN = <span class="string">"updated_time"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_REMIND_TIME_COLUMN = <span class="string">"remind_time"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_IS_IMPORTANT_COLUMN = <span class="string">"is_important"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EVENT_IS_CLOCKED = <span class="string">"is_clocked"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建一个<code>DBTemplate</code>,此处用到设计模式模板方法，所以还包含一个回调接口<code>DBCallbackk</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBTemplate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DBOpenHelper dbHelper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dbHelper = <span class="keyword">new</span> DBOpenHelper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">queryOne</span><span class="params">(String sql, DBCallback&lt;T&gt; callback, String...args)</span> </span>&#123;</span><br><span class="line">        T t = <span class="keyword">null</span>;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getReadableDatabase();</span><br><span class="line">        Cursor cursor = db.rawQuery(sql, args);</span><br><span class="line">        <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToNext()) &#123;</span><br><span class="line">            t = callback.cursorToInstance(cursor);</span><br><span class="line">            cursor.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">query</span><span class="params">(String sql, DBCallback&lt;T&gt; callback, String... args)</span> </span>&#123;</span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        SQLiteDatabase db = dbHelper.getReadableDatabase();</span><br><span class="line">        Cursor cursor = db.rawQuery(sql, args);</span><br><span class="line">        <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">                T t = callback.cursorToInstance(cursor);</span><br><span class="line">                list.add(t);</span><br><span class="line">            &#125;</span><br><span class="line">            cursor.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">create</span><span class="params">(String table, ContentValues values)</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">        <span class="keyword">return</span> db.insert(table, <span class="keyword">null</span>, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remove</span><span class="params">(String table, String whereConditions, String... args)</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">        <span class="keyword">return</span> db.delete(table, whereConditions, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLatestId</span><span class="params">(String table)</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getReadableDatabase();</span><br><span class="line">        String sql = <span class="string">"SELECT MAX("</span> + BaseColumns._ID + <span class="string">") FROM "</span> + table;</span><br><span class="line">        Cursor cursor = db.rawQuery(sql, <span class="keyword">new</span> String[]&#123;&#125;);</span><br><span class="line">        <span class="keyword">int</span> result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToNext()) &#123;</span><br><span class="line">            result = cursor.getInt(<span class="number">0</span>);</span><br><span class="line">            cursor.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String table, ContentValues contentValues, String whereConditions, String... args)</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">        <span class="keyword">return</span> db.update(table, contentValues, whereConditions, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DBCallback</span> &lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets a instance of T by cursor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">cursorToInstance</span><span class="params">(Cursor cursor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>新建一个类继承<code>SQLiteOpenHelper</code>，<code>DBOpenHelper</code>，用于启动app时创建数据库，并且初始化数据，加入一条记录:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = DBOpenHelper.class.getSimpleName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERSION = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"memo.db"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBOpenHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(MemoApplication.getContext(), DB_NAME, <span class="keyword">null</span>, VERSION);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*第一次初始化app，创建表结构 */</span></span><br><span class="line">        db.execSQL(<span class="string">"CREATE TABLE IF NOT EXISTS "</span> + ColumnContacts.EVENT_TABLE_NAME + <span class="string">"( "</span></span><br><span class="line">                    + BaseColumns._ID + <span class="string">" INTEGER PRIMARY KEY AUTOINCREMENT, "</span></span><br><span class="line">                    + ColumnContacts.EVENT_TITLE_COLUMN + <span class="string">" text, "</span></span><br><span class="line">                    + ColumnContacts.EVENT_CONTENT_COLUMN + <span class="string">" text, "</span></span><br><span class="line">                    + ColumnContacts.EVENT_CREATED_TIME_COLUMN + <span class="string">" datetime, "</span></span><br><span class="line">                    + ColumnContacts.EVENT_UPDATED_TIME_COLUMN + <span class="string">" datetime, "</span></span><br><span class="line">                    + ColumnContacts.EVENT_REMIND_TIME_COLUMN + <span class="string">" datetime, "</span></span><br><span class="line">                    + ColumnContacts.EVENT_IS_IMPORTANT_COLUMN + <span class="string">" INTEGER, "</span></span><br><span class="line">                    + ColumnContacts.EVENT_IS_CLOCKED + <span class="string">" INTEGER"</span></span><br><span class="line">        + <span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"INSERT INTO "</span> + ColumnContacts.EVENT_TABLE_NAME + <span class="string">" VALUES(NULL, ?, ?, ?, ?, ?, ?, ?)"</span>;</span><br><span class="line">        db.beginTransaction();</span><br><span class="line">        db.execSQL(sql, <span class="keyword">new</span> Object[]&#123;<span class="string">"jsbintask-&gt;memo"</span>,</span><br><span class="line">                <span class="string">"Memo是一个小巧方便带有闹铃功能的记事本app，主要使用butterknife和recycleview，clockmanager构建\n"</span> +</span><br><span class="line">                        <span class="string">"git地址：https://github.com/jsbintask22/memo.git"</span>,</span><br><span class="line">                <span class="string">"2018-04-25 17:28:23"</span>,</span><br><span class="line">                <span class="string">"2018-04-25 17:28"</span>,</span><br><span class="line">                <span class="string">"2018-04-25 17:28"</span>,</span><br><span class="line">                <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        db.setTransactionSuccessful();</span><br><span class="line">        db.endTransaction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*版本更新时会执行该方法，如版本变更 =&gt; 2  */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Nothing to do</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="编写dao层"><a href="#编写dao层" class="headerlink" title="编写dao层"></a>编写dao层</h3><p>记事本中是包含一个实体类，<code>Event</code>，编写实体类和dao层代码对该表进行增删改查<br><code>Event</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> <span class="keyword">implements</span> <span class="title">BaseColumns</span>, <span class="title">Parcelable</span></span>&#123;</span><br><span class="line">    <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> Integer mId;</span><br><span class="line">    <span class="comment">//事件</span></span><br><span class="line">    <span class="keyword">private</span> String mTitle;</span><br><span class="line">    <span class="comment">//事件内容</span></span><br><span class="line">    <span class="keyword">private</span> String mContent;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> String mCreatedTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getmIsClocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mIsClocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmIsClocked</span><span class="params">(Integer mIsClocked)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mIsClocked = mIsClocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="keyword">private</span> String mUpdatedTime;</span><br><span class="line">    <span class="comment">//闹钟表示位：该事件是否已经响过铃了，默认没有</span></span><br><span class="line">    <span class="keyword">private</span> Integer mIsClocked = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Event</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (in.readByte() == <span class="number">0</span>) &#123;</span><br><span class="line">            mId = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mId = in.readInt();</span><br><span class="line">        &#125;</span><br><span class="line">        mTitle = in.readString();</span><br><span class="line">        mContent = in.readString();</span><br><span class="line">        mCreatedTime = in.readString();</span><br><span class="line">        mUpdatedTime = in.readString();</span><br><span class="line">        <span class="keyword">if</span> (in.readByte() == <span class="number">0</span>) &#123;</span><br><span class="line">            mIsClocked = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mIsClocked = in.readInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (in.readByte() == <span class="number">0</span>) &#123;</span><br><span class="line">            mIsImportant = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mIsImportant = in.readInt();</span><br><span class="line">        &#125;</span><br><span class="line">        mRemindTime = in.readString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;Event&gt; CREATOR = <span class="keyword">new</span> Creator&lt;Event&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Event <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Event(in);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Event[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Event[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getmIsImportant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mIsImportant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmIsImportant</span><span class="params">(Integer mIsImportant)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mIsImportant = mIsImportant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer mIsImportant;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getmId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmId</span><span class="params">(Integer mId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mId = mId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getmTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmTitle</span><span class="params">(String mTitle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mTitle = mTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getmContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmContent</span><span class="params">(String mContent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContent = mContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getmCreatedTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mCreatedTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmCreatedTime</span><span class="params">(String mCreatedTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mCreatedTime = mCreatedTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getmUpdatedTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mUpdatedTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmUpdatedTime</span><span class="params">(String mUpdatedTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mUpdatedTime = mUpdatedTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getmRemindTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mRemindTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setmRemindTime</span><span class="params">(String mRemindTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mRemindTime = mRemindTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mRemindTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mId == <span class="keyword">null</span>) &#123;</span><br><span class="line">            dest.writeByte((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dest.writeByte((<span class="keyword">byte</span>) <span class="number">1</span>);</span><br><span class="line">            dest.writeInt(mId);</span><br><span class="line">        &#125;</span><br><span class="line">        dest.writeString(mTitle);</span><br><span class="line">        dest.writeString(mContent);</span><br><span class="line">        dest.writeString(mCreatedTime);</span><br><span class="line">        dest.writeString(mUpdatedTime);</span><br><span class="line">        <span class="keyword">if</span> (mIsClocked == <span class="keyword">null</span>) &#123;</span><br><span class="line">            dest.writeByte((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dest.writeByte((<span class="keyword">byte</span>) <span class="number">1</span>);</span><br><span class="line">            dest.writeInt(mIsClocked);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mIsImportant == <span class="keyword">null</span>) &#123;</span><br><span class="line">            dest.writeByte((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dest.writeByte((<span class="keyword">byte</span>) <span class="number">1</span>);</span><br><span class="line">            dest.writeInt(mIsImportant);</span><br><span class="line">        &#125;</span><br><span class="line">        dest.writeString(mRemindTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>值得注意的是，为了让其在Activity之间传递数据，需要继承<code>Parcelable</code>接口，接下编写<code>EventDao</code>,因为用到了模板方法，所以加入回调类<code>EventCallback</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用模板模式进行DB操作</span></span><br><span class="line">    <span class="keyword">private</span> DBTemplate&lt;Event&gt; mTemplate = <span class="keyword">new</span> DBTemplate&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> EventCallback mCallback = <span class="keyword">new</span> EventCallback();</span><br><span class="line">    <span class="comment">//设置为单例模式，其他类均是此方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EventDao mEventDao = <span class="keyword">new</span> EventDao();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EventDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EventDao <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mEventDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Event&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"SELECT * FROM "</span> + ColumnContacts.EVENT_TABLE_NAME + <span class="string">" ORDER BY "</span> + ColumnContacts.EVENT_IS_IMPORTANT_COLUMN + <span class="string">" DESC, "</span> + ColumnContacts.EVENT_CREATED_TIME_COLUMN + <span class="string">" DESC"</span>;</span><br><span class="line">        <span class="keyword">return</span> mTemplate.query(sql, mCallback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Event&gt; <span class="title">findAllWithNOClocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"SELECT * FROM "</span> + ColumnContacts.EVENT_TABLE_NAME + <span class="string">" WHERE "</span> + ColumnContacts.EVENT_IS_CLOCKED + <span class="string">" = "</span> + Constants.EventClockFlag.NONE;</span><br><span class="line">        <span class="keyword">return</span> mTemplate.query(sql, mCallback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateEventClocked</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        ContentValues contentValues = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        contentValues.put(ColumnContacts.EVENT_IS_CLOCKED, Constants.EventClockFlag.CLOCKED);</span><br><span class="line">        <span class="keyword">return</span> mTemplate.update(ColumnContacts.EVENT_TABLE_NAME, contentValues, BaseColumns._ID + <span class="string">" = ?"</span>, Integer.toString(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"SELECT * FROM "</span> + ColumnContacts.EVENT_TABLE_NAME + <span class="string">" WHERE "</span> + BaseColumns._ID + <span class="string">" = ?"</span>;</span><br><span class="line">        <span class="keyword">return</span> mTemplate.queryOne(sql, mCallback, Integer.toString(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remove</span><span class="params">(List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">        StringBuilder whereConditions = <span class="keyword">new</span> StringBuilder(BaseColumns._ID + <span class="string">" IN("</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer id : ids) &#123;</span><br><span class="line">            whereConditions.append(id).append(<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        whereConditions.deleteCharAt(whereConditions.length() - <span class="number">1</span>).append(<span class="string">")"</span>);</span><br><span class="line">        <span class="keyword">return</span> mTemplate.remove(ColumnContacts.EVENT_TABLE_NAME, whereConditions.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) mTemplate.create(ColumnContacts.EVENT_TABLE_NAME, generateContentValues(event, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTemplate.update(ColumnContacts.EVENT_TABLE_NAME, generateContentValues(event, <span class="keyword">true</span>), BaseColumns._ID + <span class="string">"  = ?"</span>, Integer.toString(event.getmId()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLatestEventId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTemplate.getLatestId(ColumnContacts.EVENT_TABLE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ContentValues <span class="title">generateContentValues</span><span class="params">(Event event, <span class="keyword">boolean</span> isUpdate)</span> </span>&#123;</span><br><span class="line">        ContentValues contentValues = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        contentValues.put(ColumnContacts.EVENT_TITLE_COLUMN, event.getmTitle());</span><br><span class="line">        contentValues.put(ColumnContacts.EVENT_CONTENT_COLUMN, event.getmContent());</span><br><span class="line">        <span class="keyword">if</span> (!isUpdate) &#123;</span><br><span class="line">            contentValues.put(ColumnContacts.EVENT_CREATED_TIME_COLUMN, DateTimeUtil.dateToStr(<span class="keyword">new</span> Date()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            contentValues.put(ColumnContacts.EVENT_CREATED_TIME_COLUMN, event.getmCreatedTime());</span><br><span class="line">        &#125;</span><br><span class="line">        contentValues.put(ColumnContacts.EVENT_IS_CLOCKED, event.getmIsClocked());</span><br><span class="line">        contentValues.put(ColumnContacts.EVENT_UPDATED_TIME_COLUMN, DateTimeUtil.dateToStr(<span class="keyword">new</span> Date()));</span><br><span class="line">        contentValues.put(ColumnContacts.EVENT_REMIND_TIME_COLUMN, event.getmRemindTime());</span><br><span class="line">        contentValues.put(ColumnContacts.EVENT_IS_IMPORTANT_COLUMN, event.getmIsImportant());</span><br><span class="line">        <span class="keyword">return</span> contentValues;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventCallback</span> <span class="keyword">implements</span> <span class="title">DBCallback</span>&lt;<span class="title">Event</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">cursorToInstance</span><span class="params">(Cursor cursor)</span> </span>&#123;</span><br><span class="line">        Event event = <span class="keyword">new</span> Event();</span><br><span class="line">        event.setmId(cursor.getInt(cursor.getColumnIndexOrThrow(BaseColumns._ID)));</span><br><span class="line">        event.setmTitle(cursor.getString(cursor.getColumnIndexOrThrow(ColumnContacts.EVENT_TITLE_COLUMN)));</span><br><span class="line">        event.setmContent(cursor.getString(cursor.getColumnIndexOrThrow(ColumnContacts.EVENT_CONTENT_COLUMN)));</span><br><span class="line">        event.setmCreatedTime(cursor.getString(cursor.getColumnIndexOrThrow(ColumnContacts.EVENT_CREATED_TIME_COLUMN)));</span><br><span class="line">        event.setmUpdatedTime(cursor.getString(cursor.getColumnIndexOrThrow(ColumnContacts.EVENT_UPDATED_TIME_COLUMN)));</span><br><span class="line">        event.setmRemindTime(cursor.getString(cursor.getColumnIndexOrThrow(ColumnContacts.EVENT_REMIND_TIME_COLUMN)));</span><br><span class="line">        event.setmIsImportant(cursor.getInt(cursor.getColumnIndexOrThrow(ColumnContacts.EVENT_IS_IMPORTANT_COLUMN)));</span><br><span class="line">        event.setmIsClocked(cursor.getInt(cursor.getColumnIndexOrThrow(ColumnContacts.EVENT_IS_CLOCKED)));</span><br><span class="line">        <span class="keyword">return</span> event;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写manager层"><a href="#编写manager层" class="headerlink" title="编写manager层"></a>编写manager层</h3><ol><li>EventManager用于管理所有的event如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"EventManager"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EventManager mEventManager = <span class="keyword">new</span> EventManager();</span><br><span class="line">    <span class="keyword">private</span> EventDao mEventDao = EventDao.getInstance();</span><br><span class="line">    <span class="comment">//保存一份数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getDeletedIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deletedIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeletedIds</span><span class="params">(List&lt;Integer&gt; deletedIds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deletedIds = deletedIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Event&gt; events = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; deletedIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EventManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EventManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mEventManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Event&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        events =  mEventDao.findAll();</span><br><span class="line">        <span class="keyword">return</span> events;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flushData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        events = mEventDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Event&gt; <span class="title">getEvents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> events;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeEvents</span><span class="params">(<span class="keyword">final</span> Handler handler, <span class="keyword">final</span> List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> result = mEventDao.remove(ids);</span><br><span class="line">                    Message message = <span class="keyword">new</span> Message();</span><br><span class="line">                    message.what = Constants.HANDLER_SUCCESS;</span><br><span class="line">                    message.obj = result;</span><br><span class="line">                    message.setTarget(handler);</span><br><span class="line">                    message.sendToTarget();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">"run: "</span>, e);</span><br><span class="line">                    handler.obtainMessage(Constants.HANDLER_FAILED, <span class="keyword">new</span> MemoException(e)).sendToTarget();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeEvent</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mEventDao.remove(Collections.singletonList(id)) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (event.getmId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mEventDao.update(event);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mEventDao.create(event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"saveOrUpdate: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLatestEventId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mEventDao.getLatestEventId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">getOne</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mEventDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkEventField</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(event.getmTitle())) &#123;</span><br><span class="line">            ToastUtil.showToastShort(R.string.event_can_not_empty);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(event.getmContent())) &#123;</span><br><span class="line">            ToastUtil.showToastShort(R.string.content_can_not_empty);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isBlank(event.getmRemindTime())) &#123;</span><br><span class="line">            ToastUtil.showToastShort(R.string.remind_time_can_not_empty);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DateTimeUtil.str2Date(event.getmRemindTime()) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ToastUtil.showToastShort(R.string.invalid_remind_time_format);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> Date().getTime() &gt; DateTimeUtil.str2Date(event.getmRemindTime()).getTime()) &#123;</span><br><span class="line">            ToastUtil.showToastShort(R.string.remind_time_deprecated);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>接着编写一个<code>ClockManager</code>用于管理系统闹钟服务，用于app定时提醒：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClockManager instance = <span class="keyword">new</span> ClockManager();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClockManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClockManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取系统闹钟服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AlarmManager <span class="title">getAlarmManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (AlarmManager) MemoApplication.getContext().getSystemService(Context.ALARM_SERVICE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消闹钟</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pendingIntent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelAlarm</span><span class="params">(PendingIntent pendingIntent)</span> </span>&#123;</span><br><span class="line">        getAlarmManager().cancel(pendingIntent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加闹钟</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pendingIntent 执行动作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> performTime  执行时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAlarm</span><span class="params">(PendingIntent pendingIntent, Date performTime)</span> </span>&#123;</span><br><span class="line">        cancelAlarm(pendingIntent);</span><br><span class="line">        getAlarmManager().set(AlarmManager.RTC_WAKEUP, performTime.getTime(), pendingIntent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="编写系统Service和Receiver"><a href="#编写系统Service和Receiver" class="headerlink" title="编写系统Service和Receiver"></a>编写系统Service和Receiver</h3><p>为了让我们的提醒服务在后台保活，我们需要编写一个<code>ClockService</code>或者<code>ClockReceiver</code>在后台运行（任意一种都行，此处用的<code>service</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Service和Broadcast都行，此处选一个，service存活率更高</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ClockService"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_EVENT_ID = <span class="string">"extra.event.id"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_EVENT_REMIND_TIME = <span class="string">"extra.event.remind.time"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_EVENT = <span class="string">"extra.event"</span>;</span><br><span class="line">    <span class="keyword">private</span> EventDao mEventDao = EventDao.getInstance();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClockService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"ClockService: Constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onStartCommand: onStartCommand"</span>);</span><br><span class="line">        WakeLockUtil.wakeUpAndUnlock();</span><br><span class="line">        postToClockActivity(getApplicationContext(), intent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToClockActivity</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent();</span><br><span class="line">        i.setClass(context, ClockActivity.class);</span><br><span class="line">        i.putExtra(EXTRA_EVENT_ID, intent.getIntExtra(EXTRA_EVENT_ID, -<span class="number">1</span>));</span><br><span class="line">        Event event = mEventDao.findById(intent.getIntExtra(EXTRA_EVENT_ID, -<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i.putExtra(EXTRA_EVENT_REMIND_TIME, intent.getStringExtra(EXTRA_EVENT_REMIND_TIME));</span><br><span class="line">        i.putExtra(EXTRA_EVENT, event);</span><br><span class="line">        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        context.startActivity(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onDestroy: "</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>ClockReceiver</code>如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ClockReceiver"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_EVENT_ID = <span class="string">"extra.event.id"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_EVENT_REMIND_TIME = <span class="string">"extra.event.remind.time"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_EVENT = <span class="string">"extra.event"</span>;</span><br><span class="line">    <span class="keyword">private</span> EventDao mEventDao = EventDao.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onReceive: "</span> + intent.getAction());</span><br><span class="line">        WakeLockUtil.wakeUpAndUnlock();</span><br><span class="line">        postToClockActivity(context, intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToClockActivity</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent();</span><br><span class="line">        i.setClass(context, ClockActivity.class);</span><br><span class="line">        i.putExtra(EXTRA_EVENT_ID, intent.getIntExtra(EXTRA_EVENT_ID, -<span class="number">1</span>));</span><br><span class="line">        Event event = mEventDao.findById(intent.getIntExtra(EXTRA_EVENT_ID, -<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i.putExtra(EXTRA_EVENT_REMIND_TIME, intent.getStringExtra(EXTRA_EVENT_REMIND_TIME));</span><br><span class="line">        i.putExtra(EXTRA_EVENT, event);</span><br><span class="line">        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        context.startActivity(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClockReceiver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        Log.d(TAG, <span class="string">"ClockReceiver: Constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><p>接着编写Activity，首先，写一个主界面，用于展示事件清单，因为有多个<code>Activity</code>，所以我们加入<code>BaseActivity</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*Butterknife绑定器，该activity销毁时要取消绑定，避免内存泄漏  */</span></span><br><span class="line">    <span class="keyword">private</span> Unbinder mUnbinder;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(getContentView());</span><br><span class="line">        mUnbinder = ButterKnife.bind(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">/*Base activity中的公共的方法，因为每个类都需要初始化，所以在基类中定义 */</span></span><br><span class="line">        initView();</span><br><span class="line">        initData();</span><br><span class="line">        setListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getContentView</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        mUnbinder.unbind();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>MainActivity</code>如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">BaseHandler</span>.<span class="title">HandlerResultCallBack</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.recycler_view)</span><br><span class="line">    RecyclerView mRecyclerView;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.search_view)</span><br><span class="line">    SearchView mSearchView;</span><br><span class="line">    <span class="keyword">private</span> EventRecyclerViewAdapter mAdapter;</span><br><span class="line">    <span class="keyword">private</span> EventManager mEventManger = EventManager.getInstance();</span><br><span class="line">    <span class="keyword">private</span> ClockManager mClockManager = ClockManager.getInstance();</span><br><span class="line">    <span class="keyword">private</span> BaseHandler mBaseHandler = <span class="keyword">new</span> BaseHandler(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mAdapter = <span class="keyword">new</span> EventRecyclerViewAdapter(<span class="keyword">this</span>);</span><br><span class="line">        LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) mSearchView.getLayoutParams();</span><br><span class="line">        <span class="comment">//将文字内容略微下移，SearchView  bug</span></span><br><span class="line">        params.bottomMargin = -<span class="number">3</span>;</span><br><span class="line">        mSearchView.setLayoutParams(params);</span><br><span class="line">        mSearchView.onActionViewExpanded();</span><br><span class="line">        initSearchView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSearchView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一处searchView进入屏幕时候的焦点</span></span><br><span class="line">        mSearchView.clearFocus();</span><br><span class="line">        Class&lt;? extends SearchView&gt; aClass = mSearchView.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//去掉SearchView自带的下划线</span></span><br><span class="line">            Field mSearchPlate = aClass.getDeclaredField(<span class="string">"mSearchPlate"</span>);</span><br><span class="line">            mSearchPlate.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            View o = (View) mSearchPlate.get(mSearchView);</span><br><span class="line">            o.setBackgroundColor(getColor(R.color.transparent));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//隐藏键盘</span></span><br><span class="line">        AppUtil.hideSoftInput(<span class="keyword">this</span>, mSearchView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置数据源，适配器等等</span></span><br><span class="line">        mAdapter.setDatabases(mEventManger.findAll());</span><br><span class="line">        mRecyclerView.setAdapter(mAdapter);</span><br><span class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line">        mRecyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(<span class="keyword">this</span>, DividerItemDecoration.VERTICAL));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       mAdapter.setOnItemClickListener(mOnItemClickListener);</span><br><span class="line">       mSearchView.setOnQueryTextListener(mQueryListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        getMenuInflater().inflate(R.menu.menu_main_activity, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断是点击了那个按钮，删除，添加</span></span><br><span class="line">        <span class="keyword">if</span> (item.getItemId() == R.id.menu_add) &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            intent.setClass(<span class="keyword">this</span>, EventDetailActivity.class);</span><br><span class="line">            intent.putExtra(EventDetailActivity.EXTRA_IS_ADD_EVENT, <span class="keyword">true</span>);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.getItemId() == R.id.menu_delete) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mAdapter.getIsDeleteMode()) &#123;</span><br><span class="line">                <span class="comment">//删除数据</span></span><br><span class="line">                <span class="keyword">if</span> (mAdapter.getSelectedEventIds().size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    ToastUtil.showToastShort(R.string.no_event_selected_msg);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> msg = mAdapter.getSelectedEventIds().size() == <span class="number">1</span> ? R.string.delete_event_msg : R.string.delete_events_msg;</span><br><span class="line">                    AlertDialogUtil.showDialog(<span class="keyword">this</span>, msg, mConfirmListener);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mAdapter.setDeleteMode(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.activity_main;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EventRecyclerViewAdapter.OnItemClickListener mOnItemClickListener = <span class="keyword">new</span> EventRecyclerViewAdapter.OnItemClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!mAdapter.getIsDeleteMode()) &#123;</span><br><span class="line">                <span class="comment">//跳屏，此时为查看详情，不是编辑状态</span></span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">                intent.setClass(MainActivity.<span class="keyword">this</span>, EventDetailActivity.class);</span><br><span class="line">                intent.putExtra(EventDetailActivity.EXTRA_IS_EDIT_EVENT, <span class="keyword">false</span>);</span><br><span class="line">                intent.putExtra(EventDetailActivity.EXTRA_EVENT_DATA, mAdapter.getDatabases().get(position));</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemLongClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            ToastUtil.showToastShort(<span class="string">"Long clicked"</span>);</span><br><span class="line">            mAdapter.setDeleteMode(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DialogInterface.OnClickListener mConfirmListener = <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">            mEventManger.setDeletedIds(mAdapter.getSelectedEventIds());</span><br><span class="line">            mEventManger.removeEvents(mBaseHandler, mEventManger.getDeletedIds());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从编辑屏幕回来时调用该方法，做数据更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onNewIntent(intent);</span><br><span class="line">        mAdapter.setDatabases(mEventManger.getEvents());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SearchView.OnQueryTextListener mQueryListener = <span class="keyword">new</span> SearchView.OnQueryTextListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onQueryTextSubmit</span><span class="params">(String query)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onQueryTextChange</span><span class="params">(String newText)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//做本地查询</span></span><br><span class="line">            <span class="keyword">if</span> (!StringUtil.isBlank(newText)) &#123;</span><br><span class="line">                List&lt;Event&gt; events = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (Event event : mAdapter.getDatabases()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (event.getmTitle().contains(newText)) &#123;</span><br><span class="line">                        events.add(event);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                mAdapter.setDatabases(events);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mAdapter.setDatabases(mEventManger.getEvents());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler处理成功的回调函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@link</span> com.jsbintask@gmail.com.memo.base.BaseHandler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerSuccess</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        ToastUtil.showToastShort(R.string.delete_successful);</span><br><span class="line">        <span class="keyword">for</span> (PendingIntent pendingIntent : buildIntent(mEventManger.getDeletedIds())) &#123;</span><br><span class="line">            mClockManager.cancelAlarm(pendingIntent);</span><br><span class="line">        &#125;</span><br><span class="line">        mAdapter.setDatabases(mEventManger.findAll());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理失败的回调函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerFailed</span><span class="params">(MemoException e)</span> </span>&#123;</span><br><span class="line">        ToastUtil.showToastShort(R.string.delete_failed);</span><br><span class="line">        mAdapter.setDeleteMode(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;PendingIntent&gt; <span class="title">buildIntent</span><span class="params">(List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">        List&lt;PendingIntent&gt; pendingIntents = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Integer id : ids) &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            intent.putExtra(ClockService.EXTRA_EVENT_ID, id);</span><br><span class="line">            intent.setClass(<span class="keyword">this</span>, ClockService.class);</span><br><span class="line"></span><br><span class="line">            pendingIntents.add(PendingIntent.getService(<span class="keyword">this</span>, <span class="number">0x001</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pendingIntents;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着，编写个用于展示事件详情的<code>EventDetailActivity</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventDetailActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_IS_EDIT_EVENT = <span class="string">"extra.is.edit.event"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_EVENT_DATA = <span class="string">"extra.event.data"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_IS_ADD_EVENT = <span class="string">"extra.is.create.event"</span>;</span><br><span class="line">    <span class="comment">//从主屏进来的操作是不是编辑操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isEditEvent;</span><br><span class="line">    <span class="comment">//从主屏进来的操作是不是添加操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isAddEvent;</span><br><span class="line">    <span class="keyword">private</span> EventManager mEventManager = EventManager.getInstance();</span><br><span class="line">    <span class="keyword">private</span> ClockManager mClockManager = ClockManager.getInstance();</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.ll_update_time)</span><br><span class="line">    LinearLayout llUpdateTime;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.ed_title)</span><br><span class="line">    EditText edTitle;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.tv_remind_time_picker)</span><br><span class="line">    EditText tvRemindTime;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.ed_content)</span><br><span class="line">    EditText edContent;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.tv_last_edit_time)</span><br><span class="line">    TextView tvUpdateTime;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.iv_back)</span><br><span class="line">    ImageView ivBack;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.tv_confirm)</span><br><span class="line">    TextView tvConfirm;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.iv_delete)</span><br><span class="line">    ImageView ivDelete;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.iv_edit)</span><br><span class="line">    ImageView ivEdit;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.chb_is_important)</span><br><span class="line">    CheckBox chbIsImportant;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.scroll_view)</span><br><span class="line">    ScrollView scrollView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isEditEvent = getIntent().getBooleanExtra(EXTRA_IS_EDIT_EVENT, <span class="keyword">false</span>);</span><br><span class="line">        isAddEvent = getIntent().getBooleanExtra(EXTRA_IS_ADD_EVENT, <span class="keyword">false</span>);</span><br><span class="line">        judgeOperate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">judgeOperate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//是否显示上方上次编辑时间</span></span><br><span class="line">        llUpdateTime.setVisibility(isAddEvent ? View.GONE : View.VISIBLE);</span><br><span class="line">        <span class="comment">//是否能够编辑标题</span></span><br><span class="line">        setEditTextReadOnly(edTitle, !isEditEvent &amp;&amp; !isAddEvent);</span><br><span class="line">        <span class="comment">//是否能够编辑内容</span></span><br><span class="line">        setEditTextReadOnly(edContent, !isEditEvent &amp;&amp; !isAddEvent);</span><br><span class="line">        <span class="comment">//设置提醒时间不能手动输入</span></span><br><span class="line">        setEditTextReadOnly(tvRemindTime, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置提醒时间是否能够点击：弹出时间选择器</span></span><br><span class="line">        tvRemindTime.setClickable(isEditEvent || isAddEvent);</span><br><span class="line">        <span class="comment">//设置右上角确定按钮是否可见</span></span><br><span class="line">        tvConfirm.setVisibility(isEditEvent || isAddEvent ? View.VISIBLE : View.GONE);</span><br><span class="line">        <span class="comment">//设置右下角编辑按钮是否可见</span></span><br><span class="line">        ivEdit.setVisibility(!isEditEvent &amp;&amp; !isAddEvent ? View.VISIBLE : View.GONE);</span><br><span class="line">        <span class="comment">//设置左下角删除按钮是否可见</span></span><br><span class="line">        ivDelete.setVisibility(!isAddEvent ? View.VISIBLE : View.GONE);</span><br><span class="line">        <span class="comment">//设置checkbox能不能点击</span></span><br><span class="line">        chbIsImportant.setClickable(isEditEvent || isAddEvent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAddEvent) &#123;</span><br><span class="line">            Event event = getIntent().getParcelableExtra(EXTRA_EVENT_DATA);</span><br><span class="line">            <span class="comment">//填充值</span></span><br><span class="line">            tvUpdateTime.setText(event.getmUpdatedTime());</span><br><span class="line">            edTitle.setText(event.getmTitle());</span><br><span class="line">            edContent.setText(event.getmContent());</span><br><span class="line">            tvRemindTime.setText(event.getmRemindTime());</span><br><span class="line">            chbIsImportant.setChecked(event.getmIsImportant() == Constants.EventFlag.IMPORTANT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClick</span>(R.id.iv_back)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backImageClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClick</span>(R.id.iv_delete)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteImageClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAddEvent) &#123;</span><br><span class="line">            AlertDialogUtil.showDialog(<span class="keyword">this</span>, R.string.delete_event_msg, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                    Event event = getIntent().getParcelableExtra(EventDetailActivity.EXTRA_EVENT_DATA);</span><br><span class="line">                    <span class="keyword">if</span> (mEventManager.removeEvent(event.getmId())) &#123;</span><br><span class="line">                        ToastUtil.showToastShort(R.string.delete_successful);</span><br><span class="line">                        mClockManager.cancelAlarm(buildIntent(event.getmId()));</span><br><span class="line">                        mEventManager.flushData();</span><br><span class="line">                        postToMainActivity();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ToastUtil.showToastShort(R.string.delete_failed);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回到主屏幕</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postToMainActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.setClass(EventDetailActivity.<span class="keyword">this</span>, MainActivity.class);</span><br><span class="line">        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.activity_event_detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 弹出时间选择器，选择闹钟执行时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClick</span>(R.id.tv_remind_time_picker)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">datePickClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEditEvent || isAddEvent) &#123;</span><br><span class="line">            <span class="keyword">final</span> Calendar calendar = Calendar.getInstance();</span><br><span class="line">            DatePickerDialog dialog = <span class="keyword">new</span> DatePickerDialog(<span class="keyword">this</span>, <span class="keyword">new</span> DatePickerDialog.OnDateSetListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDateSet</span><span class="params">(DatePicker view, <span class="keyword">final</span> <span class="keyword">int</span> year, <span class="keyword">final</span> <span class="keyword">int</span> month, <span class="keyword">final</span> <span class="keyword">int</span> dayOfMonth)</span> </span>&#123;</span><br><span class="line">                    TimePickerDialog timePickerDialog = <span class="keyword">new</span> TimePickerDialog(EventDetailActivity.<span class="keyword">this</span>, <span class="keyword">new</span> TimePickerDialog.OnTimeSetListener() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeSet</span><span class="params">(TimePicker view, <span class="keyword">int</span> hourOfDay, <span class="keyword">int</span> minute)</span> </span>&#123;</span><br><span class="line">                            String time = year + <span class="string">"-"</span> + StringUtil.getLocalMonth(month) + <span class="string">"-"</span> + StringUtil.getMultiNumber(dayOfMonth) + <span class="string">" "</span> + StringUtil.getMultiNumber(hourOfDay) + <span class="string">":"</span> + StringUtil.getMultiNumber(minute);</span><br><span class="line">                            tvRemindTime.setText(time);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), <span class="keyword">false</span>);</span><br><span class="line">                    timePickerDialog.show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">            dialog.getDatePicker().setMinDate(calendar.getTimeInMillis());</span><br><span class="line">            dialog.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClick</span>(R.id.iv_edit)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">editImageClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isEditEvent) &#123;</span><br><span class="line">            ToastUtil.showToastShort(R.string.enter_edit_mode);</span><br><span class="line">            ivEdit.setVisibility(View.GONE);</span><br><span class="line">            isEditEvent = <span class="keyword">true</span>;</span><br><span class="line">            judgeOperate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClick</span>(R.id.tv_confirm)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirmClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//更新</span></span><br><span class="line">        <span class="keyword">if</span> (isEditEvent || isAddEvent) &#123;</span><br><span class="line">            Event event = buildEvent();</span><br><span class="line">            <span class="comment">//检查属性并且提醒</span></span><br><span class="line">            <span class="keyword">if</span> (!mEventManager.checkEventField(event)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mEventManager.saveOrUpdate(event)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isEditEvent) &#123;</span><br><span class="line">                    ToastUtil.showToastShort(R.string.update_successful);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isAddEvent) &#123;</span><br><span class="line">                    ToastUtil.showToastShort(R.string.create_successful);</span><br><span class="line">                    event.setmId(mEventManager.getLatestEventId());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//添加闹钟</span></span><br><span class="line">                mClockManager.addAlarm(buildIntent(event.getmId()), DateTimeUtil.str2Date(event.getmRemindTime()));</span><br><span class="line">                mEventManager.flushData();</span><br><span class="line">                postToMainActivity();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (isEditEvent) &#123;</span><br><span class="line">                    ToastUtil.showToastShort(R.string.update_failed);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isAddEvent) &#123;</span><br><span class="line">                    ToastUtil.showToastShort(R.string.create_failed);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> PendingIntent <span class="title">buildIntent</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.putExtra(ClockReceiver.EXTRA_EVENT_ID, id);</span><br><span class="line">        intent.setClass(<span class="keyword">this</span>, ClockService.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> PendingIntent.getService(<span class="keyword">this</span>, <span class="number">0x001</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClick</span>(R.id.scroll_view)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrollViewClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isAddEvent || isEditEvent) &#123;</span><br><span class="line">            <span class="comment">//打开软键盘</span></span><br><span class="line">            setEditTextReadOnly(edContent, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Event <span class="title">buildEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Event event = <span class="keyword">new</span> Event();</span><br><span class="line">        <span class="keyword">if</span> (isEditEvent) &#123;</span><br><span class="line">            event.setmId(((Event) getIntent().getParcelableExtra(EXTRA_EVENT_DATA)).getmId());</span><br><span class="line">            event.setmCreatedTime(((Event) getIntent().getParcelableExtra(EXTRA_EVENT_DATA)).getmCreatedTime());</span><br><span class="line">        &#125;</span><br><span class="line">        event.setmRemindTime(tvRemindTime.getText().toString());</span><br><span class="line">        event.setmTitle(edTitle.getText().toString());</span><br><span class="line">        event.setmIsImportant(chbIsImportant.isChecked() ? Constants.EventFlag.IMPORTANT : Constants.EventFlag.NORMAL);</span><br><span class="line">        event.setmContent(edContent.getText().toString());</span><br><span class="line">        event.setmUpdatedTime(DateTimeUtil.dateToStr(<span class="keyword">new</span> Date()));</span><br><span class="line">        <span class="keyword">return</span> event;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setEditTextReadOnly</span><span class="params">(EditText editText, <span class="keyword">boolean</span> readOnly)</span> </span>&#123;</span><br><span class="line">        editText.setFocusable(!readOnly);</span><br><span class="line">        editText.setFocusableInTouchMode(!readOnly);</span><br><span class="line">        editText.setCursorVisible(!readOnly);</span><br><span class="line">        editText.setTextColor(getColor(readOnly ? R.color.gray3 : R.color.black));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，再写一个Activity用于展示闹铃提醒，<code>ClockActivity</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClockActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ClockActivity"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_CLOCK_EVENT = <span class="string">"clock.event"</span>;</span><br><span class="line">    <span class="comment">//闹铃</span></span><br><span class="line">    <span class="keyword">private</span> MediaPlayer mediaPlayer;</span><br><span class="line">    <span class="comment">//震动</span></span><br><span class="line">    <span class="keyword">private</span> Vibrator mVibrator;</span><br><span class="line">    <span class="keyword">private</span> EventManager mEventManger = EventManager.getInstance();</span><br><span class="line">    <span class="keyword">private</span> Event event;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mediaPlayer.start();</span><br><span class="line">        <span class="keyword">long</span>[] pattern = <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">1500</span>, <span class="number">1000</span>&#125;;</span><br><span class="line">        mVibrator.vibrate(pattern, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//获取自定义布局</span></span><br><span class="line">        View inflate = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_alarm_layout, <span class="keyword">null</span>);</span><br><span class="line">        TextView textView = inflate.findViewById(R.id.tv_event);</span><br><span class="line">        textView.setText(String.format(getString(R.string.clock_event_msg_template), event.getmTitle()));</span><br><span class="line">        Button btnConfirm = inflate.findViewById(R.id.btn_confirm);</span><br><span class="line">        <span class="keyword">final</span> AlertDialog alertDialog = AlertDialogUtil.showDialog(<span class="keyword">this</span>, inflate);</span><br><span class="line">        btnConfirm.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                mediaPlayer.stop();</span><br><span class="line">                mVibrator.cancel();</span><br><span class="line">                alertDialog.dismiss();</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        alertDialog.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        clock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mediaPlayer = MediaPlayer.create(getApplicationContext(), R.raw.clock);</span><br><span class="line">        mVibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);</span><br><span class="line">        Intent intent = getIntent();</span><br><span class="line">        event = getIntent().getParcelableExtra(ClockService.EXTRA_EVENT);</span><br><span class="line">        <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">            finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onNewIntent(intent);</span><br><span class="line">        clock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.activity_clock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="系统界面，服务注册清单"><a href="#系统界面，服务注册清单" class="headerlink" title="系统界面，服务注册清单"></a>系统界面，服务注册清单</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"cn.jsbintask.memo"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.VIBRATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WAKE_LOCK"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.DISABLE_KEYGUARD"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"cn.jsbintask.memo.MemoApplication"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_logo"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@drawable/ic_logo"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"GoogleAppIndexingWarning"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"cn.jsbintask.memo.ui.activity.MainActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"cn.jsbintask.memo.ui.activity.EventDetailActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">"@style/NoActionBarTheme"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- &lt;service android:name=".service.ClockService" /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"cn.jsbintask.memo.ui.activity.ClockActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">"@style/FullScreen"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"cn.jsbintask.memo.receiver.ClockReceiver"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.liuzhengwei.memo.action.CLOCK_RECEIVER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"cn.jsbintask.memo.service.ClockService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h2><p>闹铃提醒：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/memo/memo_clock.jpg" alt="clock"><br>批量删除:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/memo/memo_delete.jpg" alt="clock"><br>新增和编辑：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/memo/memo_edit_save.jpg" alt="clock"><br>搜索：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/memo/memo_search.jpg" alt="search"></p><p>项目源码地址：<a href="https://github.com/jsbintask22/memo" target="_blank" rel="noopener">https://github.com/jsbintask22/memo</a>，欢迎fork，star。</p><p><code>关注我！这里只有干货！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/d396zy4-aff6fa96-0caa-44a3-87f2-a2f0bc0d1c61.jpg-blog_960_440.jpg&quot; alt=&quot;android&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="android" scheme="https://jsbintask.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>redis面试必问（下）</title>
    <link href="https://jsbintask.cn/2019/02/18/interview/interview-redis-2/"/>
    <id>https://jsbintask.cn/2019/02/18/interview/interview-redis-2/</id>
    <published>2019-02-18T06:05:00.000Z</published>
    <updated>2019-02-18T06:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>接上一章<a href="https://jsbintask.cn/2019/02/18/interview/interview-redis-1/">redis面试必问（上）</a></p></blockquote><h2 id="7-redis-集群模式的工作原理能说一下么？在集群模式下，redis-的-key-是如何寻址的？分布式寻址都有哪些算法？了解一致性-hash-算法吗？"><a href="#7-redis-集群模式的工作原理能说一下么？在集群模式下，redis-的-key-是如何寻址的？分布式寻址都有哪些算法？了解一致性-hash-算法吗？" class="headerlink" title="7.redis 集群模式的工作原理能说一下么？在集群模式下，redis 的 key 是如何寻址的？分布式寻址都有哪些算法？了解一致性 hash 算法吗？"></a>7.redis 集群模式的工作原理能说一下么？在集群模式下，redis 的 key 是如何寻址的？分布式寻址都有哪些算法？了解一致性 hash 算法吗？</h2><a id="more"></a><h3 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h3><p>在前几年，redis 如果要搞几个节点，每个节点存储一部分的数据，得<strong>借助一些中间件</strong>来实现，比如说有 <code>codis</code>，或者 <code>twemproxy</code>，都有。有一些 redis 中间件，你读写 redis 中间件，redis 中间件负责将你的数据分布式存储在多台机器上的 redis 实例中。</p><p>这两年，redis 不断在发展，redis 也不断的有新的版本，现在的 redis 集群模式，可以做到在多台机器上，部署多个 redis 实例，每个实例存储一部分的数据，同时每个 redis 实例可以挂 redis 从实例，自动确保说，如果 redis 主实例挂了，会自动切换到 redis 从实例顶上来。</p><p>现在 redis 的新版本，大家都是用 redis cluster 的，也就是 redis 原生支持的 redis 集群模式，那么面试官肯定会就 redis cluster 对你来个几连炮。要是你没用过 redis cluster，正常，以前很多人用 codis 之类的客户端来支持集群，但是起码你得研究一下 redis cluster 吧。</p><p>如果你的数据量很少，主要是承载高并发高性能的场景，比如你的缓存一般就几个 G，单机就足够了，可以使用 replication，一个 master 多个 slaves，要几个 slave 跟你要求的读吞吐量有关，然后自己搭建一个 sentinel 集群去保证 redis 主从架构的高可用性。</p><p>redis cluster，主要是针对<strong>海量数据+高并发+高可用</strong>的场景。redis cluster 支撑 N 个 redis master node，每个 master node 都可以挂载多个 slave node。这样整个 redis 就可以横向扩容了。如果你要支撑更大数据量的缓存，那就横向扩容更多的 master 节点，每个 master 节点就能存放更多的数据了。</p><h3 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><h3 id="redis-cluster-介绍"><a href="#redis-cluster-介绍" class="headerlink" title="redis cluster 介绍"></a>redis cluster 介绍</h3><ul><li>自动将数据进行分片，每个 master 上放一部分数据</li><li>提供内置的高可用支持，部分 master 不可用时，还是可以继续工作的</li></ul><p>在 redis cluster 架构下，每个 redis 要放开两个端口号，比如一个是 6379，另外一个就是 加1w 的端口号，比如 16379。</p><p>16379 端口号是用来进行节点间通信的，也就是 cluster bus 的东西，cluster bus 的通信，用来进行故障检测、配置更新、故障转移授权。cluster bus 用了另外一种二进制的协议，<code>gossip</code> 协议，用于节点间进行高效的数据交换，占用更少的网络带宽和处理时间。</p><h3 id="节点间的内部通信机制"><a href="#节点间的内部通信机制" class="headerlink" title="节点间的内部通信机制"></a>节点间的内部通信机制</h3><h4 id="基本通信原理"><a href="#基本通信原理" class="headerlink" title="基本通信原理"></a>基本通信原理</h4><ul><li>redis cluster 节点间采用 gossip 协议进行通信<br>集中式是将集群元数据（节点信息、故障等等）几种存储在某个节点上。集中式元数据集中存储的一个典型代表，就是大数据领域的 <code>storm</code>。它是分布式的大数据实时计算引擎，是集中式的元数据存储的结构，底层基于 zookeeper（分布式协调的中间件）对所有元数据进行存储维护。</li></ul><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/zookeeper-centralized-storage.png" alt="zookeeper-centralized-storage"></p><p>redis 维护集群元数据采用另一个方式， <code>gossip</code> 协议，所有节点都持有一份元数据，不同的节点如果出现了元数据的变更，就不断将元数据发送给其它的节点，让其它节点也进行元数据的变更。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/redis-gossip.png" alt="redis-gossip"></p><p><strong>集中式</strong>的<strong>好处</strong>在于，元数据的读取和更新，时效性非常好，一旦元数据出现了变更，就立即更新到集中式的存储中，其它节点读取的时候就可以感知到；<strong>不好</strong>在于，所有的元数据的更新压力全部集中在一个地方，可能会导致元数据的存储有压力。</p><p>gossip 好处在于，元数据的更新比较分散，不是集中在一个地方，更新请求会陆陆续续，打到所有节点上去更新，降低了压力；不好在于，元数据的更新有延时，可能导致集群中的一些操作会有一些滞后。</p><ul><li><p>10000 端口<br>每个节点都有一个专门用于节点间通信的端口，就是自己提供服务的端口号+10000，比如 7001，那么用于节点间通信的就是 17001 端口。每个节点每隔一段时间都会往另外几个节点发送 <code>ping</code> 消息，同时其它几个节点接收到 <code>ping</code> 之后返回 <code>pong</code>。</p></li><li><p>交换的信息<br>信息包括故障信息，节点的增加和删除，hash slot 信息 等等。</p></li></ul><h4 id="gossip-协议"><a href="#gossip-协议" class="headerlink" title="gossip 协议"></a>gossip 协议</h4><p>gossip 协议包含多种消息，包含 <code>ping</code>,<code>pong</code>,<code>meet</code>,<code>fail</code> 等等。</p><ul><li>meet：某个节点发送 meet 给新加入的节点，让新节点加入集群中，然后新节点就会开始与其它节点进行通信。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb add-node</span><br></pre></td></tr></table></figure></li></ul><p>其实内部就是发送了一个 gossip meet 消息给新加入的节点，通知那个节点去加入我们的集群。</p><ul><li>ping：每个节点都会频繁给其它节点发送 ping，其中包含自己的状态还有自己维护的集群元数据，互相通过 ping 交换元数据。</li><li>pong：返回 ping 和 meeet，包含自己的状态和其它信息，也用于信息广播和更新。</li><li>fail：某个节点判断另一个节点 fail 之后，就发送 fail 给其它节点，通知其它节点说，某个节点宕机啦。</li></ul><h4 id="ping-消息深入"><a href="#ping-消息深入" class="headerlink" title="ping 消息深入"></a>ping 消息深入</h4><p>ping 时要携带一些元数据，如果很频繁，可能会加重网络负担。</p><p>每个节点每秒会执行 10 次 ping，每次会选择 5 个最久没有通信的其它节点。当然如果发现某个节点通信延时达到了 <code>cluster_node_timeout / 2</code>，那么立即发送 ping，避免数据交换延时过长，落后的时间太长了。比如说，两个节点之间都 10 分钟没有交换数据了，那么整个集群处于严重的元数据不一致的情况，就会有问题。所以 <code>cluster_node_timeout</code> 可以调节，如果调得比较大，那么会降低 ping 的频率。</p><p>每次 ping，会带上自己节点的信息，还有就是带上 1/10 其它节点的信息，发送出去，进行交换。至少包含 <code>3</code> 个其它节点的信息，最多包含<code>总结点-2</code> 个其它节点的信息。</p><h3 id="分布式寻址算法"><a href="#分布式寻址算法" class="headerlink" title="分布式寻址算法"></a>分布式寻址算法</h3><ul><li>hash 算法（大量缓存重建）</li><li>一致性 hash 算法（自动缓存迁移）+ 虚拟节点（自动负载均衡）</li><li>redis cluster 的 hash slot 算法</li></ul><h4 id="hash-算法"><a href="#hash-算法" class="headerlink" title="hash 算法"></a>hash 算法</h4><p>来了一个 key，首先计算 hash 值，然后对节点数取模。然后打在不同的 master 节点上。一旦某一个 master 节点宕机，所有请求过来，都会基于最新的剩余 master 节点数去取模，尝试去取数据。这会导致<strong>大部分的请求过来，全部无法拿到有效的缓存</strong>，导致大量的流量涌入数据库。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/hash.png" alt="hash"></p><h4 id="一致性-hash-算法"><a href="#一致性-hash-算法" class="headerlink" title="一致性 hash 算法"></a>一致性 hash 算法</h4><p>一致性 hash 算法将整个 hash 值空间组织成一个虚拟的圆环，整个空间按顺时针方向组织，下一步将各个 master 节点（使用服务器的 ip 或主机名）进行 hash。这样就能确定每个节点在其哈希环上的位置。</p><p>来了一个 key，首先计算 hash 值，并确定此数据在环上的位置，从此位置沿环<strong>顺时针“行走”</strong>，遇到的第一个 master 节点就是 key 所在位置。</p><p>在一致性哈希算法中，如果一个节点挂了，受影响的数据仅仅是此节点到环空间前一个节点（沿着逆时针方向行走遇到的第一个节点）之间的数据，其它不受影响。增加一个节点也同理。</p><p>燃鹅，一致性哈希算法在节点太少时，容易因为节点分布不均匀而造成<strong>缓存热点</strong>的问题。为了解决这种热点问题，一致性 hash 算法引入了虚拟节点机制，即对每一个节点计算多个 hash，每个计算结果位置都放置一个虚拟节点。这样就实现了数据的均匀分布，负载均衡。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/consistent-hashing-algorithm.png" alt="consistent-hashing-algorithm"></p><h4 id="redis-cluster-的-hash-slot-算法"><a href="#redis-cluster-的-hash-slot-算法" class="headerlink" title="redis cluster 的 hash slot 算法"></a>redis cluster 的 hash slot 算法</h4><p>redis cluster 有固定的 <code>16384</code> 个 hash slot，对每个 <code>key</code> 计算 <code>CRC16</code> 值，然后对 <code>16384</code> 取模，可以获取 key 对应的 hash slot。</p><p>redis cluster 中每个 master 都会持有部分 slot，比如有 3 个 master，那么可能每个 master 持有 5000 多个 hash slot。hash slot 让 node 的增加和移除很简单，增加一个 master，就将其他 master 的 hash slot 移动部分过去，减少一个 master，就将它的 hash slot 移动到其他 master 上去。移动 hash slot 的成本是非常低的。客户端的 api，可以对指定的数据，让他们走同一个 hash slot，通过 <code>hash tag</code> 来实现。</p><p>任何一台机器宕机，另外两个节点，不影响的。因为 key 找的是 hash slot，不是机器。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/hash-slot.png" alt="hash-slot"></p><h3 id="redis-cluster-的高可用与主备切换原理"><a href="#redis-cluster-的高可用与主备切换原理" class="headerlink" title="redis cluster 的高可用与主备切换原理"></a>redis cluster 的高可用与主备切换原理</h3><p>redis cluster 的高可用的原理，几乎跟哨兵是类似的</p><h4 id="判断节点宕机"><a href="#判断节点宕机" class="headerlink" title="判断节点宕机"></a>判断节点宕机</h4><p>如果一个节点认为另外一个节点宕机，那么就是 <code>pfail</code>，<strong>主观宕机</strong>。如果多个节点都认为另外一个节点宕机了，那么就是 <code>fail</code>，<strong>客观宕机</strong>，跟哨兵的原理几乎一样，sdown，odown。</p><p>在 <code>cluster-node-timeout</code> 内，某个节点一直没有返回 <code>pong</code>，那么就被认为 <code>pfail</code>。</p><p>如果一个节点认为某个节点 <code>pfail</code> 了，那么会在 <code>gossip ping</code> 消息中，<code>ping</code> 给其他节点，如果<strong>超过半数</strong>的节点都认为 <code>pfail</code> 了，那么就会变成 <code>fail</code>。</p><h4 id="从节点过滤"><a href="#从节点过滤" class="headerlink" title="从节点过滤"></a>从节点过滤</h4><p>对宕机的 master node，从其所有的 slave node 中，选择一个切换成 master node。</p><p>检查每个 slave node 与 master node 断开连接的时间，如果超过了 <code>cluster-node-timeout * cluster-slave-validity-factor</code>，那么就<strong>没有资格</strong>切换成 <code>master</code>。</p><h4 id="从节点选举"><a href="#从节点选举" class="headerlink" title="从节点选举"></a>从节点选举</h4><p>每个从节点，都根据自己对 master 复制数据的 offset，来设置一个选举时间，offset 越大（复制数据越多）的从节点，选举时间越靠前，优先进行选举。</p><p>所有的 master node 开始 slave 选举投票，给要进行选举的 slave 进行投票，如果大部分 master node<code>（N/2 + 1）</code>都投票给了某个从节点，那么选举通过，那个从节点可以切换成 master。</p><p>从节点执行主备切换，从节点切换为主节点。</p><h4 id="与哨兵比较"><a href="#与哨兵比较" class="headerlink" title="与哨兵比较"></a>与哨兵比较</h4><p>整个流程跟哨兵相比，非常类似，所以说，redis cluster 功能强大，直接集成了 replication 和 sentinel 的功能。</p><h2 id="8-了解什么是-redis-的雪崩和穿透？redis-崩溃之后会怎么样？系统该如何应对这种情况？如何处理-redis-的穿透？"><a href="#8-了解什么是-redis-的雪崩和穿透？redis-崩溃之后会怎么样？系统该如何应对这种情况？如何处理-redis-的穿透？" class="headerlink" title="8.了解什么是 redis 的雪崩和穿透？redis 崩溃之后会怎么样？系统该如何应对这种情况？如何处理 redis 的穿透？"></a>8.了解什么是 redis 的雪崩和穿透？redis 崩溃之后会怎么样？系统该如何应对这种情况？如何处理 redis 的穿透？</h2><h3 id="面试题剖析-1"><a href="#面试题剖析-1" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>对于系统 A，假设每天高峰期每秒 5000 个请求，本来缓存在高峰期可以扛住每秒 4000 个请求，但是缓存机器意外发生了全盘宕机。缓存挂了，此时 1 秒 5000 个请求全部落数据库，数据库必然扛不住，它会报一下警，然后就挂了。此时，如果没用什么特别的方案来处理这个故障，DBA 很着急，重启数据库，但是数据库立马又被新的流量给打死了。</p><p>这就是缓存雪崩。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/redis-caching-avalanche.png" alt="redis-caching-avalanche"></p><p>大约在 3 年前，国内比较知名的一个互联网公司，曾因为缓存事故，导致雪崩，后台系统全部崩溃，事故从当天下午持续到晚上凌晨 3~4 点，公司损失了几千万。</p><p>缓存雪崩的事前事中事后的解决方案如下。</p><ul><li>事前：redis 高可用，主从+哨兵，redis cluster，避免全盘崩溃。</li><li>事中：本地 ehcache 缓存 + hystrix 限流&amp;降级，避免 MySQL 被打死。</li><li>事后：redis 持久化，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。</li></ul><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/redis-caching-avalanche-solution.png" alt="redis-caching-avalanche-solution"></p><p>用户发送一个请求，系统 A 收到请求后，先查本地 ehcache 缓存，如果没查到再查 redis。如果 ehcache 和 redis 都没有，再查数据库，将数据库中的结果，写入 ehcache 和 redis 中。</p><p>限流组件，可以设置每秒的请求，有多少能通过组件，剩余的未通过的请求，怎么办？<strong>走降级</strong>！可以返回一些默认的值，或者友情提示，或者空白的值。</p><p>好处：</p><ul><li>数据库绝对不会死，限流组件确保了每秒只有多少个请求能通过。</li><li>只要数据库不死，就是说，对用户来说，2/5 的请求都是可以被处理的。</li><li>只要有 2/5 的请求可以被处理，就意味着你的系统没死，对用户来说，可能就是点击几次刷不出来页面，但是多点几次，就可以刷出来一次。</li></ul><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>对于系统A，假设一秒 5000 个请求，结果其中 4000 个请求是黑客发出的恶意攻击。</p><p>黑客发出的那 4000 个攻击，缓存中查不到，每次你去数据库里查，也查不到。</p><p>举个栗子。数据库 id 是从 1 开始的，结果黑客发过来的请求 id 全部都是负数。这样的话，缓存中不会有，请求每次都“视缓存于无物”，直接查询数据库。这种恶意攻击场景的缓存穿透就会直接把数据库给打死。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/redis-caching-penetration.png" alt="redis-caching-penetration"></p><p>解决方式很简单，每次系统 A 从数据库中只要没查到，就写一个空值到缓存里去，比如 <code>set -999 UNKNOWN</code>。这样的话，下次便能走缓存了。</p><h2 id="9-如何保证缓存与数据库的双写一致性？"><a href="#9-如何保证缓存与数据库的双写一致性？" class="headerlink" title="9.如何保证缓存与数据库的双写一致性？"></a>9.如何保证缓存与数据库的双写一致性？</h2><h3 id="面试题剖析-2"><a href="#面试题剖析-2" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><p>一般来说，如果允许缓存可以稍微的跟数据库偶尔有不一致的情况，也就是说如果你的系统<strong>不是严格要求</strong> “缓存+数据库” 必须保持一致性的话，最好不要做这个方案，即：<strong>读请求和写请求串行化</strong>，串到一个<strong>内存队列</strong>里去。</p><p>串行化可以保证一定不会出现不一致的情况，但是它也会导致系统的吞吐量大幅度降低，用比正常情况下多几倍的机器去支撑线上的一个请求。</p><h3 id="Cache-Aside-Pattern"><a href="#Cache-Aside-Pattern" class="headerlink" title="Cache Aside Pattern"></a>Cache Aside Pattern</h3><p>最经典的缓存+数据库读写的模式，就是 Cache Aside Pattern。</p><ul><li>读的时候，先读缓存，缓存没有的话，就读数据库，然后取出数据后放入缓存，同时返回响应。</li><li>更新的时候，<strong>先更新数据库，然后再删除缓存</strong>。</li></ul><p><strong>为什么是删除缓存，而不是更新缓存？</strong></p><p>原因很简单，很多时候，在复杂点的缓存场景，缓存不单单是数据库中直接取出来的值。</p><p>比如可能更新了某个表的一个字段，然后其对应的缓存，是需要查询另外两个表的数据并进行运算，才能计算出缓存最新的值的。</p><p>另外更新缓存的代价有时候是很高的。是不是说，每次修改数据库的时候，都一定要将其对应的缓存更新一份？也许有的场景是这样，但是对于<strong>比较复杂的缓存数据计算的场景</strong>，就不是这样了。如果你频繁修改一个缓存涉及的多个表，缓存也频繁更新。但是问题在于，<strong>这个缓存到底会不会被频繁访问到？</strong></p><p>举个栗子，一个缓存涉及的表的字段，在 1 分钟内就修改了 20 次，或者是 100 次，那么缓存更新 20 次、100 次；但是这个缓存在 1 分钟内只被读取了 1 次，有<strong>大量的冷数据</strong>。实际上，如果你只是删除缓存的话，那么在 1 分钟内，这个缓存不过就重新计算一次而已，开销大幅度降低。<strong>用到缓存才去算缓存。</strong></p><p>其实删除缓存，而不是更新缓存，就是一个 lazy 计算的思想，不要每次都重新做复杂的计算，不管它会不会用到，而是让它到需要被使用的时候再重新计算。像 mybatis，hibernate，都有懒加载思想。查询一个部门，部门带了一个员工的 list，没有必要说每次查询部门，都里面的 1000 个员工的数据也同时查出来啊。80% 的情况，查这个部门，就只是要访问这个部门的信息就可以了。先查部门，同时要访问里面的员工，那么这个时候只有在你要访问里面的员工的时候，才会去数据库里面查询 1000 个员工。</p><h3 id="最初级的缓存不一致问题及解决方案"><a href="#最初级的缓存不一致问题及解决方案" class="headerlink" title="最初级的缓存不一致问题及解决方案"></a>最初级的缓存不一致问题及解决方案</h3><p>问题：先修改数据库，再删除缓存。如果删除缓存失败了，那么会导致数据库中是新数据，缓存中是旧数据，数据就出现了不一致。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/redis-junior-inconsistent.png" alt="redis-junior-inconsistent"></p><p>解决思路：先删除缓存，再修改数据库。如果数据库修改失败了，那么数据库中是旧数据，缓存中是空的，那么数据不会不一致。因为读的时候缓存没有，则读数据库中旧数据，然后更新到缓存中。</p><h3 id="比较复杂的数据不一致问题分析"><a href="#比较复杂的数据不一致问题分析" class="headerlink" title="比较复杂的数据不一致问题分析"></a>比较复杂的数据不一致问题分析</h3><p>数据发生了变更，先删除了缓存，然后要去修改数据库，此时还没修改。一个请求过来，去读缓存，发现缓存空了，去查询数据库，<strong>查到了修改前的旧数据</strong>，放到了缓存中。随后数据变更的程序完成了数据库的修改。完了，数据库和缓存中的数据不一样了…</p><p><strong>为什么上亿流量高并发场景下，缓存会出现这个问题？</strong></p><p>只有在对一个数据在并发的进行读写的时候，才可能会出现这种问题。其实如果说你的并发量很低的话，特别是读并发很低，每天访问量就 1 万次，那么很少的情况下，会出现刚才描述的那种不一致的场景。但是问题是，如果每天的是上亿的流量，每秒并发读是几万，每秒只要有数据更新的请求，就<strong>可能会出现上述的数据库+缓存不一致的情况</strong>。</p><p><strong>解决方案如下：</strong></p><p>更新数据的时候，根据<strong>数据的唯一标识</strong>，将操作路由之后，发送到一个 jvm 内部队列中。读取数据的时候，如果发现数据不在缓存中，那么将重新读取数据+更新缓存的操作，根据唯一标识路由之后，也发送同一个 jvm 内部队列中。</p><p>一个队列对应一个工作线程，每个工作线程<strong>串行</strong>拿到对应的操作，然后一条一条的执行。这样的话，一个数据变更的操作，先删除缓存，然后再去更新数据库，但是还没完成更新。此时如果一个读请求过来，读到了空的缓存，那么可以先将缓存更新的请求发送到队列中，此时会在队列中积压，然后同步等待缓存更新完成。</p><p>这里有一个<strong>优化点</strong>，一个队列中，其实<strong>多个更新缓存请求串在一起是没意义的</strong>，因此可以做过滤，如果发现队列中已经有一个更新缓存的请求了，那么就不用再放个更新请求操作进去了，直接等待前面的更新操作请求完成即可。</p><p>待那个队列对应的工作线程完成了上一个操作的数据库的修改之后，才会去执行下一个操作，也就是缓存更新的操作，此时会从数据库中读取最新的值，然后写入缓存中。</p><p>如果请求还在等待时间范围内，不断轮询发现可以取到值了，那么就直接返回；如果请求等待的时间超过一定时长，那么这一次直接从数据库中读取当前的旧值。</p><p>高并发的场景下，该解决方案要注意的问题：</p><ul><li>读请求长时阻塞</li></ul><p>由于读请求进行了非常轻度的异步化，所以一定要注意读超时的问题，每个读请求必须在超时时间范围内返回。</p><p>该解决方案，最大的风险点在于说，<strong>可能数据更新很频繁</strong>，导致队列中积压了大量更新操作在里面，然后<strong>读请求会发生大量的超时</strong>，最后导致大量的请求直接走数据库。务必通过一些模拟真实的测试，看看更新数据的频率是怎样的。</p><p>另外一点，因为一个队列中，可能会积压针对多个数据项的更新操作，因此需要根据自己的业务情况进行测试，可能需要<strong>部署多个服务</strong>，每个服务分摊一些数据的更新操作。如果一个内存队列里居然会挤压 100 个商品的库存修改操作，每隔库存修改操作要耗费 10ms 去完成，那么最后一个商品的读请求，可能等待 10 * 100 = 1000ms = 1s 后，才能得到数据，这个时候就导致<strong>读请求的长时阻塞</strong>。</p><p>一定要做根据实际业务系统的运行情况，去进行一些压力测试，和模拟线上环境，去看看最繁忙的时候，内存队列可能会挤压多少更新操作，可能会导致最后一个更新操作对应的读请求，会 hang 多少时间，如果读请求在 200ms 返回，如果你计算过后，哪怕是最繁忙的时候，积压 10 个更新操作，最多等待 200ms，那还可以的。</p><p><strong>如果一个内存队列中可能积压的更新操作特别多</strong>，那么你就要<strong>加机器</strong>，让每个机器上部署的服务实例处理更少的数据，那么每个内存队列中积压的更新操作就会越少。</p><p>其实根据之前的项目经验，一般来说，数据的写频率是很低的，因此实际上正常来说，在队列中积压的更新操作应该是很少的。像这种针对读高并发、读缓存架构的项目，一般来说写请求是非常少的，每秒的 QPS 能到几百就不错了。</p><p>我们来<strong>实际粗略测算一下</strong>。</p><p>如果一秒有 500 的写操作，如果分成 5 个时间片，每 200ms 就 100 个写操作，放到 20 个内存队列中，每个内存队列，可能就积压 5 个写操作。每个写操作性能测试后，一般是在 20ms 左右就完成，那么针对每个内存队列的数据的读请求，也就最多 hang 一会儿，200ms 以内肯定能返回了。</p><p>经过刚才简单的测算，我们知道，单机支撑的写 QPS 在几百是没问题的，如果写 QPS 扩大了 10 倍，那么就扩容机器，扩容 10 倍的机器，每个机器 20 个队列。</p><ul><li>读请求并发量过高</li></ul><p>这里还必须做好压力测试，确保恰巧碰上上述情况的时候，还有一个风险，就是突然间大量读请求会在几十毫秒的延时 hang 在服务上，看服务能不能扛的住，需要多少机器才能扛住最大的极限情况的峰值。</p><p>但是因为并不是所有的数据都在同一时间更新，缓存也不会同一时间失效，所以每次可能也就是少数数据的缓存失效了，然后那些数据对应的读请求过来，并发量应该也不会特别大。</p><ul><li>多服务实例部署的请求路由</li></ul><p>可能这个服务部署了多个实例，那么必须<strong>保证</strong>说，执行数据更新操作，以及执行缓存更新操作的请求，都通过 Nginx 服务器<strong>路由到相同的服务实例上</strong>。</p><p>比如说，对同一个商品的读写请求，全部路由到同一台机器上。可以自己去做服务间的按照某个请求参数的 hash 路由，也可以用 Nginx 的 hash 路由功能等等。</p><ul><li>热点商品的路由问题，导致请求的倾斜</li></ul><p>万一某个商品的读写请求特别高，全部打到相同的机器的相同的队列里面去了，可能会造成某台机器的压力过大。就是说，因为只有在商品数据更新的时候才会清空缓存，然后才会导致读写并发，所以其实要根据业务系统去看，如果更新频率不是太高的话，这个问题的影响并不是特别大，但是的确可能某些机器的负载会高一些。</p><h2 id="10-redis-的并发竞争问题是什么？如何解决这个问题？了解-redis-事务的-CAS-方案吗？"><a href="#10-redis-的并发竞争问题是什么？如何解决这个问题？了解-redis-事务的-CAS-方案吗？" class="headerlink" title="10.redis 的并发竞争问题是什么？如何解决这个问题？了解 redis 事务的 CAS 方案吗？"></a>10.redis 的并发竞争问题是什么？如何解决这个问题？了解 redis 事务的 CAS 方案吗？</h2><h3 id="考点分析-1"><a href="#考点分析-1" class="headerlink" title="考点分析"></a>考点分析</h3><p>这个也是线上非常常见的一个问题，就是<strong>多客户端同时并发写</strong>一个 key，可能本来应该先到的数据后到了，导致数据版本错了；或者是多客户端同时获取一个 key，修改值之后再写回去，只要顺序错了，数据就错了。</p><p>而且 redis 自己就有天然解决这个问题的 CAS 类的乐观锁方案。</p><h3 id="面试题剖析-3"><a href="#面试题剖析-3" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><p>某个时刻，多个系统实例都去更新某个 key。可以基于 zookeeper 实现分布式锁。每个系统通过 zookeeper 获取分布式锁，确保同一时间，只能有一个系统实例在操作某个 key，别人都不允许读和写。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/zookeeper-distributed-lock.png" alt="zookeeper-distributed-lock"></p><p>你要写入缓存的数据，都是从 mysql 里查出来的，都得写入 mysql 中，写入 mysql 中的时候必须保存一个时间戳，从 mysql 查出来的时候，时间戳也查出来。</p><p>每次要<strong>写之前，先判断</strong>一下当前这个 value 的时间戳是否比缓存里的 value 的时间戳要新。如果是的话，那么可以写，否则，就不能用旧的数据覆盖新的数据。</p><h2 id="11-生产环境中的-redis-是怎么部署的？"><a href="#11-生产环境中的-redis-是怎么部署的？" class="headerlink" title="11.生产环境中的 redis 是怎么部署的？"></a>11.生产环境中的 redis 是怎么部署的？</h2><h3 id="面试题剖析-4"><a href="#面试题剖析-4" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><p>redis cluster，10 台机器，5 台机器部署了 redis 主实例，另外 5 台机器部署了 redis 的从实例，每个主实例挂了一个从实例，5 个节点对外提供读写服务，每个节点的读写高峰qps可能可以达到每秒 5 万，5 台机器最多是 25 万读写请求/s。</p><p>机器是什么配置？32G 内存+ 8 核 CPU + 1T 磁盘，但是分配给 redis 进程的是10g内存，一般线上生产环境，redis 的内存尽量不要超过 10g，超过 10g 可能会有问题。</p><p>5 台机器对外提供读写，一共有 50g 内存。</p><p>因为每个主实例都挂了一个从实例，所以是高可用的，任何一个主实例宕机，都会自动故障迁移，redis 从实例会自动变成主实例继续提供读写服务。</p><p>你往内存里写的是什么数据？每条数据的大小是多少？商品数据，每条数据是 10kb。100 条数据是 1mb，10 万条数据是 1g。常驻内存的是 200 万条商品数据，占用内存是 20g，仅仅不到总内存的 50%。目前高峰期每秒就是 3500 左右的请求量。</p><p>其实大型的公司，会有基础架构的 team 负责缓存集群的运维。</p><p><code>关注我！这里只有干货！</code><br>本文原创地址，我的博客：<a href="https://jsbintask.cn/2019/02/18/interview/interview-redis-2/">https://jsbintask.cn/2019/02/18/interview/interview-redis-2/</a>，转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;接上一章&lt;a href=&quot;https://jsbintask.cn/2019/02/18/interview/interview-redis-1/&quot;&gt;redis面试必问（上）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;7-redis-集群模式的工作原理能说一下么？在集群模式下，redis-的-key-是如何寻址的？分布式寻址都有哪些算法？了解一致性-hash-算法吗？&quot;&gt;&lt;a href=&quot;#7-redis-集群模式的工作原理能说一下么？在集群模式下，redis-的-key-是如何寻址的？分布式寻址都有哪些算法？了解一致性-hash-算法吗？&quot; class=&quot;headerlink&quot; title=&quot;7.redis 集群模式的工作原理能说一下么？在集群模式下，redis 的 key 是如何寻址的？分布式寻址都有哪些算法？了解一致性 hash 算法吗？&quot;&gt;&lt;/a&gt;7.redis 集群模式的工作原理能说一下么？在集群模式下，redis 的 key 是如何寻址的？分布式寻址都有哪些算法？了解一致性 hash 算法吗？&lt;/h2&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://jsbintask.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="redis" scheme="https://jsbintask.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis面试必问（上）</title>
    <link href="https://jsbintask.cn/2019/02/18/interview/interview-redis-1/"/>
    <id>https://jsbintask.cn/2019/02/18/interview/interview-redis-1/</id>
    <published>2019-02-18T04:05:00.000Z</published>
    <updated>2019-02-18T04:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>`<a href="https://jsbintask.cn/2019/02/18/interview/interview-redis-2/">redis面试必问（下）：</a></p><h2 id="1-项目中缓存是如何使用的？为什么要用缓存？缓存使用不当会造成什么后果？"><a href="#1-项目中缓存是如何使用的？为什么要用缓存？缓存使用不当会造成什么后果？" class="headerlink" title="1.项目中缓存是如何使用的？为什么要用缓存？缓存使用不当会造成什么后果？"></a>1.项目中缓存是如何使用的？为什么要用缓存？缓存使用不当会造成什么后果？</h2><a id="more"></a><h3 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><h3 id="为什么要用缓存？"><a href="#为什么要用缓存？" class="headerlink" title="为什么要用缓存？"></a>为什么要用缓存？</h3><p>用缓存，主要有两个用途：<strong>高性能</strong>、<strong>高并发</strong>。</p><h4 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h4><p>假设这么个场景，你有个操作，一个请求过来，吭哧吭哧你各种乱七八糟操作 mysql，半天查出来一个结果，耗时 600ms。但是这个结果可能接下来几个小时都不会变了，或者变了也可以不用立即反馈给用户。那么此时咋办？</p><p>缓存啊，折腾 600ms 查出来的结果，扔缓存里，一个 key 对应一个 value，下次再有人查，别走 mysql 折腾 600ms 了，直接从缓存里，通过一个 key 查出来一个 value，2ms 搞定。性能提升 300 倍。</p><p>就是说对于一些需要复杂操作耗时查出来的结果，且确定后面不怎么变化，但是有很多读请求，那么直接将查询出来的结果放在缓存中，后面直接读缓存就好。</p><h4 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h4><p>mysql 这么重的数据库，压根儿设计不是让你玩儿高并发的，虽然也可以玩儿，但是天然支持不好。mysql 单机支撑到 <code>2000QPS</code> 也开始容易报警了。</p><p>所以要是你有个系统，高峰期一秒钟过来的请求有 1万，那一个 mysql 单机绝对会死掉。你这个时候就只能上缓存，把很多数据放缓存，别放 mysql。缓存功能简单，说白了就是 <code>key-value</code> 式操作，单机支撑的并发量轻松一秒几万十几万，支撑高并发 so easy。单机承载并发量是 mysql 单机的几十倍。</p><blockquote><p>缓存是走内存的，内存天然就支撑高并发。</p></blockquote><h2 id="2-redis-和-memcached-有什么区别？redis-的线程模型是什么？为什么-redis-单线程却能支撑高并发？"><a href="#2-redis-和-memcached-有什么区别？redis-的线程模型是什么？为什么-redis-单线程却能支撑高并发？" class="headerlink" title="2.redis 和 memcached 有什么区别？redis 的线程模型是什么？为什么 redis 单线程却能支撑高并发？"></a>2.redis 和 memcached 有什么区别？redis 的线程模型是什么？为什么 redis 单线程却能支撑高并发？</h2><h3 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h3><p>这个是问 redis 的时候，最基本的问题吧，redis 最基本的一个内部原理和特点，就是 redis 实际上是个<strong>单线程工作模型</strong>，你要是这个都不知道，那后面玩儿 redis 的时候，出了问题岂不是什么都不知道？</p><p>还有可能面试官会问问你 redis 和 memcached 的区别，但是 memcached 是早些年各大互联网公司常用的缓存方案，但是现在近几年基本都是 redis，没什么公司用 memcached 了。</p><h3 id="面试题剖析-1"><a href="#面试题剖析-1" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><h3 id="redis-和-memcached-有啥区别？"><a href="#redis-和-memcached-有啥区别？" class="headerlink" title="redis 和 memcached 有啥区别？"></a>redis 和 memcached 有啥区别？</h3><h4 id="redis-支持复杂的数据结构"><a href="#redis-支持复杂的数据结构" class="headerlink" title="redis 支持复杂的数据结构"></a>redis 支持复杂的数据结构</h4><p>redis 相比 memcached 来说，拥有更多的数据结构，能支持更丰富的数据操作。如果需要缓存能够支持更复杂的结构和操作， redis 会是不错的选择。</p><h4 id="redis-原生支持集群模式"><a href="#redis-原生支持集群模式" class="headerlink" title="redis 原生支持集群模式"></a>redis 原生支持集群模式</h4><p>在 redis3.x 版本中，便能支持 cluster 模式，而 memcached 没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据。</p><h4 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h4><p>由于 redis 只使用单核，而 memcached 可以使用多核，所以平均每一个核上 redis 在存储小数据时比 memcached 性能更高。而在 100k 以上的数据中，memcached 性能要高于 redis，虽然 redis 最近也在存储大数据的性能上进行优化，但是比起 memcached，还是稍有逊色。</p><h3 id="redis-的线程模型"><a href="#redis-的线程模型" class="headerlink" title="redis 的线程模型"></a>redis 的线程模型</h3><p>redis 内部使用文件事件处理器 <code>file event handler</code>，这个文件事件处理器是单线程的，所以 redis 才叫做单线程的模型。它采用 IO 多路复用机制同时监听多个 socket，根据 socket 上的事件来选择对应的事件处理器进行处理。</p><p>文件事件处理器的结构包含 4 个部分：</p><ul><li>多个 socket</li><li>IO 多路复用程序</li><li>文件事件分派器</li><li>事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）</li></ul><p>多个 socket 可能会并发产生不同的操作，每个操作对应不同的文件事件，但是 IO 多路复用程序会监听多个 socket，会将 socket 产生的事件放入队列中排队，事件分派器每次从队列中取出一个事件，把该事件交给对应的事件处理器进行处理。</p><p>来看客户端与 redis 的一次通信过程：</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/redis-single-thread-model.png" alt="redis-single-thread-model"></p><p>客户端 socket01 向 redis 的 server socket 请求建立连接，此时 server socket 会产生一个 <code>AE_READABLE</code> 事件，IO 多路复用程序监听到 server socket 产生的事件后，将该事件压入队列中。文件事件分派器从队列中获取该事件，交给<strong>连接应答处理器</strong>。连接应答处理器会创建一个能与客户端通信的 socket01，并将该 socket01 的 <code>AE_READABLE</code> 事件与命令请求处理器关联。</p><p>假设此时客户端发送了一个 <code>set key value</code> 请求，此时 redis 中的 socket01 会产生 <code>AE_READABLE</code> 事件，IO 多路复用程序将事件压入队列，此时事件分派器从队列中获取到该事件，由于前面 socket01 的 <code>AE_READABLE</code> 事件已经与命令请求处理器关联，因此事件分派器将事件交给命令请求处理器来处理。命令请求处理器读取 socket01 的 <code>key value</code> 并在自己内存中完成 <code>key value</code> 的设置。操作完成后，它会将 socket01 的 <code>AE_WRITABLE</code> 事件与命令回复处理器关联。</p><p>如果此时客户端准备好接收返回结果了，那么 redis 中的 socket01 会产生一个 <code>AE_WRITABLE</code> 事件，同样压入队列中，事件分派器找到相关联的命令回复处理器，由命令回复处理器对 socket01 输入本次操作的一个结果，比如 <code>ok</code>，之后解除 socket01 的 <code>AE_WRITABLE</code> 事件与命令回复处理器的关联。</p><p>这样便完成了一次通信。</p><h3 id="为啥-redis-单线程模型也能效率这么高？"><a href="#为啥-redis-单线程模型也能效率这么高？" class="headerlink" title="为啥 redis 单线程模型也能效率这么高？"></a>为啥 redis 单线程模型也能效率这么高？</h3><ul><li>纯内存操作</li><li>核心是基于非阻塞的 IO 多路复用机制</li><li>单线程反而避免了多线程的频繁上下文切换问题</li></ul><h2 id="3-redis-都有哪些数据类型？分别在哪些场景下使用比较合适？"><a href="#3-redis-都有哪些数据类型？分别在哪些场景下使用比较合适？" class="headerlink" title="3.redis 都有哪些数据类型？分别在哪些场景下使用比较合适？"></a>3.redis 都有哪些数据类型？分别在哪些场景下使用比较合适？</h2><h3 id="面试题剖析-2"><a href="#面试题剖析-2" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><p>redis 主要有以下几种数据类型：</p><ul><li>string</li><li>hash</li><li>list</li><li>set</li><li>sorted set</li></ul><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>这是最简单的类型，就是普通的 set 和 get，做简单的 KV 缓存。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> college szu</span><br></pre></td></tr></table></figure></p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>这个是类似 map 的一种结构，这个一般就是可以将结构化的数据，比如一个对象（前提是<strong>这个对象没嵌套其他的对象</strong>）给缓存在 redis 里，然后每次读写缓存的时候，可以就操作 hash 里的<strong>某个字段</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hset person name bingo</span><br><span class="line">hset person age 20</span><br><span class="line">hset person id 1</span><br><span class="line">hget person name</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;</span><br><span class="line">    "name": "bingo",</span><br><span class="line">    "age": 20,</span><br><span class="line">    "id": 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>list 是有序列表，这个可以玩儿出很多花样。</p><p>比如可以通过 list 存储一些列表型的数据结构，类似粉丝列表、文章的评论列表之类的东西。</p><p>比如可以通过 lrange 命令，读取某个闭区间内的元素，可以基于 list 实现分页查询，这个是很棒的一个功能，基于 redis 实现简单的高性能分页，可以做类似微博那种下拉不断分页的东西，性能高，就一页一页走。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0开始位置，-1结束位置，结束位置为-1时，表示列表的最后一个位置，即查看所有。</span></span><br><span class="line">lrange mylist 0 -1</span><br></pre></td></tr></table></figure></p><p>比如可以搞个简单的消息队列，从 list 头怼进去，从 list 尾巴那里弄出来。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lpush mylist 1</span><br><span class="line">lpush mylist 2</span><br><span class="line">lpush mylist 3 4 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">rpop mylist</span><br></pre></td></tr></table></figure></p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set 是无序集合，自动去重。</p><p>直接基于 set 将系统里需要去重的数据扔进去，自动就给去重了，如果你需要对一些数据进行快速的全局去重，你当然也可以基于 jvm 内存里的 HashSet 进行去重，但是如果你的某个系统部署在多台机器上呢？得基于 redis 进行全局的 set 去重。</p><p>可以基于 set 玩儿交集、并集、差集的操作，比如交集吧，可以把两个人的粉丝列表整一个交集，看看俩人的共同好友是谁？对吧。</p><p>把两个大 V 的粉丝都放在两个 set 中，对两个 set 做交集。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-------操作一个set-------</span></span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">sadd mySet 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看全部元素</span></span><br><span class="line">smembers mySet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否包含某个值</span></span><br><span class="line">sismember mySet 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某个/些元素</span></span><br><span class="line">srem mySet 1</span><br><span class="line">srem mySet 2 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看元素个数</span></span><br><span class="line">scard mySet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机删除一个元素</span></span><br><span class="line">spop mySet</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------操作多个set-------</span></span><br><span class="line"><span class="comment"># 将一个set的元素移动到另外一个set</span></span><br><span class="line">smove yourSet mySet 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求两set的交集</span></span><br><span class="line">sinter yourSet mySet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求两set的并集</span></span><br><span class="line">sunion yourSet mySet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求在yourSet中而不在mySet中的元素</span></span><br><span class="line">sdiff yourSet mySet</span><br></pre></td></tr></table></figure></p><h3 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted set"></a>sorted set</h3><p>sorted set 是排序的 set，去重但可以排序，写进去的时候给一个分数，自动根据分数排序。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">zadd board 85 zhangsan</span><br><span class="line">zadd board 72 lisi</span><br><span class="line">zadd board 96 wangwu</span><br><span class="line">zadd board 63 zhaoliu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取排名前三的用户（默认是升序，所以需要 rev 改为降序）</span></span><br><span class="line">zrevrange board 0 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取某用户的排名</span></span><br><span class="line">zrank board zhaoliu</span><br></pre></td></tr></table></figure></p><h2 id="4-redis-的过期策略都有哪些？内存淘汰机制都有哪些？手写一下-LRU-代码实现？"><a href="#4-redis-的过期策略都有哪些？内存淘汰机制都有哪些？手写一下-LRU-代码实现？" class="headerlink" title="4.redis 的过期策略都有哪些？内存淘汰机制都有哪些？手写一下 LRU 代码实现？"></a>4.redis 的过期策略都有哪些？内存淘汰机制都有哪些？手写一下 LRU 代码实现？</h2><h2 id="考点分析-1"><a href="#考点分析-1" class="headerlink" title="考点分析"></a>考点分析</h2><p>如果你连这个问题都不知道，上来就懵了，回答不出来，那线上你写代码的时候，想当然的认为写进 redis 的数据就一定会存在，后面导致系统各种 bug，谁来负责？</p><p>常见的有两个问题：</p><ul><li>往 redis 写入的数据怎么没了？</li></ul><p>可能有同学会遇到，在生产环境的 redis 经常会丢掉一些数据，写进去了，过一会儿可能就没了。我的天，同学，你问这个问题就说明 redis 你就没用对啊。redis 是缓存，你给当存储了是吧？</p><p>啥叫缓存？用内存当缓存。内存是无限的吗，内存是很宝贵而且是有限的，磁盘是廉价而且是大量的。可能一台机器就几十个 G 的内存，但是可以有几个 T 的硬盘空间。redis 主要是基于内存来进行高性能、高并发的读写操作的。</p><p>那既然内存是有限的，比如 redis 就只能用 10G，你要是往里面写了 20G 的数据，会咋办？当然会干掉 10G 的数据，然后就保留 10G 的数据了。那干掉哪些数据？保留哪些数据？当然是干掉不常用的数据，保留常用的数据了。</p><ul><li>数据明明过期了，怎么还占用着内存？</li></ul><p>这是由 redis 的过期策略来决定。</p><h3 id="面试题剖析-3"><a href="#面试题剖析-3" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><h3 id="redis-过期策略"><a href="#redis-过期策略" class="headerlink" title="redis 过期策略"></a>redis 过期策略</h3><p>redis 过期策略是：<strong>定期删除+惰性删除</strong>。</p><p>所谓<strong>定期删除</strong>，指的是 redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 key，检查其是否过期，如果过期就删除。</p><p>假设 redis 里放了 10w 个 key，都设置了过期时间，你每隔几百毫秒，就检查 10w 个 key，那 redis 基本上就死了，cpu 负载会很高的，消耗在你的检查过期 key 上了。注意，这里可不是每隔 100ms 就遍历所有的设置过期时间的 key，那样就是一场性能上的<strong>灾难</strong>。实际上 redis 是每隔 100ms <strong>随机抽取</strong>一些 key 来检查和删除的。</p><p>但是问题是，定期删除可能会导致很多过期 key 到了时间并没有被删除掉，那咋整呢？所以就是惰性删除了。这就是说，在你获取某个 key 的时候，redis 会检查一下 ，这个 key 如果设置了过期时间那么是否过期了？如果过期了此时就会删除，不会给你返回任何东西。</p><blockquote><p>获取 key 的时候，如果此时 key 已经过期，就删除，不会返回任何东西。</p></blockquote><p>但是实际上这还是有问题的，如果定期删除漏掉了很多过期 key，然后你也没及时去查，也就没走惰性删除，此时会怎么样？如果大量过期 key 堆积在内存里，导致 redis 内存块耗尽了，咋整？</p><p>答案是：<strong>走内存淘汰机制</strong>。</p><h3 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h3><p>redis 内存淘汰机制有以下几个：</p><ul><li>noeviction: 当内存不足以容纳新写入数据时，新写入操作会报错，这个一般没人用吧，实在是太恶心了。</li><li><strong>allkeys-lru</strong>：当内存不足以容纳新写入数据时，在<strong>键空间</strong>中，移除最近最少使用的 key（这个是<strong>最常用</strong>的）。</li><li>allkeys-random：当内存不足以容纳新写入数据时，在<strong>键空间</strong>中，随机移除某个 key，这个一般没人用吧，为啥要随机，肯定是把最近最少使用的 key 给干掉啊。</li><li>volatile-lru：当内存不足以容纳新写入数据时，在<strong>设置了过期时间的键空间</strong>中，移除最近最少使用的 key（这个一般不太合适）。</li><li>volatile-random：当内存不足以容纳新写入数据时，在<strong>设置了过期时间的键空间</strong>中，<strong>随机移除</strong>某个 key。</li><li>volatile-ttl：当内存不足以容纳新写入数据时，在<strong>设置了过期时间的键空间</strong>中，有<strong>更早过期时间</strong>的 key 优先移除。</li></ul><h3 id="手写一个-LRU-算法"><a href="#手写一个-LRU-算法" class="headerlink" title="手写一个 LRU 算法"></a>手写一个 LRU 算法</h3><p>你可以现场手写最原始的 LRU 算法，那个代码量太大了，似乎不太现实。</p><p>不求自己纯手工从底层开始打造出自己的 LRU，但是起码要知道如何利用已有的 JDK 数据结构实现一个 Java 版的 LRU。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> CACHE_SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传递进来最多能缓存多少数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheSize 缓存大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> cacheSize)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// true 表示让 linkedHashMap 按照访问顺序来进行排序，最近访问的放在头部，最老访问的放在尾部。</span></span><br><span class="line">        <span class="keyword">super</span>((<span class="keyword">int</span>) Math.ceil(cacheSize / <span class="number">0.75</span>) + <span class="number">1</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">        CACHE_SIZE = cacheSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当 map中的数据量大于指定的缓存个数的时候，就自动删除最老的数据。</span></span><br><span class="line">        <span class="keyword">return</span> size() &gt; CACHE_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-如何保证-redis-的高并发和高可用？redis-的主从复制原理能介绍一下么？redis-的哨兵原理能介绍一下么？"><a href="#5-如何保证-redis-的高并发和高可用？redis-的主从复制原理能介绍一下么？redis-的哨兵原理能介绍一下么？" class="headerlink" title="5.如何保证 redis 的高并发和高可用？redis 的主从复制原理能介绍一下么？redis 的哨兵原理能介绍一下么？"></a>5.如何保证 redis 的高并发和高可用？redis 的主从复制原理能介绍一下么？redis 的哨兵原理能介绍一下么？</h2><h3 id="考点分析-2"><a href="#考点分析-2" class="headerlink" title="考点分析"></a>考点分析</h3><p>其实问这个问题，主要是考考你，redis 单机能承载多高并发？如果单机扛不住如何扩容扛更多的并发？redis 会不会挂？既然 redis 会挂那怎么保证 redis 是高可用的？</p><p>其实针对的都是项目中你肯定要考虑的一些问题，如果你没考虑过，那确实你对生产系统中的问题思考太少。</p><h3 id="面试题剖析-4"><a href="#面试题剖析-4" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><p>如果你用 redis 缓存技术的话，肯定要考虑如何用 redis 来加多台机器，保证 redis 是高并发的，还有就是如何让 redis 保证自己不是挂掉以后就直接死掉了，即 redis 高可用。</p><p>redis 实现<strong>高并发</strong>主要依靠<strong>主从架构</strong>，一主多从，一般来说，很多项目其实就足够了，单主用来写入数据，单机几万 QPS，多从用来查询数据，多个从实例可以提供每秒 10w 的 QPS。</p><p>如果想要在实现高并发的同时，容纳大量的数据，那么就需要 redis 集群，使用 redis 集群之后，可以提供每秒几十万的读写并发。</p><p>redis 高可用，如果是做主从架构部署，那么加上哨兵就可以了，就可以实现，任何一个实例宕机，可以进行主备切换。</p><h2 id="6-redis-的持久化有哪几种方式？不同的持久化机制都有什么优缺点？持久化机制具体底层是如何实现的？"><a href="#6-redis-的持久化有哪几种方式？不同的持久化机制都有什么优缺点？持久化机制具体底层是如何实现的？" class="headerlink" title="6.redis 的持久化有哪几种方式？不同的持久化机制都有什么优缺点？持久化机制具体底层是如何实现的？"></a>6.redis 的持久化有哪几种方式？不同的持久化机制都有什么优缺点？持久化机制具体底层是如何实现的？</h2><h3 id="考点分析-3"><a href="#考点分析-3" class="headerlink" title="考点分析"></a>考点分析</h3><p>redis 如果仅仅只是将数据缓存在内存里面，如果 redis 宕机了再重启，内存里的数据就全部都弄丢了啊。你必须得用 redis 的持久化机制，将数据写入内存的同时，异步的慢慢的将数据写入磁盘文件里，进行持久化。</p><p>如果 redis 宕机重启，自动从磁盘上加载之前持久化的一些数据就可以了，也许会丢失少许数据，但是至少不会将所有数据都弄丢。</p><p>这个其实一样，针对的都是 redis 的生产环境可能遇到的一些问题，就是 redis 要是挂了再重启，内存里的数据不就全丢了？能不能重启的时候把数据给恢复了？</p><h3 id="面试题剖析-5"><a href="#面试题剖析-5" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><p>持久化主要是做灾难恢复、数据恢复，也可以归类到高可用的一个环节中去，比如你 redis 整个挂了，然后 redis 就不可用了，你要做的事情就是让 redis 变得可用，尽快变得可用。</p><p>重启 redis，尽快让它堆外提供服务，如果没做数据备份，这时候 redis 启动了，也不可用啊，数据都没了。</p><p>很可能说，大量的请求过来，缓存全部无法命中，在 redis 里根本找不到数据，这个时候就死定了，出现<strong>缓存雪崩</strong>问题。所有请求没有在 redis 命中，就会去 mysql 数据库这种数据源头中去找，一下子 mysql 承接高并发，然后就挂了…</p><p>如果你把 redis 持久化做好，备份和恢复方案做到企业级的程度，那么即使你的 redis 故障了，也可以通过备份数据，快速恢复，一旦恢复立即对外提供服务。</p><h3 id="redis-持久化的两种方式"><a href="#redis-持久化的两种方式" class="headerlink" title="redis 持久化的两种方式"></a>redis 持久化的两种方式</h3><ul><li>RDB：RDB 持久化机制，是对 redis 中的数据执行<strong>周期性</strong>的持久化。</li><li>AOF：AOF 机制对每条写入命令作为日志，以 <code>append-only</code> 的模式写入一个日志文件中，在 redis 重启的时候，可以通过<strong>回放</strong> AOF 日志中的写入指令来重新构建整个数据集。</li></ul><p>通过 RDB 或 AOF，都可以将 redis 内存中的数据给持久化到磁盘上面来，然后可以将这些数据备份到别的地方去，比如说阿里云等云服务。</p><p>如果 redis 挂了，服务器上的内存和磁盘上的数据都丢了，可以从云服务上拷贝回来之前的数据，放到指定的目录中，然后重新启动 redis，redis 就会自动根据持久化数据文件中的数据，去恢复内存中的数据，继续对外提供服务。</p><p>如果同时使用 RDB 和 AOF 两种持久化机制，那么在 redis 重启的时候，会使用 <strong>AOF</strong> 来重新构建数据，因为 AOF 中的<strong>数据更加完整</strong>。</p><h4 id="RDB-优缺点"><a href="#RDB-优缺点" class="headerlink" title="RDB 优缺点"></a>RDB 优缺点</h4><ul><li>RDB会生成多个数据文件，每个数据文件都代表了某一个时刻中 redis 的数据，这种多个数据文件的方式，<strong>非常适合做冷备</strong>，可以将这种完整的数据文件发送到一些远程的安全存储上去，比如说 Amazon 的 S3 云服务上去，在国内可以是阿里云的 ODPS 分布式存储上，以预定好的备份策略来定期备份redis中的数据。</li><li>RDB 对 redis 对外提供的读写服务，影响非常小，可以让 redis <strong>保持高性能</strong>，因为 redis 主进程只需要 fork 一个子进程，让子进程执行磁盘 IO 操作来进行 RDB 持久化即可。</li><li><p>相对于 AOF 持久化机制来说，直接基于 RDB 数据文件来重启和恢复 redis 进程，更加快速。</p></li><li><p>如果想要在 redis 故障时，尽可能少的丢失数据，那么 RDB 没有 AOF 好。一般来说，RDB 数据快照文件，都是每隔 5 分钟，或者更长时间生成一次，这个时候就得接受一旦 redis 进程宕机，那么会丢失最近 5 分钟的数据。</p></li><li>RDB 每次在 fork 子进程来执行 RDB 快照数据文件生成的时候，如果数据文件特别大，可能会导致对客户端提供的服务暂停数毫秒，或者甚至数秒。</li></ul><h4 id="AOF-优缺点"><a href="#AOF-优缺点" class="headerlink" title="AOF 优缺点"></a>AOF 优缺点</h4><ul><li>AOF 可以更好的保护数据不丢失，一般 AOF 会每隔 1 秒，通过一个后台线程执行一次<code>fsync</code>操作，最多丢失 1 秒钟的数据。</li><li>AOF 日志文件以 <code>append-only</code> 模式写入，所以没有任何磁盘寻址的开销，写入性能非常高，而且文件不容易破损，即使文件尾部破损，也很容易修复。</li><li>AOF 日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。因为在 <code>rewrite</code> log 的时候，会对其中的指导进行压缩，创建出一份需要恢复数据的最小日志出来。再创建新日志文件的时候，老的日志文件还是照常写入。当新的 merge 后的日志文件 ready 的时候，再交换新老日志文件即可。</li><li>AOF 日志文件的命令通过非常可读的方式进行记录，这个特性非常<strong>适合做灾难性的误删除的紧急恢复</strong>。比如某人不小心用 <code>flushall</code> 命令清空了所有数据，只要这个时候后台 <code>rewrite</code> 还没有发生，那么就可以立即拷贝 AOF 文件，将最后一条 <code>flushall</code> 命令给删了，然后再将该 <code>AOF</code> 文件放回去，就可以通过恢复机制，自动恢复所有数据。</li><li>对于同一份数据来说，AOF 日志文件通常比 RDB 数据快照文件更大。</li><li>AOF 开启后，支持的写 QPS 会比 RDB 支持的写 QPS 低，因为 AOF 一般会配置成每秒 <code>fsync</code> 一次日志文件，当然，每秒一次 <code>fsync</code>，性能也还是很高的。（如果实时写入，那么 QPS 会大降，redis 性能会大大降低）</li><li>以前 AOF 发生过 bug，就是通过 AOF 记录的日志，进行数据恢复的时候，没有恢复一模一样的数据出来。所以说，类似 AOF 这种较为复杂的基于命令日志/merge/回放的方式，比基于 RDB 每次持久化一份完整的数据快照文件的方式，更加脆弱一些，容易有 bug。不过 AOF 就是为了避免 rewrite 过程导致的 bug，因此每次 rewrite 并不是基于旧的指令日志进行 merge 的，而是<strong>基于当时内存中的数据进行指令的重新构建</strong>，这样健壮性会好很多。</li></ul><h3 id="RDB和AOF到底该如何选择"><a href="#RDB和AOF到底该如何选择" class="headerlink" title="RDB和AOF到底该如何选择"></a>RDB和AOF到底该如何选择</h3><ul><li>不要仅仅使用 RDB，因为那样会导致你丢失很多数据；</li><li>也不要仅仅使用 AOF，因为那样有两个问题：第一，你通过 AOF 做冷备，没有 RDB 做冷备来的恢复速度更快；第二，RDB 每次简单粗暴生成数据快照，更加健壮，可以避免 AOF 这种复杂的备份和恢复机制的 bug；</li><li>redis 支持同时开启开启两种持久化方式，我们可以综合使用 AOF 和 RDB 两种持久化机制，用 AOF 来保证数据不丢失，作为数据恢复的第一选择; 用 RDB 来做不同程度的冷备，在 AOF 文件都丢失或损坏不可用的时候，还可以使用 RDB 来进行快速的数据恢复。</li></ul><p><code>关注我！这里只有干货！</code><br>本文原创地址，我的博客：<a href="https://jsbintask.cn/2019/02/18/interview/interview-redis-1/">https://jsbintask.cn/2019/02/18/interview/interview-redis-1/</a>，转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;`&lt;a href=&quot;https://jsbintask.cn/2019/02/18/interview/interview-redis-2/&quot;&gt;redis面试必问（下）：&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-项目中缓存是如何使用的？为什么要用缓存？缓存使用不当会造成什么后果？&quot;&gt;&lt;a href=&quot;#1-项目中缓存是如何使用的？为什么要用缓存？缓存使用不当会造成什么后果？&quot; class=&quot;headerlink&quot; title=&quot;1.项目中缓存是如何使用的？为什么要用缓存？缓存使用不当会造成什么后果？&quot;&gt;&lt;/a&gt;1.项目中缓存是如何使用的？为什么要用缓存？缓存使用不当会造成什么后果？&lt;/h2&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://jsbintask.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="redis" scheme="https://jsbintask.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>mysql面试题：如何实现 MySQL 的读写分离？MySQL 主从复制原理是啥？如何解决 MySQL 主从同步的延时问题？</title>
    <link href="https://jsbintask.cn/2019/02/17/interview/interview-high-concurrency-design/"/>
    <id>https://jsbintask.cn/2019/02/17/interview/interview-high-concurrency-design/</id>
    <published>2019-02-17T11:05:00.000Z</published>
    <updated>2019-02-17T11:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如何设计一个高并发系统？<br><a id="more"></a></p><h2 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h2><p>说实话，如果面试官问你这个题目，那么你必须要使出全身吃奶劲了。为啥？因为你没看到现在很多公司招聘的 JD 里都是说啥，有高并发就经验者优先。</p><p>如果你确实有真才实学，在互联网公司里干过高并发系统，那你确实拿 offer 基本如探囊取物，没啥问题。面试官也绝对不会这样来问你，否则他就是蠢。</p><p>假设你在某知名电商公司干过高并发系统，用户上亿，一天流量几十亿，高峰期并发量上万，甚至是十万。那么人家一定会仔细盘问你的系统架构，你们系统啥架构？怎么部署的？部署了多少台机器？缓存咋用的？MQ 咋用的？数据库咋用的？就是深挖你到底是如何扛住高并发的。</p><p>因为真正干过高并发的人一定知道，脱离了业务的系统架构都是在纸上谈兵，真正在复杂业务场景而且还高并发的时候，那系统架构一定不是那么简单的，用个 redis，用 mq 就能搞定？当然不是，真实的系统架构搭配上业务之后，会比这种简单的所谓“高并发架构”要复杂很多倍。</p><p>如果有面试官问你个问题说，如何设计一个高并发系统？那么不好意思，<strong>一定是因为你实际上没干过高并发系统</strong>。面试官看你简历就没啥出彩的，感觉就不咋地，所以就会问问你，如何设计一个高并发系统？其实说白了本质就是看看你有没有自己研究过，有没有一定的知识积累。</p><p>最好的当然是招聘个真正干过高并发的哥儿们咯，但是这种哥儿们人数稀缺，不好招。所以可能次一点的就是招一个自己研究过的哥儿们，总比招一个傻也不会的哥儿们好吧！</p><p>所以这个时候你必须得做一把个人秀了，秀出你所有关于高并发的知识！</p><h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><p>其实所谓的高并发，如果你要理解这个问题呢，其实就得从高并发的根源出发，为啥会有高并发？为啥高并发就很牛逼？</p><p>我说的浅显一点，很简单，就是因为刚开始系统都是连接数据库的，但是要知道数据库支撑到每秒并发两三千的时候，基本就快完了。所以才有说，很多公司，刚开始干的时候，技术比较 low，结果业务发展太快，有的时候系统扛不住压力就挂了。</p><p>当然会挂了，凭什么不挂？你数据库如果瞬间承载每秒 5000/8000，甚至上万的并发，一定会宕机，因为比如 mysql 就压根儿扛不住这么高的并发量。</p><p>所以为啥高并发牛逼？就是因为现在用互联网的人越来越多，很多app、网站、系统承载的都是高并发请求，可能高峰期每秒并发量几千，很正常的。如果是什么双十一之类的，每秒并发几万几十万都有可能。</p><p>那么如此之高的并发量，加上原本就如此之复杂的业务，咋玩儿？真正厉害的，一定是在复杂业务系统里玩儿过高并发架构的人，但是你没有，那么我给你说一下你该怎么回答这个问题：</p><p>可以分为以下 6 点：</p><ul><li>系统拆分</li><li>缓存</li><li>MQ</li><li>分库分表</li><li>读写分离</li><li>ElasticSearch</li></ul><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/high-concurrency-system-design.png" alt="high-concurrency-system-design"></p><h3 id="系统拆分"><a href="#系统拆分" class="headerlink" title="系统拆分"></a>系统拆分</h3><p>将一个系统拆分为多个子系统，用 dubbo 来搞。然后每个系统连一个数据库，这样本来就一个库，现在多个数据库，不也可以扛高并发么。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存，必须得用缓存。大部分的高并发场景，都是<strong>读多写少</strong>，那你完全可以在数据库和缓存里都写一份，然后读的时候大量走缓存不就得了。毕竟人家 redis 轻轻松松单机几万的并发。所以你可以考虑考虑你的项目里，那些承载主要请求的<strong>读场景，怎么用缓存来抗高并发</strong>。</p><h3 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h3><p>MQ，必须得用 MQ。可能你还是会出现高并发写的场景，比如说一个业务操作里要频繁搞数据库几十次，增删改增删改，疯了。那高并发绝对搞挂你的系统，你要是用 redis 来承载写那肯定不行，人家是缓存，数据随时就被 LRU 了，数据格式还无比简单，没有事务支持。所以该用 mysql 还得用 mysql 啊。那你咋办？用 MQ 吧，大量的写请求灌入 MQ 里，排队慢慢玩儿，<strong>后边系统消费后慢慢写</strong>，控制在 mysql 承载范围之内。所以你得考虑考虑你的项目里，那些承载复杂写业务逻辑的场景里，如何用 MQ 来异步写，提升并发性。MQ 单机抗几万并发也是 ok 的，这个之前还特意说过。</p><h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><p>分库分表，可能到了最后数据库层面还是免不了抗高并发的要求，好吧，那么就将一个数据库拆分为多个库，多个库来扛更高的并发；然后将一个表<strong>拆分为多个表</strong>，每个表的数据量保持少一点，提高 sql 跑的性能。</p><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>读写分离，这个就是说大部分时候数据库可能也是读多写少，没必要所有请求都集中在一个库上吧，可以搞个主从架构，<strong>主库写</strong>入，<strong>从库读</strong>取，搞一个读写分离。<strong>读流量太多</strong>的时候，还可以<strong>加更多的从库</strong>。</p><h3 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h3><p>Elasticsearch，简称 es。es 是分布式的，可以随便扩容，分布式天然就可以支撑高并发，因为动不动就可以扩容加机器来扛更高的并发。那么一些比较简单的查询、统计类的操作，可以考虑用 es 来承载，还有一些全文搜索类的操作，也可以考虑用 es 来承载。</p><p>上面的 6 点，基本就是高并发系统肯定要干的一些事儿，大家可以仔细结合之前讲过的知识考虑一下，到时候你可以系统的把这块阐述一下，然后每个部分要注意哪些问题，之前都讲过了，你都可以阐述阐述，表明你对这块是有点积累的。</p><p>说句实话，毕竟你真正厉害的一点，不是在于弄明白一些技术，或者大概知道一个高并发系统应该长什么样？其实实际上在真正的复杂的业务系统里，做高并发要远远比上面提到的点要复杂几十倍到上百倍。你需要考虑：哪些需要分库分表，哪些不需要分库分表，单库单表跟分库分表如何 join，哪些数据要放到缓存里去，放哪些数据再可以扛住高并发的请求，你需要完成对一个复杂业务系统的分析之后，然后逐步逐步的加入高并发的系统架构的改造，这个过程是无比复杂的，一旦做过一次，并且做好了，你在这个市场上就会非常的吃香。</p><p>其实大部分公司，真正看重的，不是说你掌握高并发相关的一些基本的架构知识，架构中的一些技术，RocketMQ、Kafka、Redis、Elasticsearch，高并发这一块，你了解了，也只能是次一等的人才。对一个有几十万行代码的复杂的分布式系统，一步一步架构、设计以及实践过高并发架构的人，这个经验是难能可贵的。</p><p>关注我！这里只有干货！<br>如果你觉得本文对你有用，欢迎分享。<br>本文原创地址，我的博客：<a href="https://jsbintask.cn/2019/02/17/interview/interview-high-concurrency-design/">https://jsbintask.cn/2019/02/17/interview/interview-high-concurrency-design/</a>，转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;p&gt;如何设计一个高并发系统？&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://jsbintask.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="架构" scheme="https://jsbintask.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据库分库分表面试题整理</title>
    <link href="https://jsbintask.cn/2019/02/17/interview/interview-db-shard/"/>
    <id>https://jsbintask.cn/2019/02/17/interview/interview-db-shard/</id>
    <published>2019-02-17T08:05:00.000Z</published>
    <updated>2019-02-17T08:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）？用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？你们具体是如何对数据库如何进行垂直拆分或水平拆分的？"><a href="#1-为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）？用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？你们具体是如何对数据库如何进行垂直拆分或水平拆分的？" class="headerlink" title="1. 为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）？用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？你们具体是如何对数据库如何进行垂直拆分或水平拆分的？"></a>1. 为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）？用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？你们具体是如何对数据库如何进行垂直拆分或水平拆分的？</h2><a id="more"></a><h3 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><h3 id="为什么要分库分表？（设计高并发系统的时候，数据库层面该如何设计？）"><a href="#为什么要分库分表？（设计高并发系统的时候，数据库层面该如何设计？）" class="headerlink" title="为什么要分库分表？（设计高并发系统的时候，数据库层面该如何设计？）"></a>为什么要分库分表？（设计高并发系统的时候，数据库层面该如何设计？）</h3><p>说白了，分库分表是两回事儿，大家可别搞混了，可能是光分库不分表，也可能是光分表不分库，都有可能。</p><p>我先给大家抛出来一个场景。</p><p>假如我们现在是一个小创业公司（或者是一个 BAT 公司刚兴起的一个新部门），现在注册用户就 20 万，每天活跃用户就 1 万，每天单表数据量就 1000，然后高峰期每秒钟并发请求最多就 10。天，就这种系统，随便找一个有几年工作经验的，然后带几个刚培训出来的，随便干干都可以。</p><p>结果没想到我们运气居然这么好，碰上个 CEO 带着我们走上了康庄大道，业务发展迅猛，过了几个月，注册用户数达到了 2000 万！每天活跃用户数 100 万！每天单表数据量 10 万条！高峰期每秒最大请求达到 1000！同时公司还顺带着融资了两轮，进账了几个亿人民币啊！公司估值达到了惊人的几亿美金！这是小独角兽的节奏！</p><p>好吧，没事，现在大家感觉压力已经有点大了，为啥呢？因为每天多 10 万条数据，一个月就多 300 万条数据，现在咱们单表已经几百万数据了，马上就破千万了。但是勉强还能撑着。高峰期请求现在是 1000，咱们线上部署了几台机器，负载均衡搞了一下，数据库撑 1000QPS 也还凑合。但是大家现在开始感觉有点担心了，接下来咋整呢……</p><p>再接下来几个月，我的天，CEO 太牛逼了，公司用户数已经达到 1 亿，公司继续融资几十亿人民币啊！公司估值达到了惊人的几十亿美金，成为了国内今年最牛逼的明星创业公司！天，我们太幸运了。</p><p>但是我们同时也是不幸的，因为此时每天活跃用户数上千万，每天单表新增数据多达 50 万，目前一个表总数据量都已经达到了两三千万了！扛不住啊！数据库磁盘容量不断消耗掉！高峰期并发达到惊人的 <code>5000~8000</code>！别开玩笑了，哥。我跟你保证，你的系统支撑不到现在，已经挂掉了！</p><p>好吧，所以你看到这里差不多就理解分库分表是怎么回事儿了，实际上这是跟着你的公司业务发展走的，你公司业务发展越好，用户就越多，数据量越大，请求量越大，那你单个数据库一定扛不住。</p><h4 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h4><p>比如你单表都几千万数据了，你确定你能扛住么？绝对不行，<strong>单表数据量太大</strong>，会极大影响你的 sql <strong>执行的性能</strong>，到了后面你的 sql 可能就跑的很慢了。一般来说，就以我的经验来看，单表到几百万的时候，性能就会相对差一些了，你就得分表了。</p><p>分表是啥意思？就是把一个表的数据放到多个表中，然后查询的时候你就查一个表。比如按照用户 id 来分表，将一个用户的数据就放在一个表中。然后操作的时候你对一个用户就操作那个表就好了。这样可以控制每个表的数据量在可控的范围内，比如每个表就固定在 200 万以内。</p><h4 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h4><p>分库是啥意思？就是你一个库一般我们经验而言，最多支撑到并发 2000，一定要扩容了，而且一个健康的单库并发值你最好保持在每秒 1000 左右，不要太大。那么你可以将一个库的数据拆分到多个库中，访问的时候就访问一个库好了。</p><p>这就是所谓的<strong>分库分表</strong>，为啥要分库分表？你明白了吧。</p><table><thead><tr><th>#</th><th>分库分表前</th><th>分库分表后</th></tr></thead><tbody><tr><td>并发支撑情况</td><td>MySQL 单机部署，扛不住高并发</td><td>MySQL从单机到多机，能承受的并发增加了多倍</td></tr><tr><td>磁盘使用情况</td><td>MySQL 单机磁盘容量几乎撑满</td><td>拆分为多个库，数据库服务器磁盘使用率大大降低</td></tr><tr><td>SQL 执行性能</td><td>单表数据量太大，SQL 越跑越慢</td><td>单表数据量减少，SQL 执行效率明显提升</td></tr></tbody></table><h3 id="用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？"><a href="#用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？" class="headerlink" title="用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？"></a>用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？</h3><p>这个其实就是看看你了解哪些分库分表的中间件，各个中间件的优缺点是啥？然后你用过哪些分库分表的中间件。</p><p>比较常见的包括：</p><ul><li>cobar</li><li>TDDL</li><li>atlas</li><li>sharding-jdbc</li><li>mycat</li></ul><h4 id="cobar"><a href="#cobar" class="headerlink" title="cobar"></a>cobar</h4><p>阿里 b2b 团队开发和开源的，属于 proxy 层方案。早些年还可以用，但是最近几年都没更新了，基本没啥人用，差不多算是被抛弃的状态吧。而且不支持读写分离、存储过程、跨库 join 和分页等操作。</p><h4 id="TDDL"><a href="#TDDL" class="headerlink" title="TDDL"></a>TDDL</h4><p>淘宝团队开发的，属于 client 层方案。支持基本的 crud 语法和读写分离，但不支持 join、多表查询等语法。目前使用的也不多，因为还依赖淘宝的 diamond 配置管理系统。</p><h4 id="atlas"><a href="#atlas" class="headerlink" title="atlas"></a>atlas</h4><p>360 开源的，属于 proxy 层方案，以前是有一些公司在用的，但是确实有一个很大的问题就是社区最新的维护都在 5 年前了。所以，现在用的公司基本也很少了。</p><h4 id="sharding-jdbc"><a href="#sharding-jdbc" class="headerlink" title="sharding-jdbc"></a>sharding-jdbc</h4><p>当当开源的，属于 client 层方案。确实之前用的还比较多一些，因为 SQL 语法支持也比较多，没有太多限制，而且目前推出到了 2.0 版本，支持分库分表、读写分离、分布式 id 生成、柔性事务（最大努力送达型事务、TCC 事务）。而且确实之前使用的公司会比较多一些（这个在官网有登记使用的公司，可以看到从 2017 年一直到现在，是有不少公司在用的），目前社区也还一直在开发和维护，还算是比较活跃，个人认为算是一个现在也<strong>可以选择的方案</strong>。</p><h4 id="mycat"><a href="#mycat" class="headerlink" title="mycat"></a>mycat</h4><p>基于 cobar 改造的，属于 proxy 层方案，支持的功能非常完善，而且目前应该是非常火的而且不断流行的数据库中间件，社区很活跃，也有一些公司开始在用了。但是确实相比于 sharding jdbc 来说，年轻一些，经历的锤炼少一些。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>综上，现在其实建议考量的，就是 sharding-jdbc 和 mycat，这两个都可以去考虑使用。</p><p>sharding-jdbc 这种 client 层方案的<strong>优点在于不用部署，运维成本低，不需要代理层的二次转发请求，性能很高</strong>，但是如果遇到升级啥的需要各个系统都重新升级版本再发布，各个系统都需要<strong>耦合</strong> sharding-jdbc 的依赖；</p><p>mycat 这种 proxy 层方案的<strong>缺点在于需要部署</strong>，自己运维一套中间件，运维成本高，但是<strong>好处在于对于各个项目是透明的</strong>，如果遇到升级之类的都是自己中间件那里搞就行了。</p><p>通常来说，这两个方案其实都可以选用，但是我个人建议中小型公司选用 sharding-jdbc，client 层方案轻便，而且维护成本低，不需要额外增派人手，而且中小型公司系统复杂度会低一些，项目也没那么多；但是中大型公司最好还是选用 mycat 这类 proxy 层方案，因为可能大公司系统和项目非常多，团队很大，人员充足，那么最好是专门弄个人来研究和维护 mycat，然后大量项目直接透明使用即可。</p><h3 id="你们具体是如何对数据库如何进行垂直拆分或水平拆分的？"><a href="#你们具体是如何对数据库如何进行垂直拆分或水平拆分的？" class="headerlink" title="你们具体是如何对数据库如何进行垂直拆分或水平拆分的？"></a>你们具体是如何对数据库如何进行垂直拆分或水平拆分的？</h3><p><strong>水平拆分</strong>的意思，就是把一个表的数据给弄到多个库的多个表里去，但是每个库的表结构都一样，只不过每个库表放的数据是不同的，所有库表的数据加起来就是全部数据。水平拆分的意义，就是将数据均匀放更多的库里，然后用多个库来抗更高的并发，还有就是用多个库的存储容量来进行扩容。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/database-split-horizon.png" alt="database-split-horizon"></p><p><strong>垂直拆分</strong>的意思，就是<strong>把一个有很多字段的表给拆分成多个表</strong>，<strong>或者是多个库上去</strong>。每个库表的结构都不一样，每个库表都包含部分字段。一般来说，会<strong>将较少的访问频率很高的字段放到一个表里去</strong>，然后<strong>将较多的访问频率很低的字段放到另外一个表里去</strong>。因为数据库是有缓存的，你访问频率高的行字段越少，就可以在缓存里缓存更多的行，性能就越好。这个一般在表层面做的较多一些。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/database-split-vertically.png" alt="database-split-vertically"></p><p>这个其实挺常见的，不一定我说，大家很多同学可能自己都做过，把一个大表拆开，订单表、订单支付表、订单商品表。</p><p>还有<strong>表层面的拆分</strong>，就是分表，将一个表变成 N 个表，就是<strong>让每个表的数据量控制在一定范围内</strong>，保证 SQL 的性能。否则单表数据量越大，SQL 性能就越差。一般是 200 万行左右，不要太多，但是也得看具体你怎么操作，也可能是 500 万，或者是 100 万。你的SQL越复杂，就最好让单表行数越少。</p><p>好了，无论分库还是分表，上面说的那些数据库中间件都是可以支持的。就是基本上那些中间件可以做到你分库分表之后，<strong>中间件可以根据你指定的某个字段值</strong>，比如说 userid，<strong>自动路由到对应的库上去，然后再自动路由到对应的表里去</strong>。</p><p>你就得考虑一下，你的项目里该如何分库分表？一般来说，垂直拆分，你可以在表层面来做，对一些字段特别多的表做一下拆分；水平拆分，你可以说是并发承载不了，或者是数据量太大，容量承载不了，你给拆了，按什么字段来拆，你自己想好；分表，你考虑一下，你如果哪怕是拆到每个库里去，并发和容量都ok了，但是每个库的表还是太大了，那么你就分表，将这个表分开，保证每个表的数据量并不是很大。</p><p>而且这儿还有两种<strong>分库分表的方式</strong>：</p><ul><li>一种是按照 range 来分，就是每个库一段连续的数据，这个一般是按比如<strong>时间范围</strong>来的，但是这种一般较少用，因为很容易产生热点问题，大量的流量都打在最新的数据上了。</li><li>或者是按照某个字段hash一下均匀分散，这个较为常用。</li></ul><p>range 来分，好处在于说，扩容的时候很简单，因为你只要预备好，给每个月都准备一个库就可以了，到了一个新的月份的时候，自然而然，就会写新的库了；缺点，但是大部分的请求，都是访问最新的数据。实际生产用 range，要看场景。</p><p>hash 分发，好处在于说，可以平均分配每个库的数据量和请求压力；坏处在于说扩容起来比较麻烦，会有一个数据迁移的过程，之前的数据需要重新计算 hash 值重新分配到不同的库或表。</p><h2 id="2-现在有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表动态切换到分库分表上？"><a href="#2-现在有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表动态切换到分库分表上？" class="headerlink" title="2. 现在有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表动态切换到分库分表上？"></a>2. 现在有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表<strong>动态切换</strong>到分库分表上？</h2><h3 id="面试题剖析-1"><a href="#面试题剖析-1" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><p>这个其实从 low 到高大上有好几种方案，我们都玩儿过，我都给你说一下。</p><h3 id="停机迁移方案"><a href="#停机迁移方案" class="headerlink" title="停机迁移方案"></a>停机迁移方案</h3><p>我先给你说一个最 low 的方案，就是很简单，大家伙儿凌晨 12 点开始运维，网站或者 app 挂个公告，说 0 点到早上 6 点进行运维，无法访问。</p><p>接着到 0 点停机，系统停掉，没有流量写入了，此时老的单库单表数据库静止了。然后你之前得写好一个<strong>导数的一次性工具</strong>，此时直接跑起来，然后将单库单表的数据哗哗哗读出来，写到分库分表里面去。</p><p>导数完了之后，就 ok 了，修改系统的数据库连接配置啥的，包括可能代码和 SQL 也许有修改，那你就用最新的代码，然后直接启动连到新的分库分表上去。</p><p>验证一下，ok了，完美，大家伸个懒腰，看看看凌晨 4 点钟的北京夜景，打个滴滴回家吧。</p><p>但是这个方案比较 low，谁都能干，我们来看看高大上一点的方案。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/database-shard-method-1.png" alt="database-shard-method-1"></p><h3 id="双写迁移方案"><a href="#双写迁移方案" class="headerlink" title="双写迁移方案"></a>双写迁移方案</h3><p>这个是我们常用的一种迁移方案，比较靠谱一些，不用停机，不用看北京凌晨 4 点的风景。</p><p>简单来说，就是在线上系统里面，之前所有写库的地方，增删改操作，<strong>除了对老库增删改，都加上对新库的增删改</strong>，这就是所谓的<strong>双写</strong>，同时写俩库，老库和新库。</p><p>然后<strong>系统部署</strong>之后，新库数据差太远，用之前说的导数工具，跑起来读老库数据写新库，写的时候要根据 gmt_modified 这类字段判断这条数据最后修改的时间，除非是读出来的数据在新库里没有，或者是比新库的数据新才会写。简单来说，就是不允许用老数据覆盖新数据。</p><p>导完一轮之后，有可能数据还是存在不一致，那么就程序自动做一轮校验，比对新老库每个表的每条数据，接着如果有不一样的，就针对那些不一样的，从老库读数据再次写。反复循环，直到两个库每个表的数据都完全一致为止。</p><p>接着当数据完全一致了，就 ok 了，基于仅仅使用分库分表的最新代码，重新部署一次，不就仅仅基于分库分表在操作了么，还没有几个小时的停机时间，很稳。所以现在基本玩儿数据迁移之类的，都是这么干的。<br><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/database-shard-method-2.png" alt="database-shard-method-2"></p><h2 id="3-如何设计可以动态扩容缩容的分库分表方案？"><a href="#3-如何设计可以动态扩容缩容的分库分表方案？" class="headerlink" title="3. 如何设计可以动态扩容缩容的分库分表方案？"></a>3. 如何设计可以动态扩容缩容的分库分表方案？</h2><h2 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h2><p>对于分库分表来说，主要是面对以下问题：</p><ul><li>选择一个数据库中间件，调研、学习、测试；</li><li>设计你的分库分表的一个方案，你要分成多少个库，每个库分成多少个表，比如 3 个库，每个库 4 个表；</li><li>基于选择好的数据库中间件，以及在测试环境建立好的分库分表的环境，然后测试一下能否正常进行分库分表的读写；</li><li>完成单库单表到分库分表的<strong>迁移</strong>，双写方案；</li><li>线上系统开始基于分库分表对外提供服务；</li><li>扩容了，扩容成 6 个库，每个库需要 12 个表，你怎么来增加更多库和表呢？</li></ul><p>这个是你必须面对的一个事儿，就是你已经弄好分库分表方案了，然后一堆库和表都建好了，基于分库分表中间件的代码开发啥的都好了，测试都 ok 了，数据能均匀分布到各个库和各个表里去，而且接着你还通过双写的方案咔嚓一下上了系统，已经直接基于分库分表方案在搞了。</p><p>那么现在问题来了，你现在这些库和表又支撑不住了，要继续扩容咋办？这个可能就是说你的每个库的容量又快满了，或者是你的表数据量又太大了，也可能是你每个库的写并发太高了，你得继续扩容。</p><p>这都是玩儿分库分表线上必须经历的事儿。</p><h3 id="面试题剖析-2"><a href="#面试题剖析-2" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><h3 id="停机扩容（不推荐）"><a href="#停机扩容（不推荐）" class="headerlink" title="停机扩容（不推荐）"></a>停机扩容（不推荐）</h3><p>这个方案就跟停机迁移一样，步骤几乎一致，唯一的一点就是那个导数的工具，是把现有库表的数据抽出来慢慢倒入到新的库和表里去。但是最好别这么玩儿，有点不太靠谱，因为既然<strong>分库分表</strong>就说明数据量实在是太大了，可能多达几亿条，甚至几十亿，你这么玩儿，可能会出问题。</p><p>从单库单表迁移到分库分表的时候，数据量并不是很大，单表最大也就两三千万。那么你写个工具，多弄几台机器并行跑，1小时数据就导完了。这没有问题。</p><p>如果 3 个库 + 12 个表，跑了一段时间了，数据量都 1~2 亿了。光是导 2 亿数据，都要导个几个小时，6 点，刚刚导完数据，还要搞后续的修改配置，重启系统，测试验证，10 点才可以搞完。所以不能这么搞。</p><h3 id="优化后的方案"><a href="#优化后的方案" class="headerlink" title="优化后的方案"></a>优化后的方案</h3><p>一开始上来就是 32 个库，每个库 32 个表，那么总共是 1024 张表。</p><p>我可以告诉各位同学，这个分法，第一，基本上国内的互联网肯定都是够用了，第二，无论是并发支撑还是数据量支撑都没问题。</p><p>每个库正常承载的写入并发量是 1000，那么 32 个库就可以承载32 <em> 1000 = 32000 的写并发，如果每个库承载 1500 的写并发，32 </em> 1500 = 48000 的写并发，接近 5万/s 的写入并发，前面再加一个MQ，削峰，每秒写入 MQ 8 万条数据，每秒消费 5 万条数据。</p><p>有些除非是国内排名非常靠前的这些公司，他们的最核心的系统的数据库，可能会出现几百台数据库的这么一个规模，128个库，256个库，512个库。</p><p>1024 张表，假设每个表放 500 万数据，在 MySQL 里可以放 50 亿条数据。</p><p>每秒的 5 万写并发，总共 50 亿条数据，对于国内大部分的互联网公司来说，其实一般来说都够了。</p><p>谈分库分表的扩容，<strong>第一次分库分表，就一次性给他分个够</strong>，32 个库，1024 张表，可能对大部分的中小型互联网公司来说，已经可以支撑好几年了。</p><p>一个实践是利用 <code>32 * 32</code> 来分库分表，即分为 32 个库，每个库里一个表分为 32 张表。一共就是 1024 张表。根据某个 id 先根据 32 取模路由到库，再根据 32 取模路由到库里的表。</p><table><thead><tr><th>orderId</th><th>id % 32 (库)</th><th>id / 32 % 32 (表)</th></tr></thead><tbody><tr><td>259</td><td>3</td><td>8</td></tr><tr><td>1189</td><td>5</td><td>5</td></tr><tr><td>352</td><td>0</td><td>11</td></tr><tr><td>4593</td><td>17</td><td>15</td></tr></tbody></table><p>刚开始的时候，这个库可能就是逻辑库，建在一个数据库上的，就是一个mysql服务器可能建了 n 个库，比如 32 个库。后面如果要拆分，就是不断在库和 mysql 服务器之间做迁移就可以了。然后系统配合改一下配置即可。</p><p>比如说最多可以扩展到32个数据库服务器，每个数据库服务器是一个库。如果还是不够？最多可以扩展到 1024 个数据库服务器，每个数据库服务器上面一个库一个表。因为最多是1024个表。</p><p>这么搞，是不用自己写代码做数据迁移的，都交给 dba 来搞好了，但是 dba 确实是需要做一些库表迁移的工作，但是总比你自己写代码，然后抽数据导数据来的效率高得多吧。</p><p>哪怕是要减少库的数量，也很简单，其实说白了就是按倍数缩容就可以了，然后修改一下路由规则。</p><p>这里对步骤做一个总结：</p><ol><li>设定好几台数据库服务器，每台服务器上几个库，每个库多少个表，推荐是 32库 * 32表，对于大部分公司来说，可能几年都够了。</li><li>路由的规则，orderId 模 32 = 库，orderId / 32 模 32 = 表</li><li>扩容的时候，申请增加更多的数据库服务器，装好 mysql，呈倍数扩容，4 台服务器，扩到 8 台服务器，再到 16 台服务器。</li><li>由 dba 负责将原先数据库服务器的库，迁移到新的数据库服务器上去，库迁移是有一些便捷的工具的。</li><li>我们这边就是修改一下配置，调整迁移的库所在数据库服务器的地址。</li><li>重新发布系统，上线，原先的路由规则变都不用变，直接可以基于 n 倍的数据库服务器的资源，继续进行线上系统的提供服务。</li></ol><h2 id="4-分库分表之后，id-主键如何处理？"><a href="#4-分库分表之后，id-主键如何处理？" class="headerlink" title="4. 分库分表之后，id 主键如何处理？"></a>4. 分库分表之后，id 主键如何处理？</h2><h3 id="考点分析-1"><a href="#考点分析-1" class="headerlink" title="考点分析"></a>考点分析</h3><p>其实这是分库分表之后你必然要面对的一个问题，就是 id 咋生成？因为要是分成多个表之后，每个表都是从 1 开始累加，那肯定不对啊，需要一个<strong>全局唯一</strong>的 id 来支持。所以这都是你实际生产环境中必须考虑的问题。</p><h3 id="面试题剖析-3"><a href="#面试题剖析-3" class="headerlink" title="面试题剖析"></a>面试题剖析</h3><h3 id="基于数据库的实现方案"><a href="#基于数据库的实现方案" class="headerlink" title="基于数据库的实现方案"></a>基于数据库的实现方案</h3><h4 id="数据库自增-id"><a href="#数据库自增-id" class="headerlink" title="数据库自增 id"></a>数据库自增 id</h4><p>这个就是说你的系统里每次得到一个 id，都是往一个库的一个表里插入一条没什么业务含义的数据，然后获取一个数据库自增的一个 id。拿到这个 id 之后再往对应的分库分表里去写入。</p><p>这个方案的好处就是方便简单，谁都会用；<strong>缺点就是单库生成</strong>自增 id，要是高并发的话，就会有瓶颈的；如果你硬是要改进一下，那么就专门开一个服务出来，这个服务每次就拿到当前 id 最大值，然后自己递增几个 id，一次性返回一批 id，然后再把当前最大 id 值修改成递增几个 id 之后的一个值；但是<strong>无论如何都是基于单个数据库</strong>。</p><p><strong>适合的场景</strong>：你分库分表就俩原因，要不就是单库并发太高，要不就是单库数据量太大；除非是你<strong>并发不高，但是数据量太大</strong>导致的分库分表扩容，你可以用这个方案，因为可能每秒最高并发最多就几百，那么就走单独的一个库和表生成自增主键即可。</p><h4 id="设置数据库-sequence-或者表自增字段步长"><a href="#设置数据库-sequence-或者表自增字段步长" class="headerlink" title="设置数据库 sequence 或者表自增字段步长"></a>设置数据库 sequence 或者表自增字段步长</h4><p>可以通过设置数据库 sequence 或者表的自增字段步长来进行水平伸缩。</p><p>比如说，现在有 8 个服务节点，每个服务节点使用一个 sequence 功能来产生 ID，每个 sequence 的起始 ID 不同，并且依次递增，步长都是 8。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/database-id-sequence-step.png" alt="database-id-sequence-step"></p><p><strong>适合的场景</strong>：在用户防止产生的 ID 重复时，这种方案实现起来比较简单，也能达到性能目标。但是服务节点固定，步长也固定，将来如果还要增加服务节点，就不好搞了。</p><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>好处就是本地生成，不要基于数据库来了；不好之处就是，UUID 太长了、占用空间大，<strong>作为主键性能太差</strong>了；更重要的是，UUID 不具有有序性，会导致 B+ 树索引在写的时候有过多的随机写操作（连续的 ID 可以产生部分顺序写），还有，由于在写的时候不能产生有顺序的 append 操作，而需要进行 insert 操作，将会读取整个 B+ 树节点到内存，在插入这条记录后会将整个节点写回磁盘，这种操作在记录占用空间比较大的情况下，性能下降明显。</p><p>适合的场景：如果你是要随机生成个什么文件名、编号之类的，你可以用 UUID，但是作为主键是不能用 UUID 的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID.randomUUID().toString().replace(“-”, “”) -&gt; sfsdf23423rr234sfdaf</span><br></pre></td></tr></table></figure><h3 id="获取系统当前时间"><a href="#获取系统当前时间" class="headerlink" title="获取系统当前时间"></a>获取系统当前时间</h3><p>这个就是获取当前时间即可，但是问题是，<strong>并发很高的时候</strong>，比如一秒并发几千，<strong>会有重复的情况</strong>，这个是肯定不合适的。基本就不用考虑了。</p><p>适合的场景：一般如果用这个方案，是将当前时间跟很多其他的业务字段拼接起来，作为一个 id，如果业务上你觉得可以接受，那么也是可以的。你可以将别的业务字段值跟当前时间拼接起来，组成一个全局唯一的编号。</p><h3 id="snowflake-算法"><a href="#snowflake-算法" class="headerlink" title="snowflake 算法"></a>snowflake 算法</h3><p>snowflake 算法是 twitter 开源的分布式 id 生成算法，采用 Scala 语言实现，是把一个 64 位的 long 型的 id，1 个 bit 是不用的，用其中的 41 bit 作为毫秒数，用 10 bit 作为工作机器 id，12 bit 作为序列号。</p><ul><li>1 bit：不用，为啥呢？因为二进制里第一个 bit 为如果是 1，那么都是负数，但是我们生成的 id 都是正数，所以第一个 bit 统一都是 0。</li><li>41 bit：表示的是时间戳，单位是毫秒。41 bit 可以表示的数字多达 <code>2^41 - 1</code>，也就是可以标识 <code>2^41 - 1</code> 个毫秒值，换算成年就是表示69年的时间。</li><li>10 bit：记录工作机器 id，代表的是这个服务最多可以部署在 2^10台机器上哪，也就是1024台机器。但是 10 bit 里 5 个 bit 代表机房 id，5 个 bit 代表机器 id。意思就是最多代表 <code>2^5</code>个机房（32个机房），每个机房里可以代表 <code>2^5</code> 个机器（32台机器）。</li><li>12 bit：这个是用来记录同一个毫秒内产生的不同 id，12 bit 可以代表的最大正整数是 <code>2^12 - 1 = 4096</code>，也就是说可以用这个 12 bit 代表的数字来区分<strong>同一个毫秒内</strong>的 4096 个不同的 id。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 | 0001100 10100010 10111110 10001001 01011100 00 | 10001 | 1 1001 | 0000 00000000</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdWorker</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId, <span class="keyword">long</span> sequence)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// sanity check for workerId</span></span><br><span class="line">        <span class="comment">// 这儿不就检查了一下，要求就是你传递进来的机房id和机器id不能超过32，不能小于0</span></span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    String.format(<span class="string">"worker Id can't be greater than %d or less than 0"</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    String.format(<span class="string">"datacenter Id can't be greater than %d or less than 0"</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(</span><br><span class="line">                <span class="string">"worker starting. timestamp left shift %d, datacenter id bits %d, worker id bits %d, sequence bits %d, workerid %d"</span>,</span><br><span class="line">                timestampLeftShift, datacenterIdBits, workerIdBits, sequenceBits, workerId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">        <span class="keyword">this</span>.sequence = sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> twepoch = <span class="number">1288834974657L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个是二进制运算，就是 5 bit最多只能有31个数字，也就是说机器id最多只能是32以内</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个是一个意思，就是 5 bit最多只能有31个数字，机房id最多只能是32以内</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getWorkerId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workerId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDatacenterId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这儿就是获取当前时间戳，单位是毫秒</span></span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            System.err.printf(<span class="string">"clock is moving backwards.  Rejecting requests until %d."</span>, lastTimestamp);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(</span><br><span class="line">                    <span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            <span class="comment">// 这个意思是说一个毫秒内最多只能有4096个数字</span></span><br><span class="line">            <span class="comment">// 无论你传递多少进来，这个位运算保证始终就是在4096这个范围内，避免你自己传递个sequence超过了4096这个范围</span></span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这儿记录一下最近一次生成id的时间戳，单位是毫秒</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这儿就是将时间戳左移，放到 41 bit那儿；</span></span><br><span class="line">        <span class="comment">// 将机房 id左移放到 5 bit那儿；</span></span><br><span class="line">        <span class="comment">// 将机器id左移放到5 bit那儿；将序号放最后12 bit；</span></span><br><span class="line">        <span class="comment">// 最后拼接起来成一个 64 bit的二进制数字，转换成 10 进制就是个 long 型</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) | (datacenterId &lt;&lt; datacenterIdShift)</span><br><span class="line">                | (workerId &lt;&lt; workerIdShift) | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------测试---------------</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IdWorker worker = <span class="keyword">new</span> IdWorker(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            System.out.println(worker.nextId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么说呢，大概这个意思吧，就是说 41 bit 是当前毫秒单位的一个时间戳，就这意思；然后 5 bit 是你传递进来的一个<strong>机房</strong> id（但是最大只能是 32 以内），另外 5 bit 是你传递进来的<strong>机器</strong> id（但是最大只能是 32 以内），剩下的那个 12 bit序列号，就是如果跟你上次生成 id 的时间还在一个毫秒内，那么会把顺序给你累加，最多在 4096 个序号以内。</p><p>所以你自己利用这个工具类，自己搞一个服务，然后对每个机房的每个机器都初始化这么一个东西，刚开始这个机房的这个机器的序号就是 0。然后每次接收到一个请求，说这个机房的这个机器要生成一个 id，你就找到对应的 Worker 生成。</p><p>利用这个 snowflake 算法，你可以开发自己公司的服务，甚至对于机房 id 和机器 id，反正给你预留了 5 bit + 5 bit，你换成别的有业务含义的东西也可以的。</p><p>这个 snowflake 算法相对来说还是比较靠谱的，所以你要真是搞分布式 id 生成，如果是高并发啥的，那么用这个应该性能比较好，一般每秒几万并发的场景，也足够你用了。</p><p><code>关注我！这里只有干货！</code><br>本文原创地址：<a href="https://jsbintask.cn/2019/02/17/interview/interview-db-shard/">https://jsbintask.cn/2019/02/17/interview/interview-db-shard/</a>，转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）？用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？你们具体是如何对数据库如何进行垂直拆分或水平拆分的？&quot;&gt;&lt;a href=&quot;#1-为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）？用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？你们具体是如何对数据库如何进行垂直拆分或水平拆分的？&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）？用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？你们具体是如何对数据库如何进行垂直拆分或水平拆分的？&quot;&gt;&lt;/a&gt;1. 为什么要分库分表（设计高并发系统的时候，数据库层面该如何设计）？用过哪些分库分表中间件？不同的分库分表中间件都有什么优点和缺点？你们具体是如何对数据库如何进行垂直拆分或水平拆分的？&lt;/h2&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://jsbintask.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="数据库" scheme="https://jsbintask.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>mysql面试题：如何实现 MySQL 的读写分离？MySQL 主从复制原理是啥？如何解决 MySQL 主从同步的延时问题？</title>
    <link href="https://jsbintask.cn/2019/02/17/interview/interview-mysql-read-write-separation/"/>
    <id>https://jsbintask.cn/2019/02/17/interview/interview-mysql-read-write-separation/</id>
    <published>2019-02-17T06:05:00.000Z</published>
    <updated>2019-02-17T06:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>你有没有做 MySQL 读写分离？如何实现 MySQL 的读写分离？MySQL 主从复制原理的是啥？如何解决 MySQL 主从同步的延时问题？<br><a id="more"></a></p><h2 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h2><p>高并发这个阶段，肯定是需要做读写分离的，啥意思？因为实际上大部分的互联网公司，一些网站，或者是 app，其实都是读多写少。所以针对这个情况，就是写一个主库，但是主库挂多个从库，然后从多个从库来读，那不就可以支撑更高的读并发压力了吗？</p><h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><h3 id="如何实现-MySQL-的读写分离？"><a href="#如何实现-MySQL-的读写分离？" class="headerlink" title="如何实现 MySQL 的读写分离？"></a>如何实现 MySQL 的读写分离？</h3><p>其实很简单，就是基于主从复制架构，简单来说，就搞一个主库，挂多个从库，然后我们就单单只是写主库，然后主库会自动把数据给同步到从库上去。</p><h3 id="MySQL-主从复制原理的是啥？"><a href="#MySQL-主从复制原理的是啥？" class="headerlink" title="MySQL 主从复制原理的是啥？"></a>MySQL 主从复制原理的是啥？</h3><p>主库将变更写入 binlog 日志，然后从库连接到主库之后，从库有一个 IO 线程，将主库的 binlog 日志拷贝到自己本地，写入一个 relay 中继日志中。接着从库中有一个 SQL 线程会从中继日志读取 binlog，然后执行 binlog 日志中的内容，也就是在自己本地再次执行一遍 SQL，这样就可以保证自己跟主库的数据是一样的。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/mysql-master-slave.png" alt="mysql"></p><p>这里有一个非常重要的一点，就是从库同步主库数据的过程是串行化的，也就是说主库上并行的操作，在从库上会串行执行。所以这就是一个非常重要的点了，由于从库从主库拷贝日志以及串行执行 SQL 的特点，在高并发场景下，从库的数据一定会比主库慢一些，是<strong>有延时</strong>的。所以经常出现，刚写入主库的数据可能是读不到的，要过几十毫秒，甚至几百毫秒才能读取到。</p><p>而且这里还有另外一个问题，就是如果主库突然宕机，然后恰好数据还没同步到从库，那么有些数据可能在从库上是没有的，有些数据可能就丢失了。</p><p>所以 MySQL 实际上在这一块有两个机制，一个是<strong>半同步复制</strong>，用来解决主库数据丢失问题；一个是<strong>并行复制</strong>，用来解决主从同步延时问题。</p><p>这个所谓<strong>半同步复制</strong>，也叫 <code>semi-sync</code> 复制，指的就是主库写入 binlog 日志之后，就会将<strong>强制</strong>此时立即将数据同步到从库，从库将日志写入自己本地的 relay log 之后，接着会返回一个 ack 给主库，主库接收到<strong>至少一个从库</strong>的 ack 之后才会认为写操作完成了。</p><p>所谓<strong>并行复制</strong>，指的是从库开启多个线程，并行读取 relay log 中不同库的日志，然后<strong>并行重放不同库的日志</strong>，这是库级别的并行。</p><h3 id="MySQL-主从同步延时问题（精华）"><a href="#MySQL-主从同步延时问题（精华）" class="headerlink" title="MySQL 主从同步延时问题（精华）"></a>MySQL 主从同步延时问题（精华）</h3><p>以前线上确实处理过因为主从同步延时问题而导致的线上的 bug，属于小型的生产事故。</p><p>是这个么场景。有个同学是这样写代码逻辑的。先插入一条数据，再把它查出来，然后更新这条数据。在生产环境高峰期，写并发达到了 2000/s，这个时候，主从复制延时大概是在小几十毫秒。线上会发现，每天总有那么一些数据，我们期望更新一些重要的数据状态，但在高峰期时候却没更新。用户跟客服反馈，而客服就会反馈给我们。</p><p>我们通过 MySQL 命令：<br><code>show status</code></p><p>查看 <code>Seconds_Behind_Master</code>，可以看到从库复制主库的数据落后了几 ms。</p><p>一般来说，如果主从延迟较为严重，有以下解决方案：</p><ul><li>分库，将一个主库拆分为多个主库，每个主库的写并发就减少了几倍，此时主从延迟可以忽略不计。</li><li>打开 MySQL 支持的并行复制，多个库并行复制。如果说某个库的写入并发就是特别高，单库写并发达到了 2000/s，并行复制还是没意义。</li><li>重写代码，写代码的同学，要慎重，插入数据时立马查询可能查不到。</li><li>如果确实是存在必须先插入，立马要求就查询到，然后立马就要反过来执行一些操作，对这个查询<strong>设置直连主库</strong>。<strong>不推荐</strong>这种方法，你要是这么搞，读写分离的意义就丧失了。</li></ul><p>如果你觉得本文对你有用，欢迎分享，关注。<br>关注我！这里只有干货！<br>本文原创地址：<a href="https://jsbintask.cn/2019/02/17/interview/interview-mysql-read-write-separation/">https://jsbintask.cn/2019/02/17/interview/interview-mysql-read-write-separation/</a>，转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;p&gt;你有没有做 MySQL 读写分离？如何实现 MySQL 的读写分离？MySQL 主从复制原理的是啥？如何解决 MySQL 主从同步的延时问题？&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://jsbintask.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="mysql" scheme="https://jsbintask.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>史上最全springboot配置，踩坑，注解，使用手册（持续更新中）</title>
    <link href="https://jsbintask.cn/2019/02/15/springboot/springboot-all-configs/"/>
    <id>https://jsbintask.cn/2019/02/15/springboot/springboot-all-configs/</id>
    <published>2019-02-15T03:11:00.000Z</published>
    <updated>2019-02-15T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/flux_config_by_skay20_d4ijq3x-fullview.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a></p><h2 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h2><p>春节在家长了几斤肉，今天开始减肥了（工作了）。19年的第一篇文章，本篇文章将覆盖springboot所有配置（本人实际工作中所遇到问题以及学习总结），后续将会持续更新！话不多说，直接开始。</p><h2 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h2><p>注意：本演示全部基于<strong>springboot</strong>最新版本，现在是<strong><code>2.1.2.RELEASE</code></strong>，并且所有配置将全部使用yaml格式！</p><h3 id="如何配置springboot监听端口？"><a href="#如何配置springboot监听端口？" class="headerlink" title="如何配置springboot监听端口？"></a>如何配置springboot监听端口？</h3><ol><li>通过application.yml指定。（推荐）<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></li></ol><p>注意：如果使用<code>server.port=0</code>，将使用一个随机端口，可以控制台查看。</p><ol start="2"><li>指定jvm参数（启动多个项目调试时推荐使用）<br>idea中：<strong>Edit Configurations -&gt; VM options</strong><br>运行jar命令： <code>java -Dserver.port=8080 app.jar</code><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springboot/demo1.png" alt="springboot"></li><li>运行<code>java -jar</code>命令时指定<br>如： <code>java -jar app.jar --server.port=8080</code></li><li>通过代码指定：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TomcatWebServerFactoryCustomizer <span class="title">factoryCustomizerAutoConfiguration</span><span class="params">(Environment environment, ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">            serverProperties.setPort(<span class="number">8888</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TomcatWebServerFactoryCustomizer(environment, serverProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="springboot中如何添加filter"><a href="#springboot中如何添加filter" class="headerlink" title="springboot中如何添加filter"></a>springboot中如何添加filter</h3><ol><li>继承<code>Filter</code>并且将该类作为一个bean加入spring容器，使用<code>@Order</code>设置filter顺序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//to do something.</span></span><br><span class="line">        </span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意！使用这种方式注册的filter将拦截所有请求，无法指定拦截url。</p><ol start="2"><li>使用<code>FilterRegistrationBean</code>类手动注册一个filter（推荐）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//to do something.</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"SecondFilter.doFilter"</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;SecondFilter&gt; <span class="title">secondFilterFilterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;SecondFilter&gt; registrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> SecondFilter());</span><br><span class="line">        registrationBean.setOrder(<span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        registrationBean.addUrlPatterns(<span class="string">"/**"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>开启<code>@WebFilter</code>扫描。<br>在启动类上加上<code>@ServletComponentScan</code>注解，定义filter如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"ThridFilter"</span>, urlPatterns = <span class="string">"/**"</span>)</span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1002</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThridFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ThridFilter.doFilter"</span>);</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>采坑记录：该方式只在内置web容器下有效（打jar包），如果使用war包，将失效，有兴趣的可以看一看<code>@ServletComponentScan</code>注解说明。</p><h3 id="springboot如何添加servlet"><a href="#springboot如何添加servlet" class="headerlink" title="springboot如何添加servlet"></a>springboot如何添加servlet</h3><ol><li>同上类似，使用<code>ServletRegistrationBean</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> FooServlet(),<span class="string">"/foo/*"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="如何配置jpa，数据源？"><a href="#如何配置jpa，数据源？" class="headerlink" title="如何配置jpa，数据源？"></a>如何配置jpa，数据源？</h3><p>引入jpa依赖，application.yml中添加数据源信息<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">jason</span></span><br><span class="line"><span class="attr">    url:</span>  <span class="attr">jdbc:mysql://localhost:3306/springboot-all-configs?useSSL=false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line"><span class="attr">      hibernate:</span></span><br><span class="line"><span class="attr">        format_sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>采坑记录1：如果引入jpa但是不定义数据源将会启动失败<br>采坑记录2：最新版springboot默认mysql驱动为8.1，自定义参数较多，启动可能造成数据源初始化失败，建议降级mysql驱动版本，在pom文件中定义：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springboot/demo3.png" alt="springboot"><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="生war包运行，部署在weblogic获取其它servlet容器中"><a href="#生war包运行，部署在weblogic获取其它servlet容器中" class="headerlink" title="生war包运行，部署在weblogic获取其它servlet容器中"></a>生war包运行，部署在weblogic获取其它servlet容器中</h3><ol><li>将tomcat从maven依赖中去掉，启动类继承<code>SpringBootServletInitializer</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAllConfigsApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootAllConfigsApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(SpringBootApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后将pom文件打包方式修改为war：<br><code>&lt;packaging&gt;war&lt;/packaging&gt;</code><br>使用idea打包：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springboot/demo2.png" alt="springboot"></p><h3 id="使用springboot默认生成的项目mvnw-cmd有什么用"><a href="#使用springboot默认生成的项目mvnw-cmd有什么用" class="headerlink" title="使用springboot默认生成的项目mvnw.cmd有什么用"></a>使用springboot默认生成的项目mvnw.cmd有什么用</h3><ol><li>用作生产环境（linux）上没有maven环境自动下载maven，打包依赖使用</li><li><code>没卵用，直接删除</code> </li></ol><h3 id="如何设置项目的log-level"><a href="#如何设置项目的log-level" class="headerlink" title="如何设置项目的log level"></a>如何设置项目的log level</h3><ol><li><p>在<code>application.yml</code>中指定：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line"><span class="attr">    org:</span></span><br><span class="line"><span class="attr">      springframework:</span></span><br><span class="line"><span class="attr">        web:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure></li><li><p>如果使用logback，添加一个<code>append</code>:<br><code>&lt;logger name=&quot;cn.jsbintask.springbootallconfigs.mapper&quot; level=&quot;DEBUG&quot;/&gt;</code></p></li></ol><h3 id="springboot中访问配置文件中的配置？"><a href="#springboot中访问配置文件中的配置？" class="headerlink" title="springboot中访问配置文件中的配置？"></a>springboot中访问配置文件中的配置？</h3><ol><li><p>使用<code>@Value</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port;</span><br></pre></td></tr></table></figure></li><li><p>注入<code>Environment</code>实例，然后获取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/path"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> environment.getProperty(<span class="string">"server.port"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>ConfigurationProperties</code>注解，定义多个属性值<br>.yml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cn:</span></span><br><span class="line"><span class="attr">  jsbintask:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">jason</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">22</span></span><br></pre></td></tr></table></figure></li></ol><p>.Properties class:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"cn.jsbintask"</span>)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsbintaskProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JsbintaskProperties jsbintaskProperties;</span><br></pre></td></tr></table></figure></p><h3 id="如何指定springboot启动类"><a href="#如何指定springboot启动类" class="headerlink" title="如何指定springboot启动类"></a>如何指定springboot启动类</h3><ol><li>使用idea指定main class<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springboot/demo4.png" alt="springboot"></li><li><p>在pom文件中指定启动类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- The main class to start by executing java -jar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">start-class</span>&gt;</span>cn.jsbintask.springbootallconfigs.SpringbootAllConfigsApplication<span class="tag">&lt;/<span class="name">start-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在springboot maven插件中指定：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>cn.jsbintask.springbootallconfigs<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="application-yml和bootstrap-yml的区别？"><a href="#application-yml和bootstrap-yml的区别？" class="headerlink" title="application.yml和bootstrap.yml的区别？"></a>application.yml和bootstrap.yml的区别？</h3><ol><li>bootstrap配置文件先于application.yml配置加载，bootstrap配置属性一般只在<code>spring cloud</code>获取配置服务时使用，所以一般如果不使用<code>spring cloud</code>的话，优先使用<code>application.yml</code>.</li></ol><h3 id="如何定义rest服务？"><a href="#如何定义rest服务？" class="headerlink" title="如何定义rest服务？"></a>如何定义rest服务？</h3><ol><li>使用<code>@ResponseBody</code>注解配置<strong>@RequestMapping</strong>注解使用</li><li>使用新注解<code>@RestController</code>配置<strong>@XXXMaping(GetMapping)</strong>使用。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="springboot中如何处理异常？"><a href="#springboot中如何处理异常？" class="headerlink" title="springboot中如何处理异常？"></a>springboot中如何处理异常？</h3><ol><li>使用<code>RestControllerAdvice</code>新注解以及<code>@ExceptionHanlder</code>处理异常<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@org</span>.springframework.web.bind.annotation.ExceptionHandler</span><br><span class="line">    <span class="meta">@ResponseStatus</span>(code = HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hanld</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="springboot使用restful服务如何自定错误白页？"><a href="#springboot使用restful服务如何自定错误白页？" class="headerlink" title="springboot使用restful服务如何自定错误白页？"></a>springboot使用restful服务如何自定错误白页？</h3><p>当出现错误的时候，springboot默认使用一个自定义的错误页面，当使用rest服务时，我们希望自定义返回数据类型。</p><ol><li>实现ErrorController接口：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomErrorController</span> <span class="keyword">implements</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ERROR_PATH = <span class="string">"/error"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = ERROR_PATH)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"custom error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR_PATH;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="如何定义静态资源访问映射（图片）"><a href="#如何定义静态资源访问映射（图片）" class="headerlink" title="如何定义静态资源访问映射（图片）"></a>如何定义静态资源访问映射（图片）</h3><ol><li>开启@EnableWebMvc，继承WebMvcConfigurer类，添加映射<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX + <span class="string">"/static/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在static文件夹下新建images文件夹，添加一张图片，访问 <code>/images/gril.jpg</code>：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springboot/demo5.png" alt="springboot"><br>采坑记录：上述映射和定位必须一一对应，如改成 <strong>registry.addResourceHandler(“/static/</strong>“).addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX + “/static/“);**<br>url则需使用 /static/images/gril.jpg，其它静态资源同样使用此方法映射。</p><h3 id="springboot项目启动后如何自动运行指定代码（如初始化）？"><a href="#springboot项目启动后如何自动运行指定代码（如初始化）？" class="headerlink" title="springboot项目启动后如何自动运行指定代码（如初始化）？"></a>springboot项目启动后如何自动运行指定代码（如初始化）？</h3><ol><li><p>在main方法后面运行指定service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ConfigurableApplicationContext applicationContext = SpringApplication.run(SpringbootAllConfigsApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* way one to init */</span></span><br><span class="line">    HelloController bean = applicationContext.getBean(HelloController.class);</span><br><span class="line">    bean.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>@EventListener</code>监听启动事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppReadyListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EventListener</span>(ApplicationReadyEvent.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AppReadyListener.init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>查看控制台如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springboot/demo6.png" alt="springboot"></p><ol start="3"><li><p>使用<code>@PostConstruct</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"AppReadyListener.postConstruct"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>ApplicationRunner</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AppRunner.run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>采坑记录：方法1在<code>war</code>环境中不起作用，方法3可能过早执行（这个bean初始化后就执行），方法4，2为最佳实践</p><h3 id="如何自定义模板引擎（freemarker）"><a href="#如何自定义模板引擎（freemarker）" class="headerlink" title="如何自定义模板引擎（freemarker）"></a>如何自定义模板引擎（freemarker）</h3><ol><li>添加依赖，修改配置文件：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  freemarker:</span></span><br><span class="line"><span class="attr">    template-loader-path:</span> <span class="attr">classpath:/templates/</span></span><br><span class="line"><span class="attr">    check-template-location:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    charset:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    suffix:</span> <span class="string">.html</span></span><br></pre></td></tr></table></figure><p>接着添加hello.html在templates文件夹下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>templates<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello from jsbintask blog.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>添加一个controller，映射到该模板<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/templates"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动项目，访问<code>/templates/hello</code>：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/springboot/demo7.png" alt="springboot"></p><h3 id="springboot如何自定义首页面，如何自定义视图"><a href="#springboot如何自定义首页面，如何自定义视图" class="headerlink" title="springboot如何自定义首页面，如何自定义视图"></a>springboot如何自定义首页面，如何自定义视图</h3><ol><li>同上定义模板引擎</li><li>实现<strong>WebMvcConfigurer</strong>接口，添加视图映射<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//前面为访问路径( '/'即为主页面)，后面为视图模板位置（如本例配置的为 templates下）。</span></span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"home"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置文件中如何添加数组属性"><a href="#配置文件中如何添加数组属性" class="headerlink" title="配置文件中如何添加数组属性?"></a>配置文件中如何添加数组属性?</h3><ol><li><p>使用’-‘每行一个属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">value1</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure></li><li><p>使用’,’号隔开每个值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key:</span> <span class="string">value1,</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="使用jpa作数据查询时，发现实体类的id不能序列化？"><a href="#使用jpa作数据查询时，发现实体类的id不能序列化？" class="headerlink" title="使用jpa作数据查询时，发现实体类的id不能序列化？"></a>使用jpa作数据查询时，发现实体类的id不能序列化？</h3><p>这是springboot默认处理了，id不作序列化处理，可以添加如下配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryConfig</span> <span class="keyword">extends</span> <span class="title">RepositoryRestConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureRepositoryRestConfiguration</span><span class="params">(RepositoryRestConfiguration config)</span> </span>&#123;</span><br><span class="line">        config.exposeIdsFor(User.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>采坑记录：最新版springboot已经默认作了此配置。</p><h3 id="springboot修改默认的favicon图标"><a href="#springboot修改默认的favicon图标" class="headerlink" title="springboot修改默认的favicon图标"></a>springboot修改默认的favicon图标</h3><ol><li>同上，继承WebMvcConfigure配置类，添加如下配置：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">"/static/**"</span>).addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX + <span class="string">"/static/"</span>);</span><br><span class="line"></span><br><span class="line">    registry.addResourceHandler(<span class="string">"/favicon.ico"</span>).addResourceLocations(ResourceUtils.CLASSPATH_URL_PREFIX + <span class="string">"/static/images/favicon.jpg"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="springboot的api如何编写单元测试？"><a href="#springboot的api如何编写单元测试？" class="headerlink" title="springboot的api如何编写单元测试？"></a>springboot的api如何编写单元测试？</h3><p>建立在已有的springboot项目上，例如helloController，测试 <code>/hello</code>，编写测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@WebMvcTest</span>(HelloController.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        MvcResult end = mockMvc.perform(requestBuilder(<span class="string">"/hello"</span>))</span><br><span class="line">                .andExpect(mvcResult -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mvcResult.getResponse().getStatus() != <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"failed."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .andExpect(result -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!result.getResponse().getContentType().contains(<span class="string">"json"</span>)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"failed"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).andReturn();</span><br><span class="line"></span><br><span class="line">        System.out.println(end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RequestBuilder <span class="title">requestBuilder</span><span class="params">(String uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MockMvcRequestBuilders.get(URI.create(uri)).accept(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">                .characterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中api看名字便知。</p><h3 id="springboot如何为api配置安全访问？"><a href="#springboot如何为api配置安全访问？" class="headerlink" title="springboot如何为api配置安全访问？"></a>springboot如何为api配置安全访问？</h3><ol><li>参考系列文章：<a href="https://jsbintask.cn/tags/springsecurity/">springsecurity整合springboot从入门到源码解析</a></li></ol><h3 id="springboot整合各种消息队列？"><a href="#springboot整合各种消息队列？" class="headerlink" title="springboot整合各种消息队列？"></a>springboot整合各种消息队列？</h3><ol><li>参考系列文章：<a href="https://jsbintask.cn/tags/jms/">springboot整合各种消息队列</a>（持续更新中）</li></ol><h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><p>今天暂时更新到这，此文章会一直更新！ 或者你有感兴趣的配置，欢迎留言！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>未完待续！<br>例子源码：<a href="https://github.com/jsbintask22/springboot-all-configs-learning.git" target="_blank" rel="noopener">https://github.com/jsbintask22/springboot-all-configs-learning.git</a>，欢迎fork，star学习修改。<br>本文原创地址：<a href="https://jsbintask.cn/2019/02/15/springboot/springboot-all-configs/">https://jsbintask.cn/2019/02/15/springboot/springboot-all-configs/</a>，转载请注明出处。<br>如果你觉得本文对你有用，欢迎关注，分享。这里只有干货！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/flux_config_by_skay20_d4ijq3x-fullview.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="springboot" scheme="https://jsbintask.cn/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>netty极简教程（一）：从helloworld到编写一个聊天室</title>
    <link href="https://jsbintask.cn/2019/01/30/netty/netty-chatroom/"/>
    <id>https://jsbintask.cn/2019/01/30/netty/netty-chatroom/</id>
    <published>2019-01-30T03:11:00.000Z</published>
    <updated>2019-01-30T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/netty/netty-chatroom.gif" alt="chatroom"><br><a id="more"></a></p><h2 id="netty介绍"><a href="#netty介绍" class="headerlink" title="netty介绍"></a>netty介绍</h2><blockquote><p>Nowadays we use general purpose applications or libraries to communicate with each other. For example, we often use an HTTP client library to retrieve information from a web server and to invoke a remote procedure call via web services. However, a general purpose protocol or its implementation sometimes does not scale very well. It is like how we don’t use a general purpose HTTP server to exchange huge files, e-mail messages, and near-realtime messages such as financial information and multiplayer game data. What’s required is a highly optimized protocol implementation that is dedicated to a special purpose. For example, you might want to implement an HTTP server that is optimized for AJAX-based chat application, media streaming, or large file transfer. You could even want to design and implement a whole new protocol that is precisely tailored to your need. Another inevitable case is when you have to deal with a legacy proprietary protocol to ensure the interoperability with an old system. What matters in this case is how quickly we can implement that protocol while not sacrificing the stability and performance of the resulting application.</p></blockquote><p>这是netty的官方介绍，大概意思就是：<br>我们经常希望我们的应用能够和其它应用互相通信。例如，我们经常使用http请求去查询信息或者使用rpc调用webservice，但是对于这种特定的协议（http，ftp等）来说，是不易于专门针对<br>自己应用程序进行扩展的。比方说我们不会使用http协议去<strong>传输大文件，邮件，即时通讯（金融信息）</strong>，这需要对现有协议做出较大的优化！这样我们就可以使用netty定制属于你自己的协议！</p><h2 id="为什么要学netty？"><a href="#为什么要学netty？" class="headerlink" title="为什么要学netty？"></a>为什么要学netty？</h2><p>这里借用<a href="https://www.zhihu.com/question/24322387/answer/282001188" target="_blank" rel="noopener">知乎</a>上一个回答:</p><blockquote><p>作为一个学Java的，如果没有研究过Netty，那么你对Java语言的使用和理解仅仅停留在表面水平，会点SSH，写几个MVC，访问数据库和缓存，这些只是初等Java程序员干的事。如果你要进阶，想了解Java服务器的深层高阶知识，Netty绝对是一个必须要过的门槛。有了Netty，你可以实现自己的HTTP服务器，FTP服务器，UDP服务器，RPC服务器，WebSocket服务器，Redis的Proxy服务器，MySQL的Proxy服务器等等。如果你想知道Nginx是怎么写出来的，如果你想知道Tomcat和Jetty，Dubbo是如何实现的，如果你也想实现一个简单的Redis服务器，那都应该好好理解一下Netty，它们高性能的原理都是类似的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">while</span> ture</span><br><span class="line">     events = takeEvents(fds)  <span class="comment">// 获取事件，如果没有事件，线程就休眠</span></span><br><span class="line">     <span class="keyword">for</span> event in events &#123;</span><br><span class="line">         <span class="keyword">if</span> event.isAcceptable &#123;</span><br><span class="line">             doAccept() <span class="comment">// 新链接来了</span></span><br><span class="line">         &#125; elif event.isReadable &#123;</span><br><span class="line">             request = doRead() <span class="comment">// 读消息</span></span><br><span class="line">             <span class="keyword">if</span> request.isComplete() &#123;</span><br><span class="line">                 doProcess()</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; elif event.isWriteable &#123;</span><br><span class="line">             doWrite()  <span class="comment">// 写消息</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>NIO的流程大致就是上面的伪代码描述的过程，跟实际真实的代码有较多差异，不过对于初学者，这样理解也是足够了。Netty是建立在NIO基础之上，Netty在NIO之上又提供了更高层次的抽象。在Netty里面，Accept连接可以使用单独的线程池去处理，读写操作又是另外的线程池来处理。Accept连接和读写操作也可以使用同一个线程池来进行处理。而请求处理逻辑既可以使用单独的线程池进行处理，也可以跟放在读写线程一块处理。线程池中的每一个线程都是NIO线程。用户可以根据实际情况进行组装，构造出满足系统需求的并发模型。Netty提供了内置的常用编解码器，包括行编解码器［一行一个请求］，前缀长度编解码器［前N个字节定义请求的字节长度］，可重放解码器［记录半包消息的状态］，HTTP编解码器，WebSocket消息编解码器等等Netty提供了一些列生命周期回调接口，当一个完整的请求到达时，当一个连接关闭时，当一个连接建立时，用户都会收到回调事件，然后进行逻辑处理。Netty可以同时管理多个端口，可以使用NIO客户端模型，这些对于RPC服务是很有必要的。Netty除了可以处理TCP Socket之外，还可以处理UDP Socket。在消息读写过程中，需要大量使用ByteBuffer，Netty对ByteBuffer在性能和使用的便捷性上都进行了优化和抽象。总之，Netty是Java程序员进阶的必备神奇。如果你知其然，还想知其所以然，一定要好好研究下Netty。如果你觉得Java枯燥无谓，Netty则是重新开启你对Java兴趣大门的钥匙。</p></blockquote><p><strong>总结：程序员水平进阶的利器！</strong></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p><strong>note: 对于本例中除了非常重要的核心类会讲解外，其他类不会过多讲解，本章只做入门，其它章节会重点讲解！</strong><br>我们已经知道了netty的作用（灵活优化定制你自己的协议），以及为什么要学习netty。那接下来我们就一步一步来定制自己的协议最后完成聊天室！</p><h3 id="print协议"><a href="#print协议" class="headerlink" title="print协议"></a>print协议</h3><p>既然我们取名print协议，那就是打印的意思：服务端接受客服端的信息并且打印！<br>首先我们编写一个<strong>ChannelInboundHandlerAdapter</strong>，用于处理接收到的消息，我们首先分析下这个类的作用，继承关系如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/netty/netty-demo1.png" alt="demo1"><br>它的作用简单概括就是：用于处理 I/O事件的处理器，所以本例我们自然是用它来处理消息，于是乎有了如下类：<strong>PrintServerHandler</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123; <span class="comment">// (2)</span></span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(byteBuf.toString(Charset.forName(<span class="string">"utf-8"</span>)));</span><br><span class="line">        ctx.writeAndFlush(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123; <span class="comment">// (4)</span></span><br><span class="line">        <span class="comment">// Close the connection when an exception is raised.</span></span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>收到消息后打印，接着继续编写一个启动类，用于启动一个开启我们自己协议的服务，<strong>PrintServerApp</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerApp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoServerApp</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossLoopGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup workLoopGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossLoopGroup, workLoopGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> EchoServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(port).sync();</span><br><span class="line"></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossLoopGroup.shutdownGracefully();</span><br><span class="line">            workLoopGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> EchoServerApp(<span class="number">8080</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动。然后我们使用win自带的telnet工具来测试（控制面板-》程序和控制-》开启或关闭window功能，勾选telnet）。打开cmd，输入<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost <span class="number">8080</span></span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/netty/netty-demo2.png" alt="netty"><br>测试成功，我们完成了第一个demo，实现了自己的print协议。接下来我们把客户端也换成netty编写。<strong>目的：启动客户端，获取服务端时间</strong>，叫time协议。</p><h3 id="Time-Protocol"><a href="#Time-Protocol" class="headerlink" title="Time Protocol"></a>Time Protocol</h3><p>首先同上面一样，写一个<strong>TimeServerHandler</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf timeBuf = ctx.alloc().buffer();</span><br><span class="line">        timeBuf.writeBytes(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()).getBytes());</span><br><span class="line"></span><br><span class="line">        ChannelFuture channelFuture = ctx.writeAndFlush(timeBuf);</span><br><span class="line">        channelFuture.addListener(<span class="keyword">new</span> GenericFutureListener&lt;Future&lt;? <span class="keyword">super</span> Void&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(Future&lt;? <span class="keyword">super</span> Void&gt; future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">assert</span> channelFuture == future;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// ctx.close();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123; <span class="comment">// (4)</span></span><br><span class="line">        <span class="comment">// Close the connection when an exception is raised.</span></span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动类同上，接下来，编写客户端<strong>TimeClientHandler</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">            <span class="keyword">int</span> length = byteBuf.readableBytes();</span><br><span class="line">            <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            byteBuf.readBytes(buff, <span class="number">0</span>, length);</span><br><span class="line">            System.out.println(<span class="string">"current time: "</span> + <span class="keyword">new</span> String(buff, <span class="number">0</span>, length));</span><br><span class="line">            ctx.close();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Close the connection when an exception is raised.</span></span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>分别启动服务端，客户端。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/netty/netty-demo3.png" alt="netty"><br>测试结果如图，客户端启动后拿到了服务端的时间，这样我们就实现了自己的time protocol，接下来继续扩展，编写一个客户端与服务端通信的聊天室：</p><h3 id="chatroom-server"><a href="#chatroom-server" class="headerlink" title="chatroom server"></a>chatroom server</h3><p>首先，客户端与服务端通信的信息我们抽象出一个对象，<strong>Message</strong>以及工具类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date sentTime;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encodeMsg</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message.getUsername() + <span class="string">"~"</span> + (<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(message.getSentTime())) + <span class="string">"~"</span> + message.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDateTime</span><span class="params">(Date time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseDateTime</span><span class="params">(String time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd Hh:mm:ss"</span>).parse(time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================================================================================================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"                      "</span> + Utils.formatDateTime(msg.getSentTime()) + <span class="string">"                     "</span>);</span><br><span class="line">        System.out.println(msg.getUsername() + <span class="string">": "</span> + msg.getMsg());</span><br><span class="line">        System.out.println(<span class="string">"================================================================================================="</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个属性分别代表用户名，发送时间，消息内容，接着编写一个用于处理输入消息的handler，用于将<strong>byte</strong>消息转换成<strong>Message</strong>，<strong>ServerTransferMsgHandler</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerTransferMsgHandler</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String totalMsg = in.readCharSequence(in.readableBytes(), Charset.forName(<span class="string">"utf-8"</span>)).toString();</span><br><span class="line">        String[] content = totalMsg.split(<span class="string">"~"</span>);</span><br><span class="line">        out.add(<span class="keyword">new</span> Message(content[<span class="number">0</span>], Utils.parseDateTime(content[<span class="number">1</span>]), content[<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着，编写一个处理接收消息的Handler，用于打印客户端发送过来的消息，<strong>ServerMsgHandler</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerMsgHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"jsbintask-client进入聊天室。"</span>);</span><br><span class="line"></span><br><span class="line">        Message message = <span class="keyword">new</span> Message(Constants.SERVER, <span class="keyword">new</span> Date(), <span class="string">"Hello, I'm jsbintask-server side."</span>);</span><br><span class="line">        ByteBuf buffer = ctx.alloc().buffer();</span><br><span class="line">        String content = Utils.encodeMsg(message);</span><br><span class="line">        buffer.writeBytes(content.getBytes());</span><br><span class="line"></span><br><span class="line">        ctx.writeAndFlush(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg1)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Message msg = (Message) msg1;</span><br><span class="line">            Utils.printMsg(msg);</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.print(<span class="string">"jsbintask-server, please input msg: "</span>);</span><br><span class="line">            String reply = scanner.nextLine();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Message message = <span class="keyword">new</span> Message(Constants.SERVER, <span class="keyword">new</span> Date(), reply);</span><br><span class="line">            ctx.writeAndFlush(message);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ReferenceCountUtil.release(msg1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>知道注意的是，channelActive方法，在客户端链接的时候，率先给客户端发送了一条消息，最后，在编写一个用户将服务端<strong>Message</strong>转成<strong>Byte</strong>消息的handler，MessageEncoder：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">Message</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext ctx, Message message, ByteBuf out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buffer = ctx.alloc().buffer();</span><br><span class="line">        String content = Utils.encodeMsg(message);</span><br><span class="line">        buffer.writeBytes(content.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        ctx.writeAndFlush(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，编写server端启动类，<strong>ChatroomServerApp：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatroomServerApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup workGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup, workGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> MessageEncoder(), <span class="keyword">new</span> ServerTransferMsgHandler(), <span class="keyword">new</span> ServerMsgHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span> * <span class="number">10</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">8888</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动Server，继续编写ChatroomClient。</p><h3 id="chatroom-client"><a href="#chatroom-client" class="headerlink" title="chatroom client"></a>chatroom client</h3><p>同server端一样，client的关键也是handler，ClientMsgHandler如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMsgHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Message</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.channelActive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Message msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Utils.printMsg(msg);</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.print(<span class="string">"jsbintask-client, please input msg: "</span>);</span><br><span class="line">            String reply = scanner.nextLine();</span><br><span class="line"></span><br><span class="line">            Message message = <span class="keyword">new</span> Message(Constants.CLIENT, <span class="keyword">new</span> Date(), reply);</span><br><span class="line">            ByteBuf buffer = ctx.alloc().buffer();</span><br><span class="line">            String content = message.getUsername() + <span class="string">"~"</span> + Utils.formatDateTime(message.getSentTime()) + <span class="string">"~"</span> + message.getMsg();</span><br><span class="line">            buffer.writeBytes(content.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            ctx.writeAndFlush(buffer);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着，同样有将<strong>byte</strong>转换成<strong>Message</strong>的转换器，CliengMsgHandler：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTransferMsgHandler</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2024</span>];</span><br><span class="line">        <span class="keyword">int</span> length = in.readableBytes();</span><br><span class="line">        in.readBytes(buff, <span class="number">0</span>, length);</span><br><span class="line"></span><br><span class="line">        String totalMsg = <span class="keyword">new</span> String(buff, <span class="number">0</span>, length, StandardCharsets.UTF_8);</span><br><span class="line">        String[] content = totalMsg.split(<span class="string">"~"</span>);</span><br><span class="line">        out.add(<span class="keyword">new</span> Message(content[<span class="number">0</span>], Utils.parseDateTime(content[<span class="number">1</span>]), content[<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，启动类ChatroomClientApp：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatroomClientApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        NioEventLoopGroup workLoopGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap clientBootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            clientBootstrap.group(workLoopGroup)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> ClientTransferMsgHandler(), <span class="keyword">new</span> ClientMsgHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .option(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            ChannelFuture channelFuture = clientBootstrap.connect(<span class="string">"localhost"</span>, <span class="number">8888</span>).sync();</span><br><span class="line"></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workLoopGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样启动client，观察控制台。首先，server端提示client进入了聊天室，并且客户端看到了server端发送过来的”招呼“信息：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/netty/netty-demo4.png" alt="netty"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/netty/netty-demo5.png" alt="netty"><br>这样就代表我们的链接建立完毕，接着，客户端，服务端相互发送消息：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/netty/netty-demo6.png" alt="netty"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/netty/netty-demo7.png" alt="netty"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/netty/netty-demo8.png" alt="netty"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/netty/netty-demo9.png" alt="netty"><br>如图，这样，我们的聊天室也就编写成功了，完整demo如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/netty/netty-chatroom.gif" alt="netty"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章，我们开启了学习netty的大门，首先介绍了netty，为什么要学netty，并且通过三个案例一步一步实现了聊天室，成功踏入了netty的大门，下一章，我们就来学习一下netty的架构！<br>例子源码：<a href="https://github.com/jsbintask22/netty-learning.git" target="_blank" rel="noopener">https://github.com/jsbintask22/netty-learning.git</a>，欢迎fork，star学习修改。<br>本文原创地址：<a href="https://jsbintask.cn/2019/01/30/netty/netty-chatroom">https://jsbintask.cn/2019/01/30/netty/netty-chatroom/</a>，转载请注明出处。<br>如果你觉得本文对你有用，欢迎关注，分享！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jsbintask22/static/master/netty/netty-chatroom.gif&quot; alt=&quot;chatroom&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="netty" scheme="https://jsbintask.cn/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>从未这么明白的设计模式（一）：单例模式</title>
    <link href="https://jsbintask.cn/2019/01/29/designpattern/singleton/"/>
    <id>https://jsbintask.cn/2019/01/29/designpattern/singleton/</id>
    <published>2019-01-29T03:11:00.000Z</published>
    <updated>2019-01-29T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/just_a_tree_and_a_breeze____by_joeyjazz-dcxuluw.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a></p><h2 id="什么是单例？为什么要用单例？"><a href="#什么是单例？为什么要用单例？" class="headerlink" title="什么是单例？为什么要用单例？"></a>什么是单例？为什么要用单例？</h2><p>一个类被设计出来，就代表它表示具有某种行为（方法），属性（成员变量），而一般情况下，当我们想使用这个类时，会使用<strong>new</strong>关键字，这时候jvm会帮我们构造一个该类的实例。而我们知道，对于<strong>new</strong>这个关键字以及该实例，相对而言是比较耗费资源的。所以如果我们能够想办法在jvm启动时就<strong>new</strong>好，或者在某一次实例<strong>new</strong>好以后，以后不再需要这样的动作，就能够节省很多资源了。</p><h2 id="哪些类可以使用单例？"><a href="#哪些类可以使用单例？" class="headerlink" title="哪些类可以使用单例？"></a>哪些类可以使用单例？</h2><p>一般而言，我们总是希望<strong>无状态</strong>的类能够设计成单例，那这个<strong>无状态</strong>代表什么呢？ 简单而言，对于同一个实例，如果多个线程同时使用，并且不使用额外的线程同步手段，不会出现线程同步的问题，我们就可以认为是<strong>无状态</strong>的，再简单点：一个类没有成员变量，或者它的成员变量也是<strong>无状态</strong>的，我们就可以考虑设计成单例。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>好了，我们已经知道什么是单例，为什么要使用单例了，那我们接下来继续讨论下怎么实现单例。<br>一般来说，我们可以把单例分为<strong>行为上的单例</strong>和<strong>管理上的单例</strong>。<strong>行为上的单例</strong>代表不管如何操作（此处不谈cloneable，反射），至始至终jvm中都只有一个类的实例，而<strong>管理上的单例</strong>则可以理解为：不管谁去使用这个类，都要守一定的<strong>规矩</strong>，比方说，我们使用某个类，只能从指定的地方’去拿‘，这样拿到就是同一个类了。<br>而对于<strong>管理上的单例</strong>，相信大家最为熟悉的就是spring了，spring将所有的类放到一个<strong>容器</strong>中，以后使用该类都从该<strong>容器</strong>去取，这样就保证了单例。<br>所以这里我们剩下的就是接着来谈谈如何实现<strong>行为上的单例</strong>了。一般来说，这种单例实现有两种思路，<strong>私有构造器，枚举</strong>。</p><h3 id="枚举实现单例"><a href="#枚举实现单例" class="headerlink" title="枚举实现单例"></a>枚举实现单例</h3><p>枚举实现单例是最为推荐的一种方法，因为就算通过序列化，反射等也没办法破坏单例性，例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(SingletonEnum.INSTANCE == SingletonEnum.INSTANCE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果自然是<strong>true</strong>，而如果我们尝试使用反射破坏单例性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> BadSingletonEnum &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(BadSingletonEnum.INSTANCE == BadSingletonEnum.INSTANCE);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;BadSingletonEnum&gt; badSingletonEnumConstructor = BadSingletonEnum.class.getDeclaredConstructor();</span><br><span class="line">        badSingletonEnumConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        BadSingletonEnum badSingletonEnum = badSingletonEnumConstructor.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(BadSingletonEnum.INSTANCE == badSingletonEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NoSuchMethodException: cn.jsbintask.BadSingletonEnum.&lt;init&gt;()</span><br><span class="line">at java.lang.Class.getConstructor0(Class.java:<span class="number">3082</span>)</span><br><span class="line">at java.lang.Class.getDeclaredConstructor(Class.java:<span class="number">2178</span>)</span><br><span class="line">at cn.jsbintask.BadSingletonEnum.main(BadSingletonEnum.java:<span class="number">18</span>)</span><br></pre></td></tr></table></figure></p><p>异常居然是没有<strong>init</strong>方法，这是为什么呢？ 那我们反编译查看下这个枚举类的字节码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class version 52.0 (52)</span></span><br><span class="line"><span class="comment">// access flags 0x4031</span></span><br><span class="line"><span class="comment">// signature Ljava/lang/Enum&lt;Lcn/jsbintask/BadSingletonEnum;&gt;;</span></span><br><span class="line"><span class="comment">// declaration: cn/jsbintask/BadSingletonEnum extends java.lang.Enum&lt;cn.jsbintask.BadSingletonEnum&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">enum</span> cn/jsbintask/BadSingletonEnum extends java/lang/Enum &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// compiled from: BadSingletonEnum.java</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x4019</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">enum</span> Lcn/jsbintask/BadSingletonEnum; INSTANCE</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x101A</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> synthetic [Lcn/jsbintask/BadSingletonEnum; $VALUES</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果发现这个枚举类继承了抽象类<strong>java.lang.Enum</strong>，我们接着看下<strong>Enum</strong>，发现构造器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sole constructor.  Programmers cannot invoke this constructor.</span></span><br><span class="line"><span class="comment">    * It is for use by code emitted by the compiler in response to</span></span><br><span class="line"><span class="comment">    * enum type declarations.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name - The name of this enum constant, which is the identifier</span></span><br><span class="line"><span class="comment">    *               used to declare it.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> ordinal - The ordinal of this enumeration constant (its position</span></span><br><span class="line"><span class="comment">    *         in the enum declaration, where the initial constant is assigned</span></span><br><span class="line"><span class="comment">    *         an ordinal of zero).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">Enum</span><span class="params">(String name, <span class="keyword">int</span> ordinal)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.ordinal = ordinal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那我们接着改变代码，反射调用这个构造器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> BadSingletonEnum &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSTANCE();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(BadSingletonEnum.INSTANCE == BadSingletonEnum.INSTANCE);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;BadSingletonEnum&gt; badSingletonEnumConstructor = BadSingletonEnum.class.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        badSingletonEnumConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        BadSingletonEnum badSingletonEnum = badSingletonEnumConstructor.newInstance(<span class="string">"test"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(BadSingletonEnum.INSTANCE == badSingletonEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.IllegalArgumentException: Cannot reflectively create <span class="keyword">enum</span> objects</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">417</span>)</span><br><span class="line">at cn.jsbintask.BadSingletonEnum.main(BadSingletonEnum.java:<span class="number">21</span>)</span><br></pre></td></tr></table></figure></p><p>这次虽然方法找到了，但是直接给我们了一句<strong>Cannot reflectively create enum objects</strong>，不能够反射创造枚举对象，接着我们继续看下<strong>newInstance（…）</strong>这个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class="line"><span class="function">               IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">                Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">                checkAccess(caller, clazz, <span class="keyword">null</span>, modifiers);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot reflectively create enum objects"</span>);</span><br><span class="line">        ConstructorAccessor ca = constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">        <span class="keyword">if</span> (ca == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ca = acquireConstructorAccessor();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        T inst = (T) ca.newInstance(initargs);</span><br><span class="line">        <span class="keyword">return</span> inst;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>关键代码就是：<strong>if ((clazz.getModifiers() &amp; Modifier.ENUM) != 0) throw new IllegalArgumentException(“Cannot reflectively create enum objects”);</strong>，所以就是jdk从根本上拒绝了使用反射去创建（知道为啥java推荐使用enum实现单例了吧），另外，我们再观察下<strong>Enum</strong>类的clone和序列化方法，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> CloneNotSupportedException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">    ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"can't deserialize enum"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObjectNoData</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"can't deserialize enum"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一眼看出，直接丢出异常，<strong>不允许这么做！（真亲儿子系列）</strong>。<br>所以，结论就是：枚举是最靠谱的实现单例的方式！</p><h3 id="私有构造器"><a href="#私有构造器" class="headerlink" title="私有构造器"></a>私有构造器</h3><p>另外一个实现单例最普通的方法则是<strong>私有构造器，开放获取实例公共方法</strong>，虽然这种方法还是可以用clone，序列化，反射破坏单例性（除非特殊情况，我们不会这么做），但是却是最容易理解使用的。而这种方式又分了<strong>饱汉式</strong>，<strong>饿汉式</strong>。</p><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>看名字就知道，饥渴！（咳咳，开个玩笑），它指的是当一个类被jvm加载的时候就会被实例化，这样可以从根本上解决多个线程的同步问题，例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FullSingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FullSingleton ourInstance = <span class="keyword">new</span> FullSingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FullSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FullSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(FullSingleton.getInstance() == FullSingleton.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果自然是<strong>true</strong>，虽然这种做法很方便的帮我们解决了多线程实例化的问题，但是缺点也很明显，因为这句代码<strong>private static FullSingleton ourInstance = new FullSingleton();</strong>的关系，所以该类一旦被jvm加载就会马上实例化，那如果我们不想用这个类怎么办呢？ 是不是就浪费了呢？既然这样，我们来看下替代方案！ 饱汉式。</p><h4 id="饱汉式"><a href="#饱汉式" class="headerlink" title="饱汉式"></a>饱汉式</h4><p>既然是<strong>饱</strong>，就代表它不着急，那我们可以这么写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungryUnsafeSingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungryUnsafeSingleton instance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungryUnsafeSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> HungryUnsafeSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungryUnsafeSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用意很容易理解，就是用到<strong>getInstance（）</strong>方法才去检查instance，如果为null，就new一个，这样就不怕浪费了，但是这个时候问题就来了：现在有这么一种情况，在有两个线程同时 运行到了  <strong>instane == null</strong>这个语句，并且都通过了，那他们就会都实例化一个对象，这样就又不是单例了。既然这样，哪有什么解决办法呢？ <strong>锁方法</strong></p><ol><li>直接同步方法<br>这种方法比较干脆利落，那就是直接在getInstance（）方法上加锁，这样就解决了线程问题：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySafeSingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungrySafeSingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> HungrySafeSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> HungrySafeSingleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySafeSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HungryUnsafeSingleton.HungryUnsafeSingleton"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(HungrySafeSingleton.getInstance() == HungrySafeSingleton.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>很简单，很容易理解，加锁，只有一个线程能实例该对象。但是，此时问题又来了，我们知道对于静态方法而言，synchronized关键字会锁住整个 Class，这时候又会有性能问题了（尼玛墨迹），那有没有优化的办法呢？ <strong>双重检查锁</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySafeSingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> HungrySafeSingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySafeSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 使用一个本地变量可以提高性能 */</span></span><br><span class="line">        HungrySafeSingleton result = instance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (HungrySafeSingleton.class) &#123;</span><br><span class="line"></span><br><span class="line">                result = instance;</span><br><span class="line">                <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = result = <span class="keyword">new</span> HungrySafeSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySafeSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HungryUnsafeSingleton.HungryUnsafeSingleton"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(HungrySafeSingleton.getInstance() == HungrySafeSingleton.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用意也很明显，synchronized关键字只加在了关键的地方，并且通过本地变量提高了性能（effective java），这样线程安全并且不浪费资源的单例就完成了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章，我们一步一步从什么是单例，到为什么要使用单例，再到怎么使用单例，并且从源码角度分析了为什么枚举是最适合的实现方式，然后接着讲解了饱汉式，饿汉式的写法以及好处，缺点。<br>例子源码：<a href="https://github.com/jsbintask22/design-pattern-learning.git" target="_blank" rel="noopener">https://github.com/jsbintask22/design-pattern-learning.git</a><br>本文原创地址：<a href="https://jsbintask.cn/2019/01/29/designpattern/singleton/">https://jsbintask.cn/2019/01/29/designpattern/singleton/</a>，转载请注明出处。<br>如果你觉得有用，欢迎关注，分享！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/just_a_tree_and_a_breeze____by_joeyjazz-dcxuluw.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="设计模式" scheme="https://jsbintask.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件面试题：如果让你写一个消息队列，该如何进行架构设计？</title>
    <link href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-custommiddleware/"/>
    <id>https://jsbintask.cn/2019/01/28/interview/interview-middleware-custommiddleware/</id>
    <published>2019-01-28T06:05:00.000Z</published>
    <updated>2019-01-28T06:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如果让你写一个消息队列，该如何进行架构设计？说一下你的思路。<br><a id="more"></a></p><p>消息中间件各种面试题：<br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-reliable/">消息中间件面试题：消息丢失怎么办？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/">消息中间件面试题：消息队列的优缺点，区别</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-highavailable/">消息中间件面试题：消息中间件的高可用</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-order/">消息中间件面试题：如何保证消息的顺序性</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-one/">消息中间件面试题：如何保证消息不被重复消费</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-manymessage/">消息中间件面试题：如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时呢？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-custommmiddleware/">消息中间件面试题：如果让你写一个消息队列，该如何进行架构设计？</a></p><h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><p>其实聊到这个问题，一般面试官要考察两块：</p><ul><li>你有没有对某一个消息队列做过较为深入的原理的了解，或者从整体了解把握住一个消息队列的架构原理。</li><li>看看你的设计能力，给你一个常见的系统，就是消息队列系统，看看你能不能从全局把握一下整体架构设计，给出一些关键点出来。</li></ul><p>说实话，问类似问题的时候，大部分人基本都会蒙，因为平时从来没有思考过类似的问题，大多数人就是平时埋头用，从来不去思考背后的一些东西。类似的问题，比如，如果让你来设计一个 Spring 框架你会怎么做？如果让你来设计一个 Dubbo 框架你会怎么做？如果让你来设计一个 MyBatis 框架你会怎么做？</p><h3 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h3><p>其实回答这类问题，说白了，不求你看过那技术的源码，起码你要大概知道那个技术的基本原理、核心组成部分、基本架构构成，然后参照一些开源的技术把一个系统设计出来的思路说一下就好。</p><p>比如说这个消息队列系统，我们从以下几个角度来考虑一下：</p><ul><li><p>首先这个 mq 得支持可伸缩性吧，就是需要的时候快速扩容，就可以增加吞吐量和容量，那怎么搞？设计个分布式的系统呗，参照一下 kafka 的设计理念，broker -&gt; topic -&gt; partition，每个 partition 放一个机器，就存一部分数据。如果现在资源不够了，简单啊，给 topic 增加 partition，然后做数据迁移，增加机器，不就可以存放更多数据，提供更高的吞吐量了？</p></li><li><p>其次你得考虑一下这个 mq 的数据要不要落地磁盘吧？那肯定要了，落磁盘才能保证别进程挂了数据就丢了。那落磁盘的时候怎么落啊？顺序写，这样就没有磁盘随机读写的寻址开销，磁盘顺序读写的性能是很高的，这就是 kafka 的思路。</p></li><li><p>其次你考虑一下你的 mq 的可用性啊？这个事儿，具体参考之前可用性那个环节讲解的 kafka 的高可用保障机制。多副本 -&gt; leader &amp; follower -&gt; broker 挂了重新选举 leader 即可对外服务。</p></li><li><p>能不能支持数据 0 丢失啊？可以的，参考我们之前说的那个 kafka 数据零丢失方案。</p></li></ul><p>mq 肯定是很复杂的，面试官问你这个问题，其实是个开放题，他就是看看你有没有从架构角度整体构思和设计的思维以及能力。确实这个问题可以刷掉一大批人，因为大部分人平时不思考这些东西。</p><p>本文原创地址：<a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-custommmiddleware/">https://jsbintask.cn/2019/01/28/interview/interview-middleware-custommmiddleware/</a>，转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;p&gt;如果让你写一个消息队列，该如何进行架构设计？说一下你的思路。&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://jsbintask.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件面试题：如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时呢？</title>
    <link href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-manymessage/"/>
    <id>https://jsbintask.cn/2019/01/28/interview/interview-middleware-manymessage/</id>
    <published>2019-01-28T06:00:00.000Z</published>
    <updated>2019-01-28T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？<br><a id="more"></a></p><p>消息中间件各种面试题：<br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-reliable/">消息中间件面试题：消息丢失怎么办？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/">消息中间件面试题：消息队列的优缺点，区别</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-highavailable/">消息中间件面试题：消息中间件的高可用</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-order/">消息中间件面试题：如何保证消息的顺序性</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-one/">消息中间件面试题：如何保证消息不被重复消费</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-manymessage/">消息中间件面试题：如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时呢？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-custommmiddleware/">消息中间件面试题：如果让你写一个消息队列，该如何进行架构设计？</a></p><h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><p>你看这问法，其实本质针对的场景，都是说，可能你的消费端出了问题，不消费了；或者消费的速度极其慢。接着就坑爹了，可能你的消息队列集群的磁盘都快写满了，都没人消费，这个时候怎么办？或者是这整个就积压了几个小时，你这个时候怎么办？或者是你积压的时间太长了，导致比如 RabbitMQ 设置了消息过期时间后就没了怎么办？</p><p>所以就这事儿，其实线上挺常见的，一般不出，一出就是大 case。一般常见于，举个例子，消费端每次消费之后要写 mysql，结果 mysql 挂了，消费端 hang 那儿了，不动了；或者是消费端出了个什么岔子，导致消费速度极其慢。<br>关于这个事儿，我们一个一个来梳理吧，先假设一个场景，我们现在消费端出故障了，然后大量消息在 mq 里积压，现在出事故了，慌了。</p><h3 id="大量消息在-mq-里积压了几个小时了还没解决"><a href="#大量消息在-mq-里积压了几个小时了还没解决" class="headerlink" title="大量消息在 mq 里积压了几个小时了还没解决"></a>大量消息在 mq 里积压了几个小时了还没解决</h3><p>几千万条数据在 MQ 里积压了七八个小时，从下午 4 点多，积压到了晚上 11 点多。这个是我们真实遇到过的一个场景，确实是线上故障了，这个时候要不然就是修复 consumer 的问题，让它恢复消费速度，然后傻傻的等待几个小时消费完毕。这个肯定不能在面试的时候说吧。</p><p>一个消费者一秒是 1000 条，一秒 3 个消费者是 3000 条，一分钟就是 18 万条。所以如果你积压了几百万到上千万的数据，即使消费者恢复了，也需要大概 1 小时的时间才能恢复过来。</p><p>一般这个时候，只能临时紧急扩容了，具体操作步骤和思路如下：</p><ul><li>先修复 consumer 的问题，确保其恢复消费速度，然后将现有 consumer 都停掉。</li><li>新建一个 topic，partition 是原来的 10 倍，临时建立好原先 10 倍的 queue 数量。</li><li>然后写一个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，<strong>消费之后不做耗时的处理</strong>，直接均匀轮询写入临时建立好的 10 倍数量的 queue。</li><li>接着临时征用 10 倍的机器来部署 consumer，每一批 consumer 消费一个临时 queue 的数据。这种做法相当于是临时将 queue 资源和 consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。</li><li>等快速消费完积压数据之后，<strong>得恢复原先部署的架构</strong>，<strong>重新</strong>用原先的 consumer 机器来消费消息。</li></ul><h3 id="mq-中的消息过期失效了"><a href="#mq-中的消息过期失效了" class="headerlink" title="mq 中的消息过期失效了"></a>mq 中的消息过期失效了</h3><p>假设你用的是 RabbitMQ，RabbtiMQ 是可以设置过期时间的，也就是 TTL。如果消息在 queue 中积压超过一定的时间就会被 RabbitMQ 给清理掉，这个数据就没了。那这就是第二个坑了。这就不是说数据会大量积压在 mq 里，而是<strong>大量的数据会直接搞丢</strong>。</p><p>这个情况下，就不是说要增加 consumer 消费积压的消息，因为实际上没啥积压，而是丢了大量的消息。我们可以采取一个方案，就是<strong>批量重导</strong>，这个我们之前线上也有类似的场景干过。就是大量积压的时候，我们当时就直接丢弃数据了，然后等过了高峰期以后，比如大家一起喝咖啡熬夜到晚上12点以后，用户都睡觉了。这个时候我们就开始写程序，将丢失的那批数据，写个临时程序，一点一点的查出来，然后重新灌入 mq 里面去，把白天丢的数据给他补回来。也只能是这样了。</p><p>假设 1 万个订单积压在 mq 里面，没有处理，其中 1000 个订单都丢了，你只能手动写程序把那 1000 个订单给查出来，手动发到 mq 里去再补一次。</p><h3 id="mq-都快写满了"><a href="#mq-都快写满了" class="headerlink" title="mq 都快写满了"></a>mq 都快写满了</h3><p>如果消息积压在 mq 里，你很长时间都没有处理掉，此时导致 mq 都快写满了，咋办？这个还有别的办法吗？没有，谁让你第一个方案执行的太慢了，你临时写程序，接入数据来消费，<strong>消费一个丢弃一个，都不要了</strong>，快速消费掉所有的消息。然后走第二个方案，到了晚上再补数据吧。</p><p>本文原创地址：<a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-manymessage/">https://jsbintask.cn/2019/01/28/interview/interview-middleware-manymessage/</a>，转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;p&gt;如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，说说怎么解决？&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://jsbintask.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件面试题：如何保证消息不被重复消费</title>
    <link href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-one/"/>
    <id>https://jsbintask.cn/2019/01/28/interview/interview-middleware-one/</id>
    <published>2019-01-28T04:40:00.000Z</published>
    <updated>2019-01-28T04:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如何保证消息不被重复消费？或者说，如何保证消息消费的幂等性？<br><a id="more"></a></p><p>消息中间件各种面试题：<br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-reliable/">消息中间件面试题：消息丢失怎么办？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/">消息中间件面试题：消息队列的优缺点，区别</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-highavailable/">消息中间件面试题：消息中间件的高可用</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-order/">消息中间件面试题：如何保证消息的顺序性</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-one/">消息中间件面试题：如何保证消息不被重复消费</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-manymessage/">消息中间件面试题：如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时呢？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-custommmiddleware/">消息中间件面试题：如果让你写一个消息队列，该如何进行架构设计？</a></p><h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><p>回答这个问题，首先你别听到重复消息这个事儿，就一无所知吧，你<strong>先大概说一说可能会有哪些重复消费的问题</strong>。</p><p>首先，比如 RabbitMQ、RocketMQ、Kafka，都有可能会出现消息重复消费的问题，正常。因为这问题通常不是 MQ 自己保证的，是由我们开发来保证的。挑一个 Kafka 来举个例子，说说怎么重复消费吧。</p><p>Kafka 实际上有个 offset 的概念，就是每个消息写进去，都有一个 offset，代表消息的序号，然后 consumer 消费了数据之后，<strong>每隔一段时间</strong>（定时定期），会把自己消费过的消息的 offset 提交一下，表示“我已经消费过了，下次我要是重启啥的，你就让我继续从上次消费到的 offset 来继续消费吧”。</p><p>但是凡事总有意外，比如我们之前生产经常遇到的，就是你有时候重启系统，看你怎么重启了，如果碰到点着急的，直接 kill 进程了，再重启。这会导致 consumer 有些消息处理了，但是没来得及提交 offset，尴尬了。重启之后，少数消息会再次消费一次。</p><p>举个栗子。</p><p>有这么个场景。数据 1/2/3 依次进入 kafka，kafka 会给这三条数据每条分配一个 offset，代表这条数据的序号，我们就假设分配的 offset 依次是 152/153/154。消费者从 kafka 去消费的时候，也是按照这个顺序去消费。假如当消费者消费了 <code>offset=153</code> 的这条数据，刚准备去提交 offset 到 zookeeper，此时消费者进程被重启了。那么此时消费过的数据 1/2 的 offset 并没有提交，kafka 也就不知道你已经消费了 <code>offset=153</code> 这条数据。那么重启之后，消费者会找 kafka 说，嘿，哥儿们，你给我接着把上次我消费到的那个地方后面的数据继续给我传递过来。由于之前的 offset 没有提交成功，那么数据 1/2 会再次传过来，如果此时消费者没有去重的话，那么就会导致重复消费。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/mq-10.png" alt="mq-10"></p><p>如果消费者干的事儿是拿一条数据就往数据库里写一条，会导致说，你可能就把数据 1/2 在数据库里插入了 2 次，那么数据就错啦。</p><p>其实重复消费不可怕，可怕的是你没考虑到重复消费之后，<strong>怎么保证幂等性</strong>。</p><p>举个例子吧。假设你有个系统，消费一条消息就往数据库里插入一条数据，要是你一个消息重复两次，你不就插入了两条，这数据不就错了？但是你要是消费到第二次的时候，自己判断一下是否已经消费过了，若是就直接扔了，这样不就保留了一条数据，从而保证了数据的正确性。</p><p>一条数据重复出现两次，数据库里就只有一条数据，这就保证了系统的幂等性。</p><p>幂等性，通俗点说，就一个数据，或者一个请求，给你重复来多次，你得确保对应的数据是不会改变的，<strong>不能出错</strong>。</p><p>所以第二个问题来了，怎么保证消息队列消费的幂等性？</p><p>其实还是得结合业务来思考，我这里给几个思路：</p><ul><li>比如你拿个数据要写库，你先根据主键查一下，如果这数据都有了，你就别插入了，update 一下好吧。</li><li>比如你是写 Redis，那没问题了，反正每次都是 set，天然幂等性。</li><li>比如你不是上面两个场景，那做的稍微复杂一点，你需要让生产者发送每条数据的时候，里面加一个全局唯一的 id，类似订单 id 之类的东西，然后你这里消费到了之后，先根据这个 id 去比如 Redis 里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个 id 写 Redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。</li><li>比如基于数据库的唯一键来保证重复数据不会重复插入多条。因为有唯一键约束了，重复数据插入只会报错，不会导致数据库中出现脏数据。</li></ul><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/mq-11.png" alt="mq-11"></p><p>当然，如何保证 MQ 的消费是幂等性的，需要结合具体的业务来看。</p><p>本文原创地址：<a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-one/">https://jsbintask.cn/2019/01/28/interview/interview-middleware-one/</a>，转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;p&gt;如何保证消息不被重复消费？或者说，如何保证消息消费的幂等性？&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://jsbintask.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件面试题：如何保证消息的顺序性</title>
    <link href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-order/"/>
    <id>https://jsbintask.cn/2019/01/28/interview/interview-middleware-order/</id>
    <published>2019-01-28T04:35:00.000Z</published>
    <updated>2019-01-28T04:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如何保证消息的顺序性？<br><a id="more"></a></p><p>消息中间件各种面试题：<br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-reliable/">消息中间件面试题：消息丢失怎么办？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/">消息中间件面试题：消息队列的优缺点，区别</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-highavailable/">消息中间件面试题：消息中间件的高可用</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-order/">消息中间件面试题：如何保证消息的顺序性</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-one/">消息中间件面试题：如何保证消息不被重复消费</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-manymessage/">消息中间件面试题：如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时呢？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-custommmiddleware/">消息中间件面试题：如果让你写一个消息队列，该如何进行架构设计？</a></p><h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><p>我举个例子，我们以前做过一个 mysql <code>binlog</code> 同步的系统，压力还是非常大的，日同步数据要达到上亿，就是说数据从一个 mysql 库原封不动地同步到另一个 mysql 库里面去（mysql -&gt; mysql）。常见的一点在于说比如大数据 team，就需要同步一个 mysql 库过来，对公司的业务系统的数据做各种复杂的操作。</p><p>你在 mysql 里增删改一条数据，对应出来了增删改 3 条 <code>binlog</code> 日志，接着这三条 <code>binlog</code> 发送到 MQ 里面，再消费出来依次执行，起码得保证人家是按照顺序来的吧？不然本来是：增加、修改、删除；你楞是换了顺序给执行成删除、修改、增加，不全错了么。</p><p>本来这个数据同步过来，应该最后这个数据被删除了；结果你搞错了这个顺序，最后这个数据保留下来了，数据同步就出错了。</p><p>先看看顺序会错乱的俩场景：</p><ul><li><strong>RabbitMQ</strong>：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1/data2/data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者2先执行完操作，把 data2 存入数据库，然后是 data1/data3。这不明显乱了。</li></ul><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/rabbitmq-order-01.png" alt="rabbitmq-order-01"></p><ul><li><strong>Kafka</strong>：比如说我们建了一个 topic，有三个 partition。生产者在写的时候，其实可以指定一个 key，比如说我们指定了某个订单 id 作为 key，那么这个订单相关的数据，一定会被分发到同一个 partition 中去，而且这个 partition 中的数据一定是有顺序的。<br>消费者从 partition 中取出来数据的时候，也一定是有顺序的。到这里，顺序还是 ok 的，没有错乱。接着，我们在消费者里可能会搞<strong>多个线程来并发处理消息</strong>。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十 ms，那么 1 秒钟只能处理几十条消息，这吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。</li></ul><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/kafka-order-01.png" alt="kafka-order-01"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。<br><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/rabbitmq-order-02.png" alt="rabbitmq-order-02"></p><h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><ul><li>一个 topic，一个 partition，一个 consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。</li><li>写 N 个内存 queue，具有相同 key 的数据都到同一个内存 queue；然后对于 N 个线程，每个线程分别消费一个内存 queue 即可，这样就能保证顺序性。</li></ul><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/kafka-order-02.png" alt="kafka-order-02"></p><p>本文原创地址：<a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-order/">https://jsbintask.cn/2019/01/28/interview/interview-middleware-order/</a>，转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;p&gt;如何保证消息的顺序性？&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://jsbintask.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件面试题：消息丢失怎么办？</title>
    <link href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-reliable/"/>
    <id>https://jsbintask.cn/2019/01/28/interview/interview-middleware-reliable/</id>
    <published>2019-01-28T04:30:00.000Z</published>
    <updated>2019-01-28T04:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如何保证消息的可靠性传输？或者说，如何处理消息丢失的问题？<br>如果说你这个是用 MQ 来传递非常核心的消息，比如说计费、扣费的一些消息，那必须确保这个 MQ 传递过程中<strong>绝对不会把计费消息给弄丢</strong>。<br><a id="more"></a></p><p>消息中间件各种面试题：<br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-reliable/">消息中间件面试题：消息丢失怎么办？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/">消息中间件面试题：消息队列的优缺点，区别</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-highavailable/">消息中间件面试题：消息中间件的高可用</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-order/">消息中间件面试题：如何保证消息的顺序性</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-one/">消息中间件面试题：如何保证消息不被重复消费</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-manymessage/">消息中间件面试题：如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时呢？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-custommmiddleware/">消息中间件面试题：如果让你写一个消息队列，该如何进行架构设计？</a></p><h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><p>数据的丢失问题，可能出现在生产者、MQ、消费者中，咱们从 RabbitMQ 和 Kafka 分别来分析一下吧。</p><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/rabbitmq-message-lose.png" alt="rabbitmq-message-lose"></p><h4 id="生产者弄丢了数据"><a href="#生产者弄丢了数据" class="headerlink" title="生产者弄丢了数据"></a>生产者弄丢了数据</h4><p>生产者将数据发送到 RabbitMQ 的时候，可能数据就在半路给搞丢了，因为网络问题啥的，都有可能。</p><p>此时可以选择用 RabbitMQ 提供的事务功能，就是生产者<strong>发送数据之前</strong>开启 RabbitMQ 事务<code>channel.txSelect</code>，然后发送消息，如果消息没有成功被 RabbitMQ 接收到，那么生产者会收到异常报错，此时就可以回滚事务<code>channel.txRollback</code>，然后重试发送消息；如果收到了消息，那么可以提交事务<code>channel.txCommit</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line">channel.txSelect</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 这里发送消息</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    channel.txRollback</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里再次重发这条消息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line">channel.txCommit</span><br></pre></td></tr></table></figure></p><p>但是问题是，RabbitMQ 事务机制（同步）一搞，基本上<strong>吞吐量会下来，因为太耗性能</strong>。</p><p>所以一般来说，如果你要确保说写 RabbitMQ 的消息别丢，可以开启 <code>confirm</code> 模式，在生产者那里设置开启 <code>confirm</code> 模式之后，你每次写的消息都会分配一个唯一的 id，然后如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 <code>ack</code> 消息，告诉你说这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你的一个 <code>nack</code> 接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息 id 的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</p><p>事务机制和 <code>cnofirm</code> 机制最大的不同在于，<strong>事务机制是同步的</strong>，你提交一个事务之后会<strong>阻塞</strong>在那儿，但是 <code>confirm</code> 机制是<strong>异步</strong>的，你发送个消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会异步回调你的一个接口通知你这个消息接收到了。</p><p>所以一般在生产者这块<strong>避免数据丢失</strong>，都是用 <code>confirm</code> 机制的。</p><h4 id="RabbitMQ-弄丢了数据"><a href="#RabbitMQ-弄丢了数据" class="headerlink" title="RabbitMQ 弄丢了数据"></a>RabbitMQ 弄丢了数据</h4><p>就是 RabbitMQ 自己弄丢了数据，这个你必须<strong>开启 RabbitMQ 的持久化</strong>，就是消息写入之后会持久化到磁盘，哪怕是 RabbitMQ 自己挂了，<strong>恢复之后会自动读取之前存储的数据</strong>，一般数据不会丢。除非极其罕见的是，RabbitMQ 还没持久化，自己就挂了，<strong>可能导致少量数据丢失</strong>，但是这个概率较小。</p><p>设置持久化有<strong>两个步骤</strong>：</p><ul><li>创建 queue 的时候将其设置为持久化<br><br>这样就可以保证 RabbitMQ 持久化 queue 的元数据，但是它是不会持久化 queue 里的数据的。</li><li>第二个是发送消息的时候将消息的 <code>deliveryMode</code> 设置为 2<br><br>就是将消息设置为持久化的，此时 RabbitMQ 就会将消息持久化到磁盘上去。</li></ul><p>必须要同时设置这两个持久化才行，RabbitMQ 哪怕是挂了，再次重启，也会从磁盘上重启恢复 queue，恢复这个 queue 里的数据。</p><p>注意，哪怕是你给 RabbitMQ 开启了持久化机制，也有一种可能，就是这个消息写到了 RabbitMQ 中，但是还没来得及持久化到磁盘上，结果不巧，此时 RabbitMQ 挂了，就会导致内存里的一点点数据丢失。</p><p>所以，持久化可以跟生产者那边的 <code>confirm</code> 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 <code>ack</code> 了，所以哪怕是在持久化到磁盘之前，RabbitMQ 挂了，数据丢了，生产者收不到 <code>ack</code>，你也是可以自己重发的。</p><h4 id="消费端弄丢了数据"><a href="#消费端弄丢了数据" class="headerlink" title="消费端弄丢了数据"></a>消费端弄丢了数据</h4><p>RabbitMQ 如果丢失了数据，主要是因为你消费的时候，<strong>刚消费到，还没处理，结果进程挂了</strong>，比如重启了，那么就尴尬了，RabbitMQ 认为你都消费了，这数据就丢了。</p><p>这个时候得用 RabbitMQ 提供的 <code>ack</code> 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 <code>ack</code>，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 <code>ack</code> 一把。这样的话，如果你还没处理完，不就没有 <code>ack</code> 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/rabbitmq-message-lose-solution.png" alt="rabbitmq-message-lose-solution"></p><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><h4 id="消费端弄丢了数据-1"><a href="#消费端弄丢了数据-1" class="headerlink" title="消费端弄丢了数据"></a>消费端弄丢了数据</h4><p>唯一可能导致消费者弄丢数据的情况，就是说，你消费到了这个消息，然后消费者那边<strong>自动提交了 offset</strong>，让 Kafka 以为你已经消费好了这个消息，但其实你才刚准备处理这个消息，你还没处理，你自己就挂了，此时这条消息就丢咯。</p><p>这不是跟 RabbitMQ 差不多吗，大家都知道 Kafka 会自动提交 offset，那么只要<strong>关闭自动提交</strong> offset，在处理完之后自己手动提交 offset，就可以保证数据不会丢。但是此时确实还是<strong>可能会有重复消费</strong>，比如你刚处理完，还没提交 offset，结果自己挂了，此时肯定会重复消费一次，自己保证幂等性就好了。</p><p>生产环境碰到的一个问题，就是说我们的 Kafka 消费者消费到了数据之后是写到一个内存的 queue 里先缓冲一下，结果有的时候，你刚把消息写入内存 queue，然后消费者会自动提交 offset。然后此时我们重启了系统，就会导致内存 queue 里还没来得及处理的数据就丢失了。</p><h4 id="Kafka-弄丢了数据"><a href="#Kafka-弄丢了数据" class="headerlink" title="Kafka 弄丢了数据"></a>Kafka 弄丢了数据</h4><p>这块比较常见的一个场景，就是 Kafka 某个 broker 宕机，然后重新选举 partition 的 leader。大家想想，要是此时其他的 follower 刚好还有些数据没有同步，结果此时 leader 挂了，然后选举某个 follower 成 leader 之后，不就少了一些数据？这就丢了一些数据啊。</p><p>生产环境也遇到过，我们也是，之前 Kafka 的 leader 机器宕机了，将 follower 切换为 leader 之后，就会发现说这个数据就丢了。</p><p>所以此时一般是要求起码设置如下 4 个参数：</p><ul><li>给 topic 设置 <code>replication.factor</code> 参数：这个值必须大于 1，要求每个 partition 必须有至少 2 个副本。</li><li>在 Kafka 服务端设置 <code>min.insync.replicas</code> 参数：这个值必须大于 1，这个是要求一个 leader 至少感知到有至少一个 follower 还跟自己保持联系，没掉队，这样才能确保 leader 挂了还有一个 follower 吧。</li><li>在 producer 端设置 <code>acks=all</code>：这个是要求每条数据，必须是<strong>写入所有 replica 之后，才能认为是写成功了</strong>。</li><li>在 producer 端设置 <code>retries=MAX</code>（很大很大很大的一个值，无限次重试的意思）：这个是<strong>要求一旦写入失败，就无限重试</strong>，卡在这里了。</li></ul><p>我们生产环境就是按照上述要求配置的，这样配置之后，至少在 Kafka broker 端就可以保证在 leader 所在 broker 发生故障，进行 leader 切换时，数据不会丢失。</p><h4 id="生产者会不会弄丢数据？"><a href="#生产者会不会弄丢数据？" class="headerlink" title="生产者会不会弄丢数据？"></a>生产者会不会弄丢数据？</h4><p>如果按照上述的思路设置了 <code>acks=all</code>，一定不会丢，要求是，你的 leader 接收到消息，所有的 follower 都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断的重试，重试无限次。</p><p>本文原创地址：<a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-reliable/">https://jsbintask.cn/2019/01/28/interview/interview-middleware-reliable/</a>，转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;p&gt;如何保证消息的可靠性传输？或者说，如何处理消息丢失的问题？&lt;br&gt;如果说你这个是用 MQ 来传递非常核心的消息，比如说计费、扣费的一些消息，那必须确保这个 MQ 传递过程中&lt;strong&gt;绝对不会把计费消息给弄丢&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://jsbintask.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件面试题：消息中间件的高可用</title>
    <link href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-highavailable/"/>
    <id>https://jsbintask.cn/2019/01/28/interview/interview-middleware-highavailable/</id>
    <published>2019-01-28T04:11:00.000Z</published>
    <updated>2019-01-28T04:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>接着<a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/">上一篇</a>面试题的扩展。</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如何保证消息队列的高可用？<br><a id="more"></a></p><p>消息中间件各种面试题：<br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-reliable/">消息中间件面试题：消息丢失怎么办？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/">消息中间件面试题：消息队列的优缺点，区别</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-highavailable/">消息中间件面试题：消息中间件的高可用</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-order/">消息中间件面试题：如何保证消息的顺序性</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-one/">消息中间件面试题：如何保证消息不被重复消费</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-manymessage/">消息中间件面试题：如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时呢？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-custommmiddleware/">消息中间件面试题：如果让你写一个消息队列，该如何进行架构设计？</a></p><h3 id="RabbitMQ-的高可用性"><a href="#RabbitMQ-的高可用性" class="headerlink" title="RabbitMQ 的高可用性"></a>RabbitMQ 的高可用性</h3><p>RabbitMQ 是比较有代表性的，因为是<strong>基于主从</strong>（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现。</p><p>RabbitMQ 有三种模式：单机模式、普通集群模式、镜像集群模式。</p><h4 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h4><p>单机模式，就是 Demo 级别的，一般就是你本地启动了玩玩儿的😄，没人生产用单机模式。</p><h4 id="普通集群模式（无高可用性）"><a href="#普通集群模式（无高可用性）" class="headerlink" title="普通集群模式（无高可用性）"></a>普通集群模式（无高可用性）</h4><p>普通集群模式，意思就是在多台机器上启动多个 RabbitMQ 实例，每个机器启动一个。你<strong>创建的 queue，只会放在一个 RabbitMQ 实例上</strong>，但是每个实例都同步 queue 的元数据（元数据可以认为是 queue 的一些配置信息，通过元数据，可以找到 queue 所在实例）。你消费的时候，实际上如果连接到了另外一个实例，那么那个实例会从 queue 所在实例上拉取数据过来。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/mq-7.png" alt="mq-7"></p><p>这种方式确实很麻烦，也不怎么好，<strong>没做到所谓的分布式</strong>，就是个普通集群。因为这导致你要么消费者每次随机连接一个实例然后拉取数据，要么固定连接那个 queue 所在实例消费数据，前者有<strong>数据拉取的开销</strong>，后者导致<strong>单实例性能瓶颈</strong>。</p><p>而且如果那个放 queue 的实例宕机了，会导致接下来其他实例就无法从那个实例拉取，如果你<strong>开启了消息持久化</strong>，让 RabbitMQ 落地存储消息的话，<strong>消息不一定会丢</strong>，得等这个实例恢复了，然后才可以继续从这个 queue 拉取数据。</p><p>所以这个事儿就比较尴尬了，这就<strong>没有什么所谓的高可用性</strong>，<strong>这方案主要是提高吞吐量的</strong>，就是说让集群中多个节点来服务某个 queue 的读写操作。</p><h4 id="镜像集群模式（高可用性）"><a href="#镜像集群模式（高可用性）" class="headerlink" title="镜像集群模式（高可用性）"></a>镜像集群模式（高可用性）</h4><p>这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论元数据还是 queue 里的消息都会<strong>存在于多个实例上</strong>，就是说，每个 RabbitMQ 节点都有这个 queue 的一个<strong>完整镜像</strong>，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把<strong>消息同步</strong>到多个实例的 queue 上。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/mq-8.png" alt="mq-8"></p><p>那么<strong>如何开启这个镜像集群模式</strong>呢？其实很简单，RabbitMQ 有很好的管理控制台，就是在后台新增一个策略，这个策略是<strong>镜像集群模式的策略</strong>，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 queue 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。</p><p>这样的话，好处在于，你任何一个机器宕机了，没事儿，其它机器（节点）还包含了这个 queue 的完整数据，别的 consumer 都可以到其它节点上去消费数据。坏处在于，第一，这个性能开销也太大了吧，消息需要同步到所有机器上，导致网络带宽压力和消耗很重！第二，这么玩儿，不是分布式的，就<strong>没有扩展性可言</strong>了，如果某个 queue 负载很重，你加机器，新增的机器也包含了这个 queue 的所有数据，并<strong>没有办法线性扩展</strong>你的 queue。你想，如果这个 queue 的数据量很大，大到这个机器上的容量无法容纳了，此时该怎么办呢？</p><h3 id="Kafka-的高可用性"><a href="#Kafka-的高可用性" class="headerlink" title="Kafka 的高可用性"></a>Kafka 的高可用性</h3><p>Kafka 一个最基本的架构认识：由多个 broker 组成，每个 broker 是一个节点；你创建一个 topic，这个 topic 可以划分为多个 partition，每个 partition 可以存在于不同的 broker 上，每个 partition 就放一部分数据。</p><p>这就是<strong>天然的分布式消息队列</strong>，就是说一个 topic 的数据，是<strong>分散放在多个机器上的，每个机器就放一部分数据</strong>。</p><p>实际上 RabbmitMQ 之类的，并不是分布式消息队列，它就是传统的消息队列，只不过提供了一些集群、HA(High Availability, 高可用性) 的机制而已，因为无论怎么玩儿，RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群下，也是每个节点都放这个 queue 的完整数据。</p><p>Kafka 0.8 以前，是没有 HA 机制的，就是任何一个 broker 宕机了，那个 broker 上的 partition 就废了，没法写也没法读，没有什么高可用性可言。</p><p>比如说，我们假设创建了一个 topic，指定其 partition 数量是 3 个，分别在三台机器上。但是，如果第二台机器宕机了，会导致这个 topic 的 1/3 的数据就丢了，因此这个是做不到高可用的。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/kafka-before.png" alt="kafka-before"></p><p>Kafka 0.8 以后，提供了 HA 机制，就是 replica（复制品） 副本机制。每个 partition 的数据都会同步到其它机器上，形成自己的多个 replica 副本。所有 replica 会选举一个 leader 出来，那么生产和消费都跟这个 leader 打交道，然后其他 replica 就是 follower。写的时候，leader 会负责把数据同步到所有 follower 上去，读的时候就直接读 leader 上的数据即可。只能读写 leader？很简单，<strong>要是你可以随意读写每个 follower，那么就要 care 数据一致性的问题</strong>，系统复杂度太高，很容易出问题。Kafka 会均匀地将一个 partition 的所有 replica 分布在不同的机器上，这样才可以提高容错性。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/kafka-after.png" alt="kafka-after"></p><p>这么搞，就有所谓的<strong>高可用性</strong>了，因为如果某个 broker 宕机了，没事儿，那个 broker上面的 partition 在其他机器上都有副本的，如果这上面有某个 partition 的 leader，那么此时会从 follower 中<strong>重新选举</strong>一个新的 leader 出来，大家继续读写那个新的 leader 即可。这就有所谓的高可用性了。</p><p><strong>写数据</strong>的时候，生产者就写 leader，然后 leader 将数据落地写本地磁盘，接着其他 follower 自己主动从 leader 来 pull 数据。一旦所有 follower 同步好数据了，就会发送 ack 给 leader，leader 收到所有 follower 的 ack 之后，就会返回写成功的消息给生产者。（当然，这只是其中一种模式，还可以适当调整这个行为）</p><p><strong>消费</strong>的时候，只会从 leader 去读，但是只有当一个消息已经被所有 follower 都同步成功返回 ack 的时候，这个消息才会被消费者读到。</p><p>本文原创地址：<a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-highavailable/">https://jsbintask.cn/2019/01/28/interview/interview-middleware-highavailable/</a>，转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接着&lt;a href=&quot;https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/&quot;&gt;上一篇&lt;/a&gt;面试题的扩展。&lt;/p&gt;
&lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;p&gt;如何保证消息队列的高可用？&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://jsbintask.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>中间件面试题：消息队列的优缺点，区别</title>
    <link href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/"/>
    <id>https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/</id>
    <published>2019-01-28T03:11:00.000Z</published>
    <updated>2019-01-28T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul><li>为什么使用消息队列？</li><li>消息队列有什么优点和缺点？</li><li>Kafka、ActiveMQ、RabbitMQ、RocketMQ 都有什么区别，以及适合哪些场景？<a id="more"></a></li></ul><p>消息中间件各种面试题：<br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-reliable/">消息中间件面试题：消息丢失怎么办？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/">消息中间件面试题：消息队列的优缺点，区别</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-highavailable/">消息中间件面试题：消息中间件的高可用</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-order/">消息中间件面试题：如何保证消息的顺序性</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-one/">消息中间件面试题：如何保证消息不被重复消费</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-manymessage/">消息中间件面试题：如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时呢？</a><br><a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-custommmiddleware/">消息中间件面试题：如果让你写一个消息队列，该如何进行架构设计？</a></p><h2 id="面试题剖析"><a href="#面试题剖析" class="headerlink" title="面试题剖析"></a>面试题剖析</h2><h3 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列"></a>为什么使用消息队列</h3><p>先说一下消息队列常见的使用场景吧，其实场景有很多，但是比较核心的有 3 个：<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong>。</p><h4 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h4><p>看这么个场景。A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？A 系统负责人几乎崩溃……</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/mq-1.png" alt="mq-1"></p><p>在这个场景中，A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。A 系统要时时刻刻考虑 BCDE 四个系统如果挂了该咋办？要不要重发，要不要把消息存起来？头发都白了啊！</p><p>如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/mq-2.png" alt="mq-2"></p><p><strong>总结</strong>：通过一个 MQ，Pub/Sub 发布订阅消息这么一个模型，A 系统就跟其它系统彻底解耦了。</p><p><strong>面试技巧</strong>：你需要去考虑一下你负责的系统中是否有类似的场景，就是一个系统或者一个模块，调用了多个系统或者模块，互相之间的调用很复杂，维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果用 MQ 给它异步化解耦，也是可以的，你就需要去考虑在你的项目里，是不是可以运用这个 MQ 去进行系统的解耦。在简历中体现出来这块东西，用 MQ 作解耦。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>再来看一个场景，A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 = 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求，等待个 1s，这几乎是不可接受的。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/mq-3.png" alt="mq-3"></p><p>一般互联网类的企业，对于用户直接的操作，一般要求是每个请求都必须在 200 ms 以内完成，对用户几乎是无感知的。</p><p>如果<strong>使用 MQ</strong>，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 = 8ms，对于用户而言，其实感觉上就是点个按钮，8ms 以后就直接返回了，爽！网站做得真好，真快！</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/mq-4.png" alt="mq-4"></p><h4 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h4><p>每天 0:00 到 12:00，A 系统风平浪静，每秒并发请求数量就 50 个。结果每次一到 12:00 ~ 13:00 ，每秒并发请求数量突然会暴增到 5k+ 条。但是系统是直接基于 MySQL 的，大量的请求涌入 MySQL，每秒钟对 MySQL 执行约 5k 条 SQL。</p><p>一般的 MySQL，扛到每秒 2k 个请求就差不多了，如果每秒请求到 5k 的话，可能就直接把 MySQL 给打死了，导致系统崩溃，用户也就没法再使用系统了。</p><p>但是高峰期一过，到了下午的时候，就成了低峰期，可能也就 1w 的用户同时在网站上操作，每秒中的请求数量可能也就 50 个请求，对整个系统几乎没有任何的压力。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/mq-5.png" alt="mq-5"></p><p>如果使用 MQ，每秒 5k 个请求写入 MQ，A 系统每秒钟最多处理 2k 个请求，因为 MySQL 每秒钟最多处理 2k 个。A 系统从 MQ 中慢慢拉取请求，每秒钟就拉取 2k 个请求，不要超过自己每秒能处理的最大请求数量就 ok，这样下来，哪怕是高峰期的时候，A 系统也绝对不会挂掉。而 MQ 每秒钟 5k 个请求进来，就 2k 个请求出去，结果就导致在中午高峰期（1 个小时），可能有几十万甚至几百万的请求积压在 MQ 中。</p><p><img src="https://raw.githubusercontent.com/doocs/advanced-java/master/images/mq-6.png" alt="mq-6"></p><p>这个短暂的高峰期积压是 ok 的，因为高峰期过了之后，每秒钟就 50 个请求进 MQ，但是 A 系统依然会按照每秒 2k 个请求的速度在处理。所以说，只要高峰期一过，A 系统就会快速将积压的消息给解决掉。</p><h3 id="消息队列有什么优缺点"><a href="#消息队列有什么优缺点" class="headerlink" title="消息队列有什么优缺点"></a>消息队列有什么优缺点</h3><p>优点上面已经说了，就是<strong>在特殊场景下有其对应的好处</strong>，<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong>。</p><p>缺点有以下几个：</p><ul><li><p>系统可用性降低<br><br>系统引入的外部依赖越多，越容易挂掉。本来你就是 A 系统调用 BCD 三个系统的接口就好了，人 ABCD 四个系统好好的，没啥问题，你偏加个 MQ 进来，万一 MQ 挂了咋整，MQ 一挂，整套系统崩溃的，你不就完了？如何保证消息队列的高可用，可以<a href="/docs/high-concurrency/how-to-ensure-high-availability-of-message-queues.md">点击这里查看</a>。</p></li><li><p>系统复杂度提高<br><br>硬生生加个 MQ 进来，你怎么[保证消息没有重复消费]？怎么[处理消息丢失的情况]？怎么保证消息传递的顺序性？头大头大，问题一大堆，痛苦不已。</p></li><li><p>一致性问题<br><br>A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。</p></li></ul><p>所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。但是关键时刻，用，还是得用的。</p><h3 id="Kafka、ActiveMQ、RabbitMQ、RocketMQ-有什么优缺点？"><a href="#Kafka、ActiveMQ、RabbitMQ、RocketMQ-有什么优缺点？" class="headerlink" title="Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？"></a>Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？</h3><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>单机吞吐量</td><td>万级，比 RocketMQ、Kafka 低一个数量级</td><td>同 ActiveMQ</td><td>10 万级，支撑高吞吐</td><td>10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td>topic 数量对吞吐量的影响</td><td></td><td></td><td>topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</td><td>topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td></tr><tr><td>时效性</td><td>ms 级</td><td>微秒级，这是 RabbitMQ 的一大特点，延迟最低</td><td>ms 级</td><td>延迟在 ms 级以内</td></tr><tr><td>可用性</td><td>高，基于主从架构实现高可用</td><td>同 ActiveMQ</td><td>非常高，分布式架构</td><td>非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td>消息可靠性</td><td>有较低的概率丢失数据</td><td>基本不丢</td><td>经过参数优化配置，可以做到 0 丢失</td><td>同 RocketMQ</td></tr><tr><td>功能支持</td><td>MQ 领域的功能极其完备</td><td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td><td>MQ 功能较为完善，还是分布式的，扩展性好</td><td>功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td></tr></tbody></table><p>综上，各种对比之后，有如下建议：</p><p>一般的业务系统要引入 MQ，最早大家都用 ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以大家还是算了吧，我个人不推荐用这个了；</p><p>后来大家开始用 RabbitMQ，但是确实 erlang 语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高；</p><p>不过现在确实越来越多的公司，会去用 RocketMQ，确实很不错（阿里出品），但社区可能有突然黄掉的风险，对自己公司技术实力有绝对自信的，推荐用 RocketMQ，否则回去老老实实用 RabbitMQ 吧，人家有活跃的开源社区，绝对不会黄。</p><p>所以<strong>中小型公司</strong>，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择；<strong>大型公司</strong>，基础架构研发实力较强，用 RocketMQ 是很好的选择。如果是<strong>大数据领域</strong>的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</p><p>本文原创地址：<a href="https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/">https://jsbintask.cn/2019/01/28/interview/interview-middleware-jms/</a>，转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为什么使用消息队列？&lt;/li&gt;
&lt;li&gt;消息队列有什么优点和缺点？&lt;/li&gt;
&lt;li&gt;Kafka、ActiveMQ、RabbitMQ、RocketMQ 都有什么区别，以及适合哪些场景？
    
    </summary>
    
    
      <category term="面试" scheme="https://jsbintask.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合各种消息队列（二）：rabbitmq消息队列</title>
    <link href="https://jsbintask.cn/2019/01/25/springboot/springboot-rabbitmq-jms/"/>
    <id>https://jsbintask.cn/2019/01/25/springboot/springboot-rabbitmq-jms/</id>
    <published>2019-01-25T06:11:00.000Z</published>
    <updated>2019-01-25T06:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/winter_morning_ii_by_dawidzdobylak_dcxw6u1-pre.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a><br>本篇博客将介绍使用rabbitmq消息中间件和springboot的整合使用;</p><h2 id="安装配置rabbitmq"><a href="#安装配置rabbitmq" class="headerlink" title="安装配置rabbitmq"></a>安装配置rabbitmq</h2><p>请参考笔者另一篇博客，有详细介绍：<a href="https://jsbintask.cn/2019/01/25/middleware/docker-rabbitmq-install/#more">https://jsbintask.cn/2019/01/25/middleware/docker-rabbitmq-install/#more</a></p><h2 id="整合springboot"><a href="#整合springboot" class="headerlink" title="整合springboot"></a>整合springboot</h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>新建一个springboot项目，并且修改application.yml文件，pom如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">yourhostaddress</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">jsbintask</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">jsbintask</span></span><br></pre></td></tr></table></figure></p><p>host和password修改成自己的服务器用户名密码。pom：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jsbintask<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-rabbitmq-learning<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-rabbitmq-learning<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="消息消费者（接收者）"><a href="#消息消费者（接收者）" class="headerlink" title="消息消费者（接收者）"></a>消息消费者（接收者）</h3><p>编写一个消息消费者类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Log</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqMsgReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receivedMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"received rabbitmq msg: "</span> + msg);</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>并且加入@Component注解，将其作为bean归spring管理，并且通过@Autowried注入了一个CountdownLatch类。</p><h3 id="配置exchange，queue，route，加入监听："><a href="#配置exchange，queue，route，加入监听：" class="headerlink" title="配置exchange，queue，route，加入监听："></a>配置exchange，queue，route，加入监听：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_EXCHANGE_NAME = <span class="string">"jsbintask-exchange"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTE_KEY = <span class="string">"cn.jsbintask.key"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"jsbintask-queue"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_NAME, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CountDownLatch <span class="title">countDownLatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(TOPIC_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将queue和exchange绑定，并且已 route_key暴漏出去</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding</span><span class="params">(Queue queue, TopicExchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(ROUTE_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleMessageListenerContainer <span class="title">container</span><span class="params">(ConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                             MessageListenerAdapter listenerAdapter)</span> </span>&#123;</span><br><span class="line">        SimpleMessageListenerContainer container = <span class="keyword">new</span> SimpleMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        container.setQueueNames(QUEUE_NAME);</span><br><span class="line">        container.setMessageListener(listenerAdapter);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageListenerAdapter <span class="title">listenerAdapter</span><span class="params">(RabbitmqMsgReceiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receivedMsg"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动测试类，发送消息"><a href="#启动测试类，发送消息" class="headerlink" title="启动测试类，发送消息"></a>启动测试类，发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Log</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootRabbitmqLearningApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(SpringbootRabbitmqLearningApplication.class, args);</span><br><span class="line">        CountDownLatch countDownLatch = context.getBean(CountDownLatch.class);</span><br><span class="line">        RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"Sending msg...."</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConfig.TOPIC_EXCHANGE_NAME, RabbitmqConfig.ROUTE_KEY, <span class="string">"hello from jsbintask."</span>);</span><br><span class="line">        countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动，查看rabbitmq控制台以及idea控制台：收到消息并且打印：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/middleware/rabbitmq-demo3.png" alt="/rabbitmq"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/middleware/rabbitmq-demo4.png" alt="/rabbitmq"><br>这样rabitmq和springboot整合案例就完成了。 源码地址： <a href="https://github.com/jsbintask22/springboot-rabbitmq-learning.git" target="_blank" rel="noopener">https://github.com/jsbintask22/springboot-rabbitmq-learning.git</a><br>本文原创地址：<a href="https://jsbintask.cn/2019/01/25/springboot/springboot-rabbitmq-jms/">https://jsbintask.cn/2019/01/25/springboot/springboot-rabbitmq-jms/</a>，未经允许，禁止转载。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/winter_morning_ii_by_dawidzdobylak_dcxw6u1-pre.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="https://jsbintask.cn/tags/springboot/"/>
    
      <category term="jms" scheme="https://jsbintask.cn/tags/jms/"/>
    
      <category term="rabbitmq" scheme="https://jsbintask.cn/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>docker上配置运行rabbitmq</title>
    <link href="https://jsbintask.cn/2019/01/25/middleware/docker-rabbitmq-install/"/>
    <id>https://jsbintask.cn/2019/01/25/middleware/docker-rabbitmq-install/</id>
    <published>2019-01-25T04:11:00.000Z</published>
    <updated>2019-01-25T04:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>linux下docker安装配置rabbitmq</p><h2 id="直接运行"><a href="#直接运行" class="headerlink" title="直接运行"></a>直接运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --hostname my-rabbit --name some-rabbit -p 5672:5672 -p 15672:15672 -e RABBITMQ_DEFAULT_USER=jsbintask -e RABBITMQ_DEFAULT_PASS=jsbintask rabbitmq:3-management</span><br></pre></td></tr></table></figure><a id="more"></a><p>注意修改成自己的用户名密码.<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/middleware/rabbitmq-demo2.png" alt="/rabbitmq"><br>如果出现错误，请重启防火墙（docker必须映射防火墙配置）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure></p><p>再次运行上面命令，出现容器id代表成功，接着测试，访问：<a href="yourhostname:15672" target="_blank" rel="noopener">youhostname:15672</a>，如下，接着填写上面启动时配置的用户名密码即可：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/middleware/rabbitmq-demo1.png" alt="/rabbitmq"><br>本文原创地址：<a href="https://jsbintask.cn/2019/01/25/middleware/docker-rabbitmq-install/">https://jsbintask.cn/2019/01/25/middleware/docker-rabbitmq-install/</a>，未经允许，禁止转载。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux下docker安装配置rabbitmq&lt;/p&gt;
&lt;h2 id=&quot;直接运行&quot;&gt;&lt;a href=&quot;#直接运行&quot; class=&quot;headerlink&quot; title=&quot;直接运行&quot;&gt;&lt;/a&gt;直接运行&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -d --hostname my-rabbit --name some-rabbit -p 5672:5672 -p 15672:15672 -e RABBITMQ_DEFAULT_USER=jsbintask -e RABBITMQ_DEFAULT_PASS=jsbintask rabbitmq:3-management&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://jsbintask.cn/tags/linux/"/>
    
      <category term="docker" scheme="https://jsbintask.cn/tags/docker/"/>
    
      <category term="rabbit" scheme="https://jsbintask.cn/tags/rabbit/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合各种消息队列（一）：redis消息队列</title>
    <link href="https://jsbintask.cn/2019/01/25/springboot/springboot-redis-jms/"/>
    <id>https://jsbintask.cn/2019/01/25/springboot/springboot-redis-jms/</id>
    <published>2019-01-25T03:11:00.000Z</published>
    <updated>2019-01-25T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/stream_of_autumn_by_leonidafremov-dcxtu6t.jpg" alt="cover"><br><a id="more"></a><br>本篇博客将介绍使用redis作为消息中间件和springboot的整合使用;</p><h2 id="安装配置redis"><a href="#安装配置redis" class="headerlink" title="安装配置redis"></a>安装配置redis</h2><p>请参考笔者另一篇博客，有详细介绍：<a href="https://jsbintask.cn/2019/01/24/middleware/redis-install/#more">https://jsbintask.cn/2019/01/24/middleware/redis-install/#more</a></p><h2 id="整合springboot"><a href="#整合springboot" class="headerlink" title="整合springboot"></a>整合springboot</h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>新建一个springboot项目，并且修改application.yml文件，pom如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">youripaddress</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">jsbintask</span></span><br></pre></td></tr></table></figure></p><p>host和password修改成自己的服务器用户名密码。pom：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jsbintask<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-redis-learning<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-redis-learning<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot redis<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="消息消费者（接收者）"><a href="#消息消费者（接收者）" class="headerlink" title="消息消费者（接收者）"></a>消息消费者（接收者）</h3><p>编写一个消息消费者类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisMessageReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receivedMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"received msg: "</span> + msg);</span><br><span class="line">        <span class="comment">// 计数，减一</span></span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>并且加入@Component注解，将其作为bean归spring管理，并且通过@Autowried注入了一个CountdownLatch类。</p><h3 id="将消息消费者作为监听器监听-redis的消息："><a href="#将消息消费者作为监听器监听-redis的消息：" class="headerlink" title="将消息消费者作为监听器监听 redis的消息："></a>将消息消费者作为监听器监听 redis的消息：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG_TOPIC = <span class="string">"chat"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CountDownLatch <span class="title">countDownLatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息消费者 适配器，其中 receivedMsg为定义的消费者的消费方法，必须保持一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MessageListenerAdapter <span class="title">listenerAdapter</span><span class="params">(RedisMessageReceiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receivedMsg"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">StringRedisTemplate <span class="title">template</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息监听容器，将适配器加入， 注意此处的 topic</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            MessageListenerAdapter listenerAdapter)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        container.addMessageListener(listenerAdapter, <span class="keyword">new</span> PatternTopic(MSG_TOPIC));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动测试类，发送消息"><a href="#启动测试类，发送消息" class="headerlink" title="启动测试类，发送消息"></a>启动测试类，发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootRedisLearningApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext applicationContext = SpringApplication.run(SpringbootRedisLearningApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从 spring中取出已经有的bean</span></span><br><span class="line">        CountDownLatch countDownLatch = applicationContext.getBean(CountDownLatch.class);</span><br><span class="line">        StringRedisTemplate stringRedisTemplate = applicationContext.getBean(StringRedisTemplate.class);</span><br><span class="line">        </span><br><span class="line">        stringRedisTemplate.convertAndSend(RedisConfig.MSG_TOPIC, <span class="string">"hello from jsbintask."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一直等待消息被接收，没接收不退出</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动，查看控制台：收到消息并且打印：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/middleware/redis-demo5.png" alt="/pass"><br>这样redis作为消息队列就成功了。 源码地址： <a href="https://github.com/jsbintask22/springboot-redis-learning" target="_blank" rel="noopener">https://github.com/jsbintask22/springboot-redis-learning</a><br>本文原创地址：<a href="https://jsbintask.cn/2019/01/25/springboot/springboot-redis-jms/">https://jsbintask.cn/2019/01/25/springboot/springboot-redis-jms/</a>，未经允许，禁止转载。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/stream_of_autumn_by_leonidafremov-dcxtu6t.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="https://jsbintask.cn/tags/springboot/"/>
    
      <category term="redis" scheme="https://jsbintask.cn/tags/redis/"/>
    
      <category term="jms" scheme="https://jsbintask.cn/tags/jms/"/>
    
  </entry>
  
  <entry>
    <title>linux上安装配置redis5.0</title>
    <link href="https://jsbintask.cn/2019/01/24/middleware/redis-install/"/>
    <id>https://jsbintask.cn/2019/01/24/middleware/redis-install/</id>
    <published>2019-01-24T03:11:00.000Z</published>
    <updated>2019-01-24T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/redis-white.png" alt="cover"></p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ol><li>下载redis源码<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="2"><li><p>解压编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-5.0.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-5.0.3</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ../redis.conf</span><br></pre></td></tr></table></figure></li></ol><p>找到下图配置，并且去掉前面注释， 后面改成你的密码即可：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/middleware/redis-demo1.png" alt="/pass"><br>去除protectd-mode模式，并且设置所有ip均能访问：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/middleware/redis-demo3.png" alt="/pass"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/middleware/redis-demo4.png" alt="/pass"></p><ol start="4"><li>启动设置，连接测试<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src/redis-server redis.conf &amp;</span><br><span class="line">src/redis-cli -a &#123;你的密码&#125;</span><br><span class="line"><span class="built_in">set</span> name jsbintask</span><br><span class="line">get name</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/jsbintask22/static/master/middleware/redis-demo2.png" alt="/redis"><br>这样就安装设置就成功了。<br>本文原创地址：<a href="https://jsbintask.cn/2019/01/24/middleware/redis-install/">https://jsbintask.cn/2019/01/24/middleware/redis-install/</a>，未经允许，禁止转载。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/redis-white.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;下载redis源码&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget http://download.redis.io/releases/redis-5.0.3.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="redis" scheme="https://jsbintask.cn/tags/redis/"/>
    
      <category term="linux" scheme="https://jsbintask.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>springboot在weblogic中的事务问题</title>
    <link href="https://jsbintask.cn/2019/01/22/webcontainer/weblogic-springboot-tx/"/>
    <id>https://jsbintask.cn/2019/01/22/webcontainer/weblogic-springboot-tx/</id>
    <published>2019-01-22T06:15:00.000Z</published>
    <updated>2019-01-22T06:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/it_almost_feels_like_home____by_porkuspine_dcxn2rk-fullview.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a><br>记录下最近项目中遇到的坑，关于事务的问题，我们的项目使用springboot构建，并且我们的连接池使用的是druid，在本地直接使用springboot打好jar包，<br>一切正常行，然后将项目打包成war包，上到weblogic中，运行也正常，但是一次导入excel表的case中，导入失败了，但是数据没有回滚！经过测试才发现在weblogic中springboot管理的事务失效了，马上查询资料，经过几小时的谷歌后找到了解决办法，在weblogic中放弃自己的连接池，转而使用weblogic中的jndi数据源。<br>配置步骤如下：</p><ol><li>启动weblogic，进入到管理界面，选择服务下边的数据源，点击新建按钮<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/web-container/jndi-demo1.png" alt="mark"></li><li>选择一般数据源，选择你的数据库，输入名字，jndi名称（重要），建议 数据源名称和jndi名字一样，点击下一步<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/web-container/jndi-demo2.png" alt="mark"><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/web-container/jndi-demo3.png" alt="mark"></li><li>接着驱动程序选择 “for instance connections”。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/web-container/jndi-demo4.png" alt="mark"></li><li>事务类型默认<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/web-container/jndi-demo5.png" alt="mark"></li><li>填写数据源信息，最下方的oracle.jdbc.DRCPConnectionClass: 可不填写<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/web-container/jndi-demo6.png" alt="mark"></li><li>继续后下一步确认你的信息<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/web-container/jndi-demo7.png" alt="mark"></li><li>接着下一步，勾上AdminServer，点击完成<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/web-container/jndi-demo8.png" alt="mark"></li><li>建立完毕<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/web-container/jndi-demo9.png" alt="mark"></li><li>修改你的springboot项目配置文件，添加配置：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/web-container/jndi-demo10.png" alt="mark"><br>这里的jndi的name就是刚刚你新建的名字。</li><li>去掉原来的数据源配置（同时存在的话，还是原来的数据源生效），重新打war包，运行，此时事务生效！</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/it_almost_feels_like_home____by_porkuspine_dcxn2rk-fullview.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="springboot" scheme="https://jsbintask.cn/tags/springboot/"/>
    
      <category term="weblogic" scheme="https://jsbintask.cn/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>ins获取个人信息</title>
    <link href="https://jsbintask.cn/2019/01/22/api/ins-api/"/>
    <id>https://jsbintask.cn/2019/01/22/api/ins-api/</id>
    <published>2019-01-22T02:15:00.000Z</published>
    <updated>2019-01-22T06:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/morning_breeze___skyrim_by_watchtheskiies_dcxgxvv-fullview.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a><br>最近想要把ins获取到的个人照片信息放到博客中去，没想到ins的api还有一点坑，记录一下。</p><h2 id="注册client"><a href="#注册client" class="headerlink" title="注册client"></a>注册client</h2><p>为了获取个人信息，我们首先就是要获取token，获取token之前，需要先注册一个client，访问<a href="https://www.instagram.com/developer/clients/register/" target="_blank" rel="noopener">https://www.instagram.com/developer/clients/register/</a>，然后注册一个client，如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/api/client-register.png" alt="client"><br>这里注册的时候，一定要把security中的Disable implicit OAuth 勾去掉，不然后面获取token会401<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/api/token-implicit.png" alt="disable"></p><h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><p>获取有两种方式，我们介绍第二种，直接获取，访问 <a href="https://api.instagram.com/oauth/authorize/?client_id=CLIENT-ID&amp;redirect_uri=REDIRECT-URI&amp;response_type=token，其中" target="_blank" rel="noopener">https://api.instagram.com/oauth/authorize/?client_id=CLIENT-ID&amp;redirect_uri=REDIRECT-URI&amp;response_type=token，其中</a> CLIENT-ID 换成刚刚注册的client的id，REDIRECT-URI换成注册client时填写的地址，成功后，会帮我们重定向到这个地址并且后面会携带你需要的token，如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/api/redirect-uri.png" alt="redirect-uri"><br>然后复制这个token就行了，现在ins文档上面说的时这个token暂时永久的，但是未来可能会改动。</p><h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h2><p>然后我们有了token以后，就可以拿自己的个人信息了，官方文档api如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/api/offical-api.png" alt="offical-api"><br>依次访问如下：<br><a href="https://api.instagram.com/v1/users/self/?access_token=ACCESS-TOKEN" target="_blank" rel="noopener">https://api.instagram.com/v1/users/self/?access_token=ACCESS-TOKEN</a><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/api/api-1.png" alt="api-1"><br><a href="https://api.instagram.com/v1/users/self/media/recent/?access_token=ACCESS-TOKEN" target="_blank" rel="noopener">https://api.instagram.com/v1/users/self/media/recent/?access_token=ACCESS-TOKEN</a><br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/api/api-2.png" alt="api-2"><br>其中ins发的照片包括小图都已经在里面了，拿到这些地址就可以集成到自己用的地方了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/morning_breeze___skyrim_by_watchtheskiies_dcxgxvv-fullview.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="api" scheme="https://jsbintask.cn/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合springsecurity从Hello World到源码解析（五）：springsecurity+jwt整合restful服务</title>
    <link href="https://jsbintask.cn/2019/01/21/springsecurity-restful/"/>
    <id>https://jsbintask.cn/2019/01/21/springsecurity-restful/</id>
    <published>2019-01-21T03:11:00.000Z</published>
    <updated>2019-01-21T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/dcxjswa-c9caad5f-5d54-4460-9ae0-d49cea0397dd.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a><br><a href="https://jsbintask.cn/2019/01/16/springsecurity-architecture/#more">上一章</a>我们详细介绍了springsecurity的基础结构，并且在第三章我们已经知道了springsecurity中的<br>基础配置，但是那是基于all in one模式的，前端页面和后端集成在一起，然而事实上现在越来越多的开发模式是前后端分离，后端提供的restful接口，那我们本章就来学习下<br><strong>springsecurity+jwt</strong>整合restful服务。</p><h1 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h1><p>首先我们先了解下什么是jwt，jwt全称是json web tokens，它是基于<strong>RFC 7519</strong>开放标准用于双方安全展示信息的一种方式。通俗说就是是用于服务端和客户端相互交换信息的一种凭证。<br>这个凭证我们就叫token，在传统的认证模式中，我们普遍的做法是这样的：<br><strong>用户登录-》服务端生成session-》写入sessionId到cookie-》浏览器携带该session访问服务端-》服务器基于该sessionId查找信息-》认证通过（找到了）</strong><br>这种做法存在如下问题：</p><ol><li>服务端需一定资源保存session信息，用户多时资源消耗较大</li><li>扩展性不好，当我们的服务端需要集群时，因session保存在服务端，此时无法定位session，造成登录失效（传统解决办法：iphash，session写入redis等）</li><li>跨域问题，当我们访问A网站时，此时不想再登录就能够访问关联网站B。（传统解决办法：写入持久层，A，B同时访问）<br>虽然上面面对的问题我们普遍都有解决办法，但是显然都不怎么 <strong>”友好“</strong>，所以这个时候就有一种干脆的解决办法了，服务端不再保存session，这样就轻松解决了上面所有问题。<br>服务端只颁发<strong>token</strong>，那么现在的流程变成了这样：<br><strong>用户登录-》服务端颁发token-》客户端保存token（放入cooken或者header）-》携带token访问服务端-》服务端验证token（通过）-》调用api-》获取信息</strong><br>那么既然是服务端颁发的token，那肯定要保证该token的安全（只有该服务端颁发的token才认），唯一（不能伪造），而jwt则是用来生成这个安全的token的。 jwt的组成如下：</li></ol><ul><li>header（头），保存算法，类型</li><li>payload（负载），用户的信息，如id，用户名等等</li><li>signature（签名），将生成的token编码（加密）<br>他们之间用 “.”号隔开，例如：xxxxx.yyyyy.zzzzz<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo20.png" alt="token"></li></ul><h1 id="整合rest服务"><a href="#整合rest服务" class="headerlink" title="整合rest服务"></a>整合rest服务</h1><p>我们知道，在restful服务中，服务端不再直接生成页面了，而是只返回数据（json），客户端渲染，而我们前面的例子已经知道了springsecurity默认也是直接生成整个页面的，所以这里的关键<br>就成了我们需要自己定义返回数据形式了，主要是错误处理，那我们接下来就开始实践。</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h2><p>新建一个springboot项目，pom文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-demos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jsbintask<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>security-jwt-restful<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- jwt --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><p>定义数据源，application.yml文件以及sql脚本如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">jason</span></span><br><span class="line"><span class="attr">    url:</span>  <span class="attr">jdbc:mysql://localhost:3306/springsecurity_demos?useSSL=false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line"><span class="attr">      hibernate:</span></span><br><span class="line"><span class="attr">        format_sql:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.*:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure></p><p>sql脚本如下，本例我们了简单，密码使用明文：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> springsecurity_demos;</span><br><span class="line"><span class="keyword">USE</span> springsecurity_demos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`role`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`role`</span>  (</span><br><span class="line">                       <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">                       <span class="string">`role_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">3</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`role`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'user'</span>, <span class="string">'this is a user role.'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`role`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'admin'</span>, <span class="string">'this is a admin role.'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>  (</span><br><span class="line">                       <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">                       <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       <span class="string">`role_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">2</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'jsbintask'</span>, <span class="string">'123456'</span>, <span class="number">22</span>, <span class="string">'China, Wuhan'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>接着定义实体类domain，repository等，参考之前的<a href="https://jsbintask.cn/2019/01/11/springsecurity-basicconfig/#more">博客</a>，值得注意的是，此处我们的AuthUser稍有不同：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> roles.isEmpty() ? Collections.EMPTY_LIST :</span><br><span class="line">                <span class="comment">// ROLE_ 是springsecurity对于角色的默认前缀，如果不加，验证会失败</span></span><br><span class="line">                (roles.parallelStream().map(role -&gt; <span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_"</span> + role.getRoleName())).collect(Collectors.toList()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="配置securityConfig"><a href="#配置securityConfig" class="headerlink" title="配置securityConfig"></a>配置securityConfig</h2><p>我们和前面章节一样，定义一个SecurityConfig类，继承<strong>WebSecurityConfigurerAdapter</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>, securedEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就是开始详细配置了，前面我们学习<a href="https://jsbintask.cn/2019/01/11/springsecurity-basicconfig/#more">基础配置</a>的时候已经知道，配置的重点是自定义<br><strong>UserDetailsService</strong>，并且我们通过源码的方式知道了是<strong>UsernamePasswordAuthenticationFilter</strong>帮我们认证了用户，并且生成了页面，转发等等。<br>但是！在本例中，因为我们是整合restful服务，返回的都是json数据，所以我们不再需要这些。而既然要返回json数据，那我们先定义好一个通用的数据类，ResultVO：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultVO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// code请自己定义，例如  10成功，20需要登陆  30无权限等等</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而既然我们的服务端是生成jwt，那现在登录的接口就成了生成jwt了，我们首先编写JwtUtil工具类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String secret = <span class="string">"jsbintask@gmail.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateToken</span><span class="params">(String username, List&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        claims.put(<span class="string">"roles"</span>, roles.parallelStream().map(Role::getRoleName).collect(Collectors.joining(<span class="string">","</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .setSubject(username)</span><br><span class="line">                <span class="comment">//创建时间</span></span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">                <span class="comment">//过期时间，我们设置为 五分钟</span></span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>))</span><br><span class="line">                <span class="comment">//签名，通过密钥保证安全性</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, secret)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AuthUser <span class="title">parseToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Claims claims = Jwts.parser()</span><br><span class="line">                .setSigningKey(secret)</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody();</span><br><span class="line">        String username = claims.getSubject();</span><br><span class="line">        String roles = (String) claims.get(<span class="string">"roles"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为生成的时候没有放入密码，所以不需要密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthUser(username, <span class="keyword">null</span>, Arrays.stream(roles.split(<span class="string">","</span>)).map(name -&gt; &#123;</span><br><span class="line">            Role role = <span class="keyword">new</span> Role();</span><br><span class="line">            role.setRoleName(name);</span><br><span class="line">            <span class="keyword">return</span> role;</span><br><span class="line">        &#125;).collect(Collectors.toList()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写生成token的controller，UserController：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RoleRepository roleRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/token"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        User user = userRepository.findByUsername(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span> || !user.getPassword().equals(password)) &#123;</span><br><span class="line">            ResultVO&lt;Object&gt; result = <span class="keyword">new</span> ResultVO&lt;&gt;();</span><br><span class="line">            result.setCode(<span class="number">10</span>);</span><br><span class="line">            result.setMsg(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ResultVO&lt;Object&gt; success = <span class="keyword">new</span> ResultVO&lt;&gt;();</span><br><span class="line">        <span class="comment">//用户名密码正确，生成token给客户端</span></span><br><span class="line">        success.setCode(<span class="number">0</span>);</span><br><span class="line">        List&lt;Role&gt; roles = Collections.singletonList(roleRepository.findById(user.getId()).get());</span><br><span class="line">        success.setData(JwtUtil.generateToken(username, roles));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在定义一个如果异常处理，用于处理请求没有携带token以及一个禁止访问处理器，用于返回没有权限的用户并且全部作为bean<br>TokenExceptionHandler：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenExceptionHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 直接返回 json错误</span></span><br><span class="line">        ResultVO&lt;Object&gt; result = <span class="keyword">new</span> ResultVO&lt;&gt;();</span><br><span class="line">        <span class="comment">//20，标识没有token</span></span><br><span class="line">        result.setCode(<span class="number">20</span>);</span><br><span class="line">        result.setMsg(<span class="string">"请求无效，没有有效token"</span>);</span><br><span class="line"></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        </span><br><span class="line">        response.getWriter().write(objectMapper.writeValueAsString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AccessDeniedHandler：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">security</span>.<span class="title">web</span>.<span class="title">access</span>.<span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 返回我们的自定义json</span></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        ResultVO&lt;Object&gt; result = <span class="keyword">new</span> ResultVO&lt;&gt;();</span><br><span class="line">        <span class="comment">//50，标识有token，但是该用户没有权限</span></span><br><span class="line">        result.setCode(<span class="number">50</span>);</span><br><span class="line">        result.setMsg(<span class="string">"请求无效，没有有效token"</span>);</span><br><span class="line">        response.getWriter().write(objectMapper.writeValueAsString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除此之外，前面我们已经通过debug（第四章）得知，在UsernamePasswordAuthenticationFilter中，springsecurity加入了SecurityContext，既然我们现在不用了，那我们要自己定义拦截器并且加入<br>securityContext以便springsecurity作权限处理，所以我们自定义拦截器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取token，并且解析token，如果解析成功，则放入 SecurityContext</span></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                AuthUser authUser = JwtUtil.parseToken(token);</span><br><span class="line">                <span class="comment">//todo: 如果此处不放心解析出来的 authuser，可以再从数据库查一次，验证用户身份：</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//解析成功</span></span><br><span class="line">                <span class="keyword">if</span> (SecurityContextHolder.getContext().getAuthentication() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//我们依然使用原来filter中的token对象</span></span><br><span class="line">                    UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(authUser, <span class="keyword">null</span>, authUser.getAuthorities());</span><br><span class="line"></span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logger.info(<span class="string">"解析失败，可能是伪造的或者该token已经失效了（我们设置失效5分钟）。"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前面已经说了，我们不再需要UserDetailsService和UsernamePasswordAuthenticationFilter，当然密码加密器也不再需要，那现在我们的websecurity如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>, securedEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TokenExceptionHandler tokenExceptionHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenFilter jwtTokenFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        httpSecurity</span><br><span class="line">                <span class="comment">// 因为我们的token是无状态的，不需要跨站保护</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">// 添加异常处理，以及访问禁止（无权限）处理</span></span><br><span class="line">                .exceptionHandling().authenticationEntryPoint(tokenExceptionHandler).accessDeniedHandler(accessDeniedHandler).and()</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 我们不再需要session了</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line"></span><br><span class="line">                <span class="comment">//定义拦截页面，所有api全部需要认证</span></span><br><span class="line">                .authorizeRequests()</span><br><span class="line"></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后，我们定义 filter，用来替换原来的UsernamePasswordAuthenticationFilter</span></span><br><span class="line">        httpSecurity.addFilterAt(jwtTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web.ignoring()</span><br><span class="line">                <span class="comment">// 让我们获取 token的api不走springsecurity的过滤器，大道开放</span></span><br><span class="line">                .antMatchers(HttpMethod.GET, <span class="string">"/token"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>值得注意的是，我们把 <strong>/token</strong>(登录）这个api完全开放了，因为它根本不需要走过滤器链，接下来我们再写一个Controller用于测试，叫PermissionController：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/permission"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">loginTest</span><span class="params">(@AuthenticationPrincipal AuthUser authUser)</span> </span>&#123;</span><br><span class="line">        ResultVO&lt;String&gt; resultVO = <span class="keyword">new</span> ResultVO&lt;&gt;();</span><br><span class="line">        resultVO.setCode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        resultVO.setData(<span class="string">"你成功访问了该api，这代表你已经登录，你是： "</span> + authUser);</span><br><span class="line">        <span class="keyword">return</span> resultVO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/permission"</span>)</span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('user')"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">loginTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResultVO&lt;String&gt; resultVO = <span class="keyword">new</span> ResultVO&lt;&gt;();</span><br><span class="line">        resultVO.setCode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        resultVO.setData(<span class="string">"你成功访问了需要有 user 角色的api。"</span>);</span><br><span class="line">        <span class="keyword">return</span> resultVO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该controller一共两个api，一个为登录可访问，一个为登陆后还需要有 user角色的api。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>接下来就是见证奇迹的时候了，首先我们直接访问 /8080，我们猜想应该是错误code=20，因为所有api都需要token，结果如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo22.png" alt="/8080"><br>果然和我们想的一样（乱码原因是我们手动new的jackson对象，没有设置编码），同时我们debug JwtTokenFilter，果然在过滤器链中找到了我们的filter，并且替换了原来的UsernamePasswordAuthenticationFilter<br>不见了：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo21.png" alt="/filter"><br>接下来我们登录，访问 <a href="http://localhost:8080/token?username=jsbintask&amp;password=12345" target="_blank" rel="noopener">http://localhost:8080/token?username=jsbintask&amp;password=12345</a>，用户名<br>密码根据自己数据库调整，结果如下：用户名密码错误：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo23.png" alt="/token?"><br>然后我们输入正确的用户名密码，如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo24.png" alt="/token?username=jsbintask&amp;password=123456"><br>果然，我们得到了code=0，代表成功了，并且拿到了token，接下来我们用该token去访问我们的PermissionController：<br>访问不需要身份的 /normal:<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo25.png" alt="/normal"><br>成功！并且看到了我们的信息。<br>接下来访问 /role，需要user身份，我们创建一个没有该身份的用户：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`springsecurity_demos`</span>.<span class="string">`user`</span>(<span class="string">`id`</span>, <span class="string">`address`</span>, <span class="string">`age`</span>, <span class="string">`password`</span>, <span class="string">`role_id`</span>, <span class="string">`username`</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'Wuhan, China'</span>, <span class="number">22</span>, <span class="string">'123456'</span>, <span class="number">22</span>, <span class="string">'jsbintask2'</span>);</span><br></pre></td></tr></table></figure></p><p>同样登陆后，访问：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo26.png" alt="/denied"><br>果然，我们得到了我们自定义的json数据 coe=50，接下来我们切换有该身份的用户：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo27.png" alt="/role"><br>果然成功了!，这样，我们的目的就全部达到了。 restful服务也完全整合好了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本章，我们首先介绍了jwt是什么，以及和传统session的不同，然后我们通过一个完整的例子展示了前面章节所学以及在实际中该如何保护我们的 api。并且成功的达到了我们的目的。<br>本章源码：<a href="https://github.com/jsbintask22/spring-security-demos.git" target="_blank" rel="noopener">https://github.com/jsbintask22/spring-security-demos.git</a><br>到此，我们的spingsecurity系列的文章就写完了，同系列文章地址：<a href="https://jsbintask.cn/tags/springsecurity/">https://jsbintask.cn/tags/springsecurity/</a><br>关注我：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/qrcode_jsbintask.jpg" alt="qrcode"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/dcxjswa-c9caad5f-5d54-4460-9ae0-d49cea0397dd.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="springsecurity" scheme="https://jsbintask.cn/tags/springsecurity/"/>
    
      <category term="springboot" scheme="https://jsbintask.cn/tags/springboot/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>weblogic拦截http basic验证问题</title>
    <link href="https://jsbintask.cn/2019/01/20/webcontainer/weblogic-httpbasic/"/>
    <id>https://jsbintask.cn/2019/01/20/webcontainer/weblogic-httpbasic/</id>
    <published>2019-01-20T02:15:00.000Z</published>
    <updated>2019-01-20T06:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/dcxomq5-a63c130a-2962-407c-b6fb-fc09551eaf11.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a><br>最近项目中因为要集成hessian调用远程服务，因为考虑到安全问题，远程调用需要设置 hessian的用户名密码，然后服务端获取后验证用户名密码，经过调试后发现hessian的用户名密码设置后就是用的basic http验证，说白了就是把用户名密码编码后加入到头里面，并且http header名字叫 Authentication，所以我们服务端获取该头，然后解析，验证就行了，因为我们用的springboot构建的项目，本地调试后一切没问题，之后打war包到weblogic发现一直返回401，因为我们项目定义的也是401，一直以为这是项目问题，没办法，debug才发现，原来是weblogic对于这种http basic验证全部拦截了，execute me！ 查阅weblogic文档，需要加入如下配置：<br><strong>&lt;enforce-valid-basic-auth-credentials&gt;false&lt;enforce-valid-basic-auth-credentials&gt;</strong><br>到config.xml的&lt;security-configuration&gt;节点中，路径如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/web-container/weblogic-basic.png" alt="path"><br>之后再次调用，weblogic不再拦截，搞定。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/dcxomq5-a63c130a-2962-407c-b6fb-fc09551eaf11.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="weblogic" scheme="https://jsbintask.cn/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合springsecurity从Hello World到源码解析（四）：springsecurity基础架构解析</title>
    <link href="https://jsbintask.cn/2019/01/16/springsecurity-architecture/"/>
    <id>https://jsbintask.cn/2019/01/16/springsecurity-architecture/</id>
    <published>2019-01-16T03:11:00.000Z</published>
    <updated>2019-01-16T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/trail_by_grahamtg_dcvhmgg-pre.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a><br><a href="https://jsbintask.cn/2019/01/11/springsecurity-basicconfig/#more">上一章</a>我们讲解了在springsecurity中的基础配置，现在我们再来看看springsecurity的基础架构</p><h1 id="Authentication-and-Access-Control-认证和授权"><a href="#Authentication-and-Access-Control-认证和授权" class="headerlink" title="Authentication and Access Control(认证和授权)"></a>Authentication and Access Control(认证和授权)</h1><p>认证（authentication）和授权（authorization，有的叫Access Control）是所有权限控制框架所要考虑的两个问题，认证就是我们翻译过来就是 “你是谁”，我们可以理解为登录，而授权则是登陆过后明白自己<br>有哪些事情可以做，我们可以理解为 ”你可以做什么“，而在springsecurity将这两者完全分开，并且提供了不同的策略去定义它们。</p><h2 id="Authentication（认证）"><a href="#Authentication（认证）" class="headerlink" title="Authentication（认证）"></a>Authentication（认证）</h2><p>在springsecurity中，认证的主要策略接口是<strong>AuthenticationManager</strong>，嘿嘿，有没有想到我们上一章自定义DetailsService时configure方法就是它（应该说是它的 builder）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthenticationManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> AuthenticationException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它通过authenticate主要可以做三件事情：</p><ol><li>认证成功后返回一个Authentication对象。</li><li>丢出一个AuthenticationException异常，如果认证失败。</li><li>如果它决定不了，返回一个null。<br>而我们对于这个AuthenticationException，springsecurity建议不要自己去catch它，因为springsecurity会自己渲染一个权限错误的页面出来然后展示，并且加上一个WWW-Authenticate头。<br>AuthenticationManager的常用子类是ProviderManager，并且提供了更多的方法，主要成员变量如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderManager</span> <span class="keyword">implements</span> <span class="title">AuthenticationManager</span>, <span class="title">MessageSourceAware</span>,</span></span><br><span class="line"><span class="class"><span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"><span class="comment">// ~ Static fields/initializers</span></span><br><span class="line"><span class="comment">// =====================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(ProviderManager.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ~ Instance fields</span></span><br><span class="line"><span class="comment">// ================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AuthenticationEventPublisher eventPublisher = <span class="keyword">new</span> NullEventPublisher();</span><br><span class="line"><span class="keyword">private</span> List&lt;AuthenticationProvider&gt; providers = Collections.emptyList();</span><br><span class="line"><span class="keyword">protected</span> MessageSourceAccessor messages = SpringSecurityMessageSource.getAccessor();</span><br><span class="line"><span class="keyword">private</span> AuthenticationManager parent;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> eraseCredentialsAfterAuthentication = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProviderManager</span><span class="params">(List&lt;AuthenticationProvider&gt; providers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(providers, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProviderManager</span><span class="params">(List&lt;AuthenticationProvider&gt; providers,</span></span></span><br><span class="line"><span class="function"><span class="params">AuthenticationManager parent)</span> </span>&#123;</span><br><span class="line">Assert.notNull(providers, <span class="string">"providers list cannot be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.providers = providers;</span><br><span class="line"><span class="keyword">this</span>.parent = parent;</span><br><span class="line">checkState();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>我们可以看出，它内部代理了一个 AuthenticationProvider链，而AuthenticationProvider如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>和AuthenticationManager几乎一样，多了一个supports方法，这个方法的作用是用来指定哪些Authentication可以进行权限判断。所以如果我们能自定义Authentication，就要这里返回true了，另外<br>我们再来重点关注下ProviderManager实现的 authenticate方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    Class&lt;? extends Authentication&gt; toTest = authentication.getClass();</span><br><span class="line">    AuthenticationException lastException = <span class="keyword">null</span>;</span><br><span class="line">    Authentication result = <span class="keyword">null</span>;</span><br><span class="line">    Authentication parentResult = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> debug = logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!provider.supports(toTest)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Authentication attempt using "</span></span><br><span class="line">                    + provider.getClass().getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = provider.authenticate(authentication);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                copyDetails(authentication, result);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (AccountStatusException e) &#123;</span><br><span class="line">            prepareException(e, authentication);</span><br><span class="line">            <span class="comment">// SEC-546: Avoid polling additional providers if auth failure is due to</span></span><br><span class="line">            <span class="comment">// invalid account status</span></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InternalAuthenticationServiceException e) &#123;</span><br><span class="line">            prepareException(e, authentication);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            lastException = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Allow the parent to try.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = parentResult = parent.authenticate(authentication);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ProviderNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// ignore as we will throw below if no other exception occurred prior to</span></span><br><span class="line">            <span class="comment">// calling parent and the parent</span></span><br><span class="line">            <span class="comment">// may throw ProviderNotFound even though a provider in the child already</span></span><br><span class="line">            <span class="comment">// handled the request</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            lastException = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eraseCredentialsAfterAuthentication</span><br><span class="line">                &amp;&amp; (result <span class="keyword">instanceof</span> CredentialsContainer)) &#123;</span><br><span class="line">            <span class="comment">// Authentication is complete. Remove credentials and other secret data</span></span><br><span class="line">            <span class="comment">// from authentication</span></span><br><span class="line">            ((CredentialsContainer) result).eraseCredentials();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the parent AuthenticationManager was attempted and successful than it will publish an AuthenticationSuccessEvent</span></span><br><span class="line">        <span class="comment">// This check prevents a duplicate AuthenticationSuccessEvent if the parent AuthenticationManager already published it</span></span><br><span class="line">        <span class="keyword">if</span> (parentResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">            eventPublisher.publishAuthenticationSuccess(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent was null, or didn't authenticate (or throw an exception).</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lastException == <span class="keyword">null</span>) &#123;</span><br><span class="line">        lastException = <span class="keyword">new</span> ProviderNotFoundException(messages.getMessage(</span><br><span class="line">                <span class="string">"ProviderManager.providerNotFound"</span>,</span><br><span class="line">                <span class="keyword">new</span> Object[] &#123; toTest.getName() &#125;,</span><br><span class="line">                <span class="string">"No AuthenticationProvider found for &#123;0&#125;"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prepareException(lastException, authentication);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> lastException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不难看出，就是经过 AuthenticationProvider链一个一个验证，如果一个没有通过，就验证失败，如果都决定不了，由其内部的parent（默认为null）在来决定一次。最后没有结果，就丢出异常。<br>这个内部的parent是用来定义不同资源的访问控制的公共行为的，所以结构图变成了如图：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-authentication.png" alt="authentication"><br>说了这么多，那我们怎么自定义AuthenticationManager呢？ 其实我们上一章已经演示了，继承 <strong>protected void configure(AuthenticationManagerBuilder auth)</strong><br>或者通过@AutoWired注入也行，所以有了它，就可以”为所欲为了“，比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSource dataSource;</span><br><span class="line"></span><br><span class="line">... <span class="comment">// web stuff here</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder builder)</span> </span>&#123;</span><br><span class="line">builder.jdbcAuthentication().dataSource(dataSource).withUser(<span class="string">"jsbintask"</span>)</span><br><span class="line">  .password(<span class="string">"secret"</span>).roles(<span class="string">"USER"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Authorization-or-Access-Control（授权）"><a href="#Authorization-or-Access-Control（授权）" class="headerlink" title="Authorization or Access Control（授权）"></a>Authorization or Access Control（授权）</h2><p>一旦某个实体通过了上面的认证阶段，接下来就该关心授权了！<br>授权的核心类是<strong>AccessDecisionManager</strong>，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccessDecisionManager</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication, Object object,</span></span></span><br><span class="line"><span class="function"><span class="params">Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException,</span></span><br><span class="line"><span class="function">InsufficientAuthenticationException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute attribute)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它有一个抽象继承类，并且三个主要实现类，如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo14.png" alt="authentication"><br>首先我们看下它的默认抽象实现类，AbstractAccessDecisionManager：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAccessDecisionManager</span> <span class="keyword">implements</span> <span class="title">AccessDecisionManager</span>,</span></span><br><span class="line"><span class="class"><span class="title">InitializingBean</span>, <span class="title">MessageSourceAware</span> </span>&#123;</span><br><span class="line"><span class="comment">// ~ Instance fields</span></span><br><span class="line"><span class="comment">// ================================================================================================</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> MessageSourceAccessor messages = SpringSecurityMessageSource.getAccessor();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> allowIfAllAbstainDecisions = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AbstractAccessDecisionManager</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">List&lt;AccessDecisionVoter&lt;? extends Object&gt;&gt; decisionVoters)</span> </span>&#123;</span><br><span class="line">Assert.notEmpty(decisionVoters, <span class="string">"A list of AccessDecisionVoters is required"</span>);</span><br><span class="line"><span class="keyword">this</span>.decisionVoters = decisionVoters;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>是不是相似的感觉，它内部有一个 AccessDecisionVoter 链，和上面的ProviderManager一个套路，这个AccessDecisionVoter我们就叫投票器，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccessDecisionVoter</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ACCESS_GRANTED = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ACCESS_ABSTAIN = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ACCESS_DENIED = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute attribute)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vote</span><span class="params">(Authentication authentication, S object,</span></span></span><br><span class="line"><span class="function"><span class="params">Collection&lt;ConfigAttribute&gt; attributes)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>果然，同一个框架，同一个套路，它又和核心授权AccessDecisionManager接口长得几乎一毛一样，那我们再来重点看下decide方法，但是他在抽象类中没有实现，还有三个子类（上图），<br>通过debug我们知道（不演示了，哈哈），默认实现是<strong>AffirmativeBased</strong>，它实现的方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication, Object object,</span></span></span><br><span class="line"><span class="function"><span class="params">Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> deny = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (AccessDecisionVoter voter : getDecisionVoters()) &#123;</span><br><span class="line">        <span class="keyword">int</span> result = voter.vote(authentication, object, configAttributes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Voter: "</span> + voter + <span class="string">", returned: "</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (result) &#123;</span><br><span class="line">        <span class="keyword">case</span> AccessDecisionVoter.ACCESS_GRANTED:</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> AccessDecisionVoter.ACCESS_DENIED:</span><br><span class="line">            deny++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deny &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(messages.getMessage(</span><br><span class="line">                <span class="string">"AbstractAccessDecisionManager.accessDenied"</span>, <span class="string">"Access is denied"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// To get this far, every AccessDecisionVoter abstained</span></span><br><span class="line">    checkAllowIfAllAbstainDecisions();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>熟悉的味道，和上面认证一样，它也通过  AccessDecisionVoter来施行一票否决权，一个投票人反对，就丢出异常。<br>然后我们看下投票器投票的方法参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vote</span><span class="params">(Authentication authentication, S object, Collection&lt;ConfigAttribute&gt; attributes)</span></span>;</span><br></pre></td></tr></table></figure></p><p>authentication不用说，在系统就是用户的标识，object则是代表你要访问的资源，比如方法，类，文件等等，attributes则是访问该资源需要的标识（有点晦涩），<br>打个比方，如果访问UserController需要又User身份，那这个attributes则是代表 user，它是一个字符串，然后去查找authentication是否有改字符串，有的话投票通过，没有丢出异常。<br>例如  hasRole(‘user’)代表的标识即是 ROLE_USER,。 以上就是认证和授权的核心代码解析了，接下来我们看看web环境中的过滤器链。</p><h1 id="Web-Security"><a href="#Web-Security" class="headerlink" title="Web Security"></a>Web Security</h1><p>首先看图，在servlet容器中，过滤器和servlet的关系如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/servlet-filters.png" alt="servlet-filter"><br>一个http请求最多可由一个servlet处理，但是filter可以有多个，所以filter肯定是有顺序的，因为在filter中是可以处理request的，所以这个时候顺序就显得很重要<br>第二章我们已经知道，springsecurity的过滤器链是由一个FilterChainProxy代理，它作为入口，然后进入过滤器链，而这个入口过滤器的装载顺序如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo15.png" alt="order"><br><strong>SecurityProperties.DEFAULT_FILTER_ORDER</strong>，这个值是比较小的，也就是说它基本就是最后访问的filter了（当然，这只是springboot默认这么做了），最后filter链的结构如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-filters.png" alt="order"><br>事实上，入口的FilterChainProxy 的可以代理多个过滤器链，所以对于不同的url，springsecurity可以创建不同的过滤器链，如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/security-filters-dispatch.png" alt="dispatcher"><br>例如，如果我们的springboot直接构建，加入security依赖，会帮我创建6个过滤器链，并且其中的第一个过滤器链就是放行静态资源，如：<br>/css/** and /images/**, 而最后的一个过滤器链则是匹配所有  /**，也就是我们debug看到的11个默认的过滤器，认证，授权，写头，session管理，异常处理都是在这个默认的过滤器链中，当然<br>一般情况下我们也不需要去管它们(了解下)，至于怎么创建多个过滤器链（api分模块开发可能用到）？ 那就是继承多个 <strong>WebSecurityAdapter</strong>，就像我们之前定义的那样，然后加上<strong>@Order</strong>，如果他们的拦截url<br>重叠了，当然就是排在前的 过滤器链生效了！例如我们可以这么配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Order</span>(SecurityProperties.BASIC_AUTH_ORDER - <span class="number">10</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.antMatcher(<span class="string">"/foo/**"</span>)</span><br><span class="line">      .authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">"/foo/bar"</span>).hasRole(<span class="string">"BAR"</span>)</span><br><span class="line">        .antMatchers(<span class="string">"/foo/spam"</span>).hasRole(<span class="string">"SPAM"</span>)</span><br><span class="line">        .anyRequest().isAuthenticated();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它表示拦截所有 /foo/下面的请求，并且 访问 /foo/bar需要有 BAR角色，访问/foo/spam需要有 SPAM角色，其他所有请求均需要认证过后才能访问。</p><h2 id="方法安全"><a href="#方法安全" class="headerlink" title="方法安全"></a>方法安全</h2><p>上面说了springsecurity的过滤器链的定义，接下来我们说一点在springsecurity中的常用安全注解（好像有点超纲了）。<br>首先我们需要开启方法安全配置，在有@Configuration注解的地方加上<strong>@EnableGlobalMethodSecurity</strong>，它的属性如下：不同名字加上enable就代表可以用对应的注解：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo16.png" alt="dispatcher"><br>例如加上 <strong>securedEnabled = true</strong>，我们就可以这么玩，在service或者controller方法上面：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Secured</span>(<span class="string">"ROLE_USER"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">secure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello Security"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加上<strong>prePostEnabled=true</strong>，就可以这么玩： @PreAuthorize(““), 其中代表一个表达式，如: “hasAnyAuthority(‘test’)”，<br>而一旦用户对应的Authentication没有相应的 test，spel表达式所代表的值，就会丢出AccessDeniedException 异常（下章具体看看这些权限怎么设置）。</p><h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><p>好了，基本我们本章索要讲的东西差不多了，另外还有一个问题，既然springsecurity中把用户以及它的权限表现为一个Authentication，那它的流程应该是这样的：<br><strong>认证成功-》生成authentication-》访问某个特定资源（比如方法）-》检查该authentication是否由该资源的权限-》 1.有（放行） 2.无（丢出异常）-》清除authentication。</strong><br>该流程我们应该已经明白，那问题就是： 这个 authentication springsecurity帮我们放在哪了呢？ 既要能随时能取出来，又能清除，然后如果有很多用户，又要能随时标识不错乱。<br>相信各位已经明白，一个很方便的方法就是 和当前线程绑定在一起！ 那就是  ThreadLocal，当然在springsecurity是通过 SecurityContextHolder来操作这个类的，我们来看下它内部是什么：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityContextHolder</span> </span>&#123;</span><br><span class="line"><span class="comment">// ~ Static fields/initializers</span></span><br><span class="line"><span class="comment">// =====================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODE_THREADLOCAL = <span class="string">"MODE_THREADLOCAL"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODE_INHERITABLETHREADLOCAL = <span class="string">"MODE_INHERITABLETHREADLOCAL"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODE_GLOBAL = <span class="string">"MODE_GLOBAL"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTY = <span class="string">"spring.security.strategy"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String strategyName = System.getProperty(SYSTEM_PROPERTY);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SecurityContextHolderStrategy strategy;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> initializeCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">initialize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.hasText(strategyName)) &#123;</span><br><span class="line">    <span class="comment">// Set default</span></span><br><span class="line">    strategyName = MODE_THREADLOCAL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (strategyName.equals(MODE_THREADLOCAL)) &#123;</span><br><span class="line">    strategy = <span class="keyword">new</span> ThreadLocalSecurityContextHolderStrategy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strategyName.equals(MODE_INHERITABLETHREADLOCAL)) &#123;</span><br><span class="line">    strategy = <span class="keyword">new</span> InheritableThreadLocalSecurityContextHolderStrategy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strategyName.equals(MODE_GLOBAL)) &#123;</span><br><span class="line">    strategy = <span class="keyword">new</span> GlobalSecurityContextHolderStrategy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Try to load a custom strategy</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Class&lt;?&gt; clazz = Class.forName(strategyName);</span><br><span class="line">    Constructor&lt;?&gt; customStrategy = clazz.getConstructor();</span><br><span class="line">    strategy = (SecurityContextHolderStrategy) customStrategy.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    ReflectionUtils.handleReflectionException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    initializeCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出，除非通过jvm指定，不然默认生成了一个<strong>ThreadLocalSecurityContextHolderStrategy</strong>，然后它内部是这样子的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalSecurityContextHolderStrategy</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class"><span class="title">SecurityContextHolderStrategy</span> </span>&#123;</span><br><span class="line"><span class="comment">// ~ Static fields/initializers</span></span><br><span class="line"><span class="comment">// =====================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SecurityContext&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ~ Methods</span></span><br><span class="line"><span class="comment">// ========================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">contextHolder.remove();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityContext <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SecurityContext ctx = contextHolder.get();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ctx == <span class="keyword">null</span>) &#123;</span><br><span class="line">ctx = createEmptyContext();</span><br><span class="line">contextHolder.set(ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ctx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(SecurityContext context)</span> </span>&#123;</span><br><span class="line">Assert.notNull(context, <span class="string">"Only non-null SecurityContext instances are permitted"</span>);</span><br><span class="line">contextHolder.set(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityContext <span class="title">createEmptyContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SecurityContextImpl();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>果然，内部是<strong>ThreadLocal</strong>，所以springsecurity是帮我们把Authentication放到了threadlocal中，我们回想第二章登录的例子，有一个UsernamePasswordAuthenticationFilter，大胆猜测如果通过认证，<br>就是在这个过滤器中加入的，那我们debug看下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo17.png" alt="usernamepasswordfilter"><br>图上已经说清楚了，那结果就是经过ProviderManager后，验证通过，然后继续走：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo18.png" alt="internalfilter"><br>最后走<strong>successfulAuthentication</strong>这个方法，最终，这个方法我们找到了答案：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo19.png" alt="successful"><br>设置成功后，就是帮我们转发到了主页面了。 所以后面这个SecurityContext有了值以后，我们就可以在controller或者其它地方随意使用了。<br>使用方法就是  <strong>SecurityContextHolder.getContext().getAuthentication()</strong>了，当然springsecurity提供了一种更加简便的方式，controller中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/foo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">foo</span><span class="params">(@AuthenticationPrincipal User user)</span> </span>&#123;</span><br><span class="line">  ... <span class="comment">// do stuff with user</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的user就是通过<strong>SecurityContextHolder.getContext().getAuthentication().getPrincipal()</strong>得出来的，当然，你也可以这么写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/foo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">foo</span><span class="params">(Principal principal)</span> </span>&#123;</span><br><span class="line">  Authentication authentication = (Authentication) principal;</span><br><span class="line">  User = (User) authentication.getPrincipal();</span><br><span class="line">  ... <span class="comment">// do stuff with user</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本章，我们首先分析了springsecurity的基础结构，以及它们是如何工作的，然后又通过源码简单验证了我们的分析。 最后介绍了一些使用方法，接下来就是我们的最后一章了。<br>springboot+springsecurity+jwt整合 restful 服务。<br>关注我！<br><img src="http://qiniu.jsbintask.cn/qrcode_jsbintask_1.jpg" alt="qrcode"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/trail_by_grahamtg_dcvhmgg-pre.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="springsecurity" scheme="https://jsbintask.cn/tags/springsecurity/"/>
    
      <category term="springboot" scheme="https://jsbintask.cn/tags/springboot/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>linux环境中vsftp的常用配置</title>
    <link href="https://jsbintask.cn/2019/01/11/linux/linux-vsftpd-config/"/>
    <id>https://jsbintask.cn/2019/01/11/linux/linux-vsftpd-config/</id>
    <published>2019-01-11T02:15:00.000Z</published>
    <updated>2019-01-11T06:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/free_to_die_as_you_want___skyrim_by_watchtheskies45_dcx0jin-fullview.jpg-blog_960_440.jpg" alt="vsftpd"><br><a id="more"></a></p><h1 id="Linux上vsftpd的配置"><a href="#Linux上vsftpd的配置" class="headerlink" title="Linux上vsftpd的配置"></a>Linux上vsftpd的配置</h1><p>最近正好项目遇上需要配置ftp的情况，感觉对于ftp的配置都差不多，所以特意写下本篇博客，话不多说，直接动手。<br><strong><em>配置最终目的如下：<br>1.取消匿名登陆，必须账号密码登陆<br>2.只有配置文件中的用户允许登陆<br>3.所有用户登陆后访问相同的ftp环境<br>4.所有用户不能够切换到上级目录</em></strong></p><h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><p>新建一个不能ssh登陆的用户，作为我们的ftp的访问用户（不用root）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd ftp_user -d /home/ftp_user -s /sbin/nologin ftp_user  --新建用户 ftp_user并且主目录为/home/ftp_user</span><br><span class="line">chmod -R 755 /home/ftp_user  --修改该目录访问权限</span><br><span class="line">passwd ftp_user  --设置该账号密码</span><br></pre></td></tr></table></figure></p><h2 id="安装配置vsftpd"><a href="#安装配置vsftpd" class="headerlink" title="安装配置vsftpd"></a>安装配置vsftpd</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vsftpd  --安装</span><br><span class="line">cd /etc/vsftpd  --切换到vsftp目录下</span><br><span class="line">mv vsftpd.conf vsftpd.conf.bak  --备份原来的配置文件</span><br><span class="line">wget http://resource.jsbintask.cn/vsftpd/vsftpd.conf  --获取配置文件</span><br></pre></td></tr></table></figure><p>改配置文件已经做好了大多数的配置，如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/vsftpd/vsftpd-demo1.png" alt="vsftpd"><br>接下来编辑改配置文件，vim vsftpd.conf，在最下方加入我们一开始配置用户设置的主文件夹：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_root=/home/ftp_user</span><br></pre></td></tr></table></figure></p><p>接下来编辑ftpusers，删除所有配置，空文件就行（该文件是哪些用户不能访问）<br>编辑user_list（该文件控制哪些用户可以登录ftp），加入我们刚刚添加的用户ftp_user，删掉其他所有行数，例如：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/vsftpd/vsftpd-demo2.png" alt="vsftpd"><br>只有用户jason和root可以登录。</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd start</span><br></pre></td></tr></table></figure><p>如果启动过程中报错，重新编辑vsftp.conf，注释掉 改行（这是vsftpd2.3以后的新配置）：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/vsftpd/vsftpd-demo3.png" alt="vsftpd"><br>重新启动，成功。<br>接下来使用ftp工具连接即可</p><h2 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h2><ol><li>关闭防火墙或者开启如下端口  20， 21（ftp）， 61001-62000范围端口。</li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://resource.jsbintask.cn/vsftpd/config.sh</span><br></pre></td></tr></table></figure></li></ol><p>运行 config.sh，如果运行失败，请修改脚本中的 setsebool -P tftp_home_dir 1 为 setsebool -P ftp_home_dir 1</p><ol start="3"><li>编辑安全配置文件 vim /etc/sysconfig/selinux，SELINUX=enforcing 改为 SELINUX=disabled<br>再次访问，成功。<br>关注我！<br><img src="http://qiniu.jsbintask.cn/qrcode_jsbintask_1.jpg" alt="qrcode"></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/free_to_die_as_you_want___skyrim_by_watchtheskies45_dcx0jin-fullview.jpg-blog_960_440.jpg&quot; alt=&quot;vsftpd&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://jsbintask.cn/tags/linux/"/>
    
      <category term="运维" scheme="https://jsbintask.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合springsecurity从Hello World到源码解析（三）-基础配置详解</title>
    <link href="https://jsbintask.cn/2019/01/11/springsecurity-basicconfig/"/>
    <id>https://jsbintask.cn/2019/01/11/springsecurity-basicconfig/</id>
    <published>2019-01-11T02:15:00.000Z</published>
    <updated>2019-01-11T06:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.jsbintask.cn/dmease-472de8ab-809d-4979-b023-bcaeefe493f9.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a><br><em><a href="https://jsbintask.cn/2019/01/08/springsecurity-configsourcecode/#more">上一章</a>我们从源码角度探究了springboot对于帮我们初始化的springsecurity默认配置，这章我们来学习下springsecurity中的基础配置</em></p><h1 id="修改基础配置"><a href="#修改基础配置" class="headerlink" title="修改基础配置"></a>修改基础配置</h1><ul><li>上一章我们已经知道，springsecurity中所有配置基本都来源于一个默认的WebSecurityConfigurerAdapter，那我们首先写一个类继承它，放弃springboot帮我们做的默认配置，<br>叫SecurityConfig，为了看到更多的配置，我们加上一个注解（其实springboot已经帮我们加上），@EnableWebSecurity(debug = true)，修改debug位true，<br>然后打开我们的配置文件application.yml，修改spring的log信息为debug，如下：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  freemarker:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    template-loader-path:</span> <span class="attr">classpath:/templates/</span></span><br><span class="line"><span class="attr">    suffix:</span> <span class="string">.html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">      roles:</span> <span class="string">user,</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.*:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h1><ul><li>打开SecurityConfig，首先明确我们的目的：修改原来的登陆页面，登陆成功后，跳转到我们的hello页面，所以首先添加登陆页面login.html，并且添加视图解析（和第一章一样添加controller同样效果）：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">This is login page from jsbintask</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>这里请记住这个表单提交的地址/login，写一个类WebMvcConfig实现WebMvcConfigurer（2.0以前需要继承WebMvcConfigurerAdapter），添加如下配置:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/index"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>接着继续回来SecurityConfig,首先覆盖下原方法<strong>configure(HttpSecurity http)</strong>，我们看下原来实现是什么：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">logger.debug(<span class="string">"Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity)."</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">.authorizeRequests()</span><br><span class="line">.anyRequest().authenticated()</span><br><span class="line">.and()</span><br><span class="line">.formLogin().and()</span><br><span class="line">.httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>可以看出，默认配置就是所有页面全部被拦截，开启登陆表单验证以及http basic验证，我们继续查看<strong>formLogin()</strong>方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> FormLoginConfigurer&lt;HttpSecurity&gt; <span class="title">formLogin</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getOrApply(<span class="keyword">new</span> FormLoginConfigurer&lt;&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>熟悉的apply方法，上一章已经介绍，这是添加拦截器，FormLoginConfigurer如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FormLoginConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="keyword">new</span> UsernamePasswordAuthenticationFilter(), <span class="keyword">null</span>);</span><br><span class="line">usernameParameter(<span class="string">"username"</span>);</span><br><span class="line">passwordParameter(<span class="string">"password"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加了一个UsernamePasswordAuthenticationFilter拦截器。接下来，我们修改configure配置如下，值得注意的是，因为现在我们的页面是自己的定义，但是所有页面<br>都是需要权限的，所以我们必须放行登陆（error页面在BaseErrorController中定义），错误页面：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">"/index"</span>)</span><br><span class="line">            <span class="comment">// 和login.html中表单提交的一直必须一样，这样才能让springsecurity帮你处理请求</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">"/index"</span>, <span class="string">"/login"</span>, <span class="string">"/error"</span>).permitAll()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着启动项目，查看控制台，发现多个springsecurity的日志：<br>o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@60d40ff4, org.springframework.security.web.context.SecurityContextPersistenceFilter@58867cd5, org.springframework.security.web.header.HeaderWriterFilter@2c05ff9d, org.springframework.security.web.csrf.CsrfFilter@44ed0a8f, org.springframework.security.web.authentication.logout.LogoutFilter@70211df5, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4c5228e7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5a8ab2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@71926a36, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2e5b7fba, org.springframework.security.web.session.SessionManagementFilter@2e1ddc90, org.springframework.security.web.access.ExceptionTranslationFilter@2687725a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@c29fe36]<br>看得出这就是我们上一章说的过滤器链了。并且UsernamePasswordAuthenticationFilter也在其中<br>接下来打开浏览器，直接访问主界面， <a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a>，自动跳转到了我们自定义的登陆页面：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo8.png" alt="security"><br>然后点击提交，发现403错误了，纳尼？ 赶紧检查控制台，发现走了一个CrsfFilter，这个filter需要一个参数，防止xss攻击的，但是我们不需要，所以我们禁掉，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">"/index"</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">"/index"</span>, <span class="string">"/login"</span>, <span class="string">"/error"</span>, <span class="string">"/favicon.ico"</span>).permitAll()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf()</span><br><span class="line">            .disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这回正常了，我们输入错误的用户名，密码，果然，回到了原来的登陆页面，如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo9.png" alt="security"><br>并且后面带了一个error的参数，所以如果我们的login页面再做下处理，就能回显用户名密码错误了。然后我们继续输入我们一开始已经配置用户名密码，继续，这回出现了404，<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo10.png" alt="security"><br>看地址我们知道它是登陆成功后帮我回到了 <a href="http://localhost:8080作为了默认页面，所以我们要加上登陆成功后的页面如下，也就是hello" target="_blank" rel="noopener">http://localhost:8080作为了默认页面，所以我们要加上登陆成功后的页面如下，也就是hello</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.formLogin()</span><br><span class="line">            .loginPage(<span class="string">"/index"</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">            .successForwardUrl(<span class="string">"/hello"</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">"/index"</span>, <span class="string">"/login"</span>, <span class="string">"/error"</span>, <span class="string">"/favicon.ico"</span>).permitAll()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf()</span><br><span class="line">            .disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续登陆，果然，成功后帮我们重定向到了hello页面：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo11.png" alt="security"></p><h1 id="自定义数据查询"><a href="#自定义数据查询" class="headerlink" title="自定义数据查询"></a>自定义数据查询</h1><p>经过上面的配置，我们一开始的目的达到了，自定义登陆页面，并且登陆成功后跳转到主界面，但是现在还有个问题是，我们的用户名密码是配置配置文件中的，这样肯定不行，<br>因为我们一般都是使用数据库的。接下来就是我们自定义数据源了。</p><h2 id="内存中的数据源"><a href="#内存中的数据源" class="headerlink" title="内存中的数据源"></a>内存中的数据源</h2><p>上一篇博客我们已经通过源码分析了springboot在启动的时候帮我们初始化了一个在内存中的UserDetailService，如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo12.png" alt="security"><br>那我们现在先来覆盖掉这个，回到先前的SecurityConfig，并且继承方法<strong>configure(AuthenticationManagerBuilder auth)</strong>，<br>在自定义UserDetailsService的时候，发现它要求返回一个UserDetails，所以我们需要继承这个类来返回自己的实体类User，因为我们这里使用内存中的实现，可以直接用它提供的工具方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    auth.userDetailsService(<span class="keyword">new</span> InMemoryUserDetailsManager(</span><br><span class="line">            User.builder().username(<span class="string">"jsbintask1"</span>).password(<span class="string">"&#123;noop&#125;123456"</span>).authorities(<span class="string">"jsbintask1"</span>).build(),</span><br><span class="line">            User.builder().username(<span class="string">"jsbintask2"</span>).password(<span class="string">"&#123;noop&#125;123456"</span>).authorities(<span class="string">"jsbintask2"</span>).build()</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>值得注意的是，如果我们以这种方式定义密码的时候，要在密码前面加上{noop}这个前缀或者配置一个密码加密器的bean，否则验证会出错。另外还有一点就是一定要添加roles或者authorities，<br>否则springsecurity不予通过。现在我们重新登陆，并且使用一开始配置文件中的用户名密码，发现此时已经不行了。 再用我们的新用户名密码，通过！<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo13.png" alt="security"><br>到这里，我们的自定义内存中的数据源就定义好了，接下来我们换成数据库中的形式。</p><h2 id="db形式的数据源"><a href="#db形式的数据源" class="headerlink" title="db形式的数据源"></a>db形式的数据源</h2><ul><li>因为要使用数据库，那我们就选用spring-data jpa去操作数据库，首先引入依赖:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>接下来就是配置mysql数据源和hibernate的属性了：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">jason</span></span><br><span class="line"><span class="attr">    url:</span>  <span class="attr">jdbc:mysql://localhost:3306/springsecurity_demos?useSSL=false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line"><span class="attr">      hibernate:</span></span><br><span class="line"><span class="attr">        format_sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>初始化sql脚本如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> springsecurity_demos;</span><br><span class="line"><span class="keyword">USE</span> springsecurity_demos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`role`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`role`</span>  (</span><br><span class="line">                       <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">                       <span class="string">`role_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">3</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`role`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'user'</span>, <span class="string">'this is a user role.'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`role`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'admin'</span>, <span class="string">'this is a admin role.'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>  (</span><br><span class="line">                       <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">                       <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       <span class="string">`role_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                       PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">2</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'jsbintask'</span>, <span class="string">'$2a$10$WfUOGFJzAkPeRU3ZK2q6v.FNFcgIBrhixFNQ/htTKx71RK/OBMYaC'</span>, <span class="number">22</span>, <span class="string">'China, Wuhan'</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>我们的数据库一共有两张表，user表和role表，此处为了简单，我们的user和role设为1对多关系，user表中添加role_id，然后编写User, Role实体类，UserRepository, RoleRepository:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Role</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>好了，接下就是要与sprinsecurity结合了，在此之前，还有一点需要我们明白，springsecurity中对于用户的表示有自己的实体类相对应，它就是UserDetails，所以我们编写一个AuthUser实现这个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> roles.isEmpty() ? Collections.EMPTY_LIST :</span><br><span class="line">                (roles.parallelStream().map(role -&gt; <span class="keyword">new</span> SimpleGrantedAuthority(role.getRoleName())).collect(Collectors.toList()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中关于账号过期，enable全部设置为通过，接下来就是编写CustomUserDetailsService，返回我们自己的AuthUser：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RoleRepository roleRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userRepository.findByUsername(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"user: "</span> + username + <span class="string">" is not found."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthUser(user.getUsername(), user.getPassword(), roleRepository.findAllById(Collections.singletonList(user.getRoleId())));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意，此处如果没有找到用户，要抛出 UsernameNotFoundException，然后springsecurity会处理。<br><strong>到此，其实我们的UserDetails已经注入了Spring中， what？ 不是还只定义了吗，其实我们加上@Service和@Primary之后，springsecurity就能自己检测到这个bean，然后作为自己的UserDetailsService，<br>当然，如果我们像上面一样使用覆盖方法的方式同样可行。 但是接下来还有差一步，我们上面已经说到了，再springsecurity中一定要对密码进行处理，比如我们上面就是不加密，在前面加上{noop}，这里我们不这里处理，<br>我们配置一个密码加密器：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BCryptPasswordEncoder <span class="title">bCryptPasswordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样，springsecurity也能检测到，这样定义就ok了，那这样就有另一个问题了，我们的密码是加密过了，所以我们的数据库初始化一个加密过的密码才行，所以我们再使用这个加密器生成一个密码“123456”：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BCryptPasswordEncoder bCryptPasswordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    System.out.println(bCryptPasswordEncoder.encode(<span class="string">"123456"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后将密码放入数据库。然后同样去登陆，输入数据库中用户名，密码，同样帮我们转发了主页面hello，至此，我们的db中的数据源定义也同样通过了！</p><p><strong><em>源码地址（麻烦点个star哦）：<a href="https://github.com/jsbintask22/spring-security-demos.git" target="_blank" rel="noopener">https://github.com/jsbintask22/spring-security-demos.git</a></em></strong></p><h1 id="结束语："><a href="#结束语：" class="headerlink" title="结束语："></a>结束语：</h1><p>本次我们手把手操作并且总结了springsecurity的一般用法，并且提出了很多值得注意的点。 那么接下来我们就站在一个高一点角度来分析一下springsecurity的架构吧。<br>关注我！<br><img src="http://qiniu.jsbintask.cn/qrcode_jsbintask_1.jpg" alt="qrcode"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/dmease-472de8ab-809d-4979-b023-bcaeefe493f9.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="springsecurity" scheme="https://jsbintask.cn/tags/springsecurity/"/>
    
      <category term="springboot" scheme="https://jsbintask.cn/tags/springboot/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合springsecurity从Hello World到源码解析（二）-初始化配置源码解析</title>
    <link href="https://jsbintask.cn/2019/01/08/springsecurity-configsourcecode/"/>
    <id>https://jsbintask.cn/2019/01/08/springsecurity-configsourcecode/</id>
    <published>2019-01-08T06:15:00.000Z</published>
    <updated>2019-01-09T06:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot整合springsecurity从Hello-World到源码解析（二）：springsecurity配置加载解析"><a href="#springboot整合springsecurity从Hello-World到源码解析（二）：springsecurity配置加载解析" class="headerlink" title="springboot整合springsecurity从Hello World到源码解析（二）：springsecurity配置加载解析"></a>springboot整合springsecurity从Hello World到源码解析（二）：springsecurity配置加载解析</h1><p><img src="http://qiniu.jsbintask.cn/oakland_hills_by_chateaugrief_dcp3s98-fullview.jpg-blog_960_440.jpg" alt="cover"><br><a id="more"></a><br><em><a href="https://jsbintask.cn/2019/01/08/springsecurity-helloworld/#more">上一篇</a>博客我们介绍了hellowrold入门，并且成功的看到了springsecurity的拦截效果，接下来我们就来看看springsecurity是如何做到的。</em></p><h1 id="启动配置详解"><a href="#启动配置详解" class="headerlink" title="启动配置详解"></a>启动配置详解</h1><p>我们知道（不知道的就当知道吧，哈哈），springboot启动时会帮我自动配置好很多的默认配置项，并且加载配置类都会写在spring.factories文件中，所以我们这里开始，看看springsecurity做了<br>那些配置，打开idea，ctrl+shift+n * 2，查找spring.factories文件：如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo3.png" alt="spring.factories"><br>随后在该配置文件中，查找security，如下：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo4.png" alt="security"><br>我们可以看到，一共初始化了9个security相关的类，这里我们不关注oauth2（以后再说）和reactive（springboot2以后新特性），还有<br><strong>SecurityAutoConfiguration， SecurityRequestMatcherProviderAutoConfiguration， SecurityFilterAutoConfiguration, UserDetailsServiceAutoConfiguration</strong>这四个类，首先我们看下</p><h3 id="SecurityAutoConfiguration："><a href="#SecurityAutoConfiguration：" class="headerlink" title="SecurityAutoConfiguration："></a>SecurityAutoConfiguration：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(DefaultAuthenticationEventPublisher.class)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(SecurityProperties.class)</span><br><span class="line"><span class="meta">@Import</span>(&#123; SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class,</span><br><span class="line">SecurityDataConfiguration.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(AuthenticationEventPublisher.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultAuthenticationEventPublisher <span class="title">authenticationEventPublisher</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ApplicationEventPublisher publisher)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultAuthenticationEventPublisher(publisher);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>1.可以看出，这个类初始化了DefaultAuthenticationEventPublisher，看名字就知道，一个事件发布器，其内部实现就是spring的ApplicationEventPublisher，<br>用于springsecurity各种权限时间的交互，如登陆失败，会发布一个事件，然后通知其它组件做出相应的响应。</p></li><li><p>2.导入了一个配置类，SecurityProperties，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name = <span class="string">"user"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; roles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> passwordGenerated = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure></li></ul><p>现在我们知道，我们上一篇博客中yml文件中配置的用户名密码就是这这里的配置，如果不进行配置，默认生成一个uuid的密码，从控制台可以看到该密码。</p><ul><li>3.另外导入了三个配置项<br><strong>SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class, SecurityDataConfiguration.class</strong><br>其中data相关的因为此处我们没有导入spring-data相关的引用，不生效。<br>然后我们继续观察 WebSecurityEnablerConfiguration.class，看名字我们知道这是web环境下的初始化的配置，如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(WebSecurityConfigurerAdapter.class)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = BeanIds.SPRING_SECURITY_FILTER_CHAIN)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityEnablerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>主要作用帮我们加入了 <strong>@EnableWebSecurity</strong>注解，该注解的作用为开启springsecurity httpsecurity的自定义配置，即我们可以自己定义web环境的url配置（后面的主要关注点）。<br>接下来就是<strong>@SpringBootWebSecurityConfiguration</strong>，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(WebSecurityConfigurerAdapter.class)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(WebSecurityConfigurerAdapter.class)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootWebSecurityConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Order</span>(SecurityProperties.BASIC_AUTH_ORDER)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关键点来了，这个配置项检查了servlet环境下spring容器中是否有WebSecurityConfiguraerAdapter这个bean，如果没有，就帮我们默认初始化了一个。所以我们对于springsecurity<br>的配置就要继承WebSecurityConfigurerAdapter，然后实现自定义的配置。<br><strong>以上就是SecurityAutoConfiguration该配置项的作用，接下来我们看下SecurityRequestMatcherProviderAutoConfiguration</strong></p><h2 id="SecurityRequestMatcherProviderAutoConfiguration"><a href="#SecurityRequestMatcherProviderAutoConfiguration" class="headerlink" title="SecurityRequestMatcherProviderAutoConfiguration"></a>SecurityRequestMatcherProviderAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; RequestMatcher.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityRequestMatcherProviderAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(DispatcherServlet.class)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(HandlerMappingIntrospector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcRequestMatcherConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(DispatcherServlet.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestMatcherProvider <span class="title">requestMatcherProvider</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HandlerMappingIntrospector introspector)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MvcRequestMatcherProvider(introspector);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ResourceConfig.class)</span><br><span class="line"><span class="meta">@ConditionalOnMissingClass</span>(<span class="string">"org.springframework.web.servlet.DispatcherServlet"</span>)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(JerseyApplicationPath.class)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JerseyRequestMatcherConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestMatcherProvider <span class="title">requestMatcherProvider</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">JerseyApplicationPath applicationPath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JerseyRequestMatcherProvider(applicationPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，主要初始化了一个MvcRequestMatcherProvider，了解过springmvc的同学应该知道，springmvc处理请求映射的主要类就是HandlerMapping，而HandlerMappingIntrospector<br>类是HandlerMapping的集合工具类，springsecurity此处就是从spring容器中获取了该工具类，然后供自己内部使用(处理我们的自定义映射，后面具体讲解）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcRequestMatcherProvider</span> <span class="keyword">implements</span> <span class="title">RequestMatcherProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HandlerMappingIntrospector introspector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MvcRequestMatcherProvider</span><span class="params">(HandlerMappingIntrospector introspector)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.introspector = introspector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestMatcher <span class="title">getRequestMatcher</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MvcRequestMatcher(<span class="keyword">this</span>.introspector, pattern);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就是<strong>SecurityFilterAutoConfiguration</strong>了：</p><h2 id="SecurityFilterAutoConfiguration"><a href="#SecurityFilterAutoConfiguration" class="headerlink" title="SecurityFilterAutoConfiguration"></a>SecurityFilterAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(SecurityProperties.class)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; AbstractSecurityWebApplicationInitializer.class,</span><br><span class="line">SessionCreationPolicy.class &#125;)</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(SecurityAutoConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityFilterAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_FILTER_NAME = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(name = DEFAULT_FILTER_NAME)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DelegatingFilterProxyRegistrationBean <span class="title">securityFilterChainRegistration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SecurityProperties securityProperties)</span> </span>&#123;</span><br><span class="line">DelegatingFilterProxyRegistrationBean registration = <span class="keyword">new</span> DelegatingFilterProxyRegistrationBean(</span><br><span class="line">DEFAULT_FILTER_NAME);</span><br><span class="line">registration.setOrder(securityProperties.getFilter().getOrder());</span><br><span class="line">registration.setDispatcherTypes(getDispatcherTypes(securityProperties));</span><br><span class="line"><span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> EnumSet&lt;DispatcherType&gt; <span class="title">getDispatcherTypes</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SecurityProperties securityProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (securityProperties.getFilter().getDispatcherTypes() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> securityProperties.getFilter().getDispatcherTypes().stream()</span><br><span class="line">.map((type) -&gt; DispatcherType.valueOf(type.name())).collect(Collectors</span><br><span class="line">.collectingAndThen(Collectors.toSet(), EnumSet::copyOf));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们发现这个类有一个@AutoConfigureAfter(SecurityAutoConfiguration.class)，也就是说这个类要在我们讲的第一个<strong>SecurityAutoConfiguration</strong>才行（why？ 别急），<br>然后它拿到我们一开始说的SecurityProperties，帮我们做了一个Filter：<strong>但是！这个filter具体是啥，它沒有直接告訴我們，只把它在spring中的bean的名字给出来了，springSecurityFilterChain</strong>，<br>也就是説存在一个这样名字的springsecurity的filter，然后被spring代理了，管理它的生命周期。但是从名字我们大概可以猜出，不只是一个filter，是一个filter列表，既然这样，那我们直接在项目中搜索，看那个地方有这个名字的bean<br>最终在该地方找到：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo5.png" alt="springSecurityFilterChain">，</p><h2 id="发现该类是在WebSecurityConfiguration中初始化的，那WebSecurityConfiguration又是在哪来的呢，上面我们说到-EnableWebSecurity的时候，开启WebSecurityAdapter的配置，其实那个时候已经导入了（哈哈，上面我也没注意到），"><a href="#发现该类是在WebSecurityConfiguration中初始化的，那WebSecurityConfiguration又是在哪来的呢，上面我们说到-EnableWebSecurity的时候，开启WebSecurityAdapter的配置，其实那个时候已经导入了（哈哈，上面我也没注意到），" class="headerlink" title="发现该类是在WebSecurityConfiguration中初始化的，那WebSecurityConfiguration又是在哪来的呢，上面我们说到@EnableWebSecurity的时候，开启WebSecurityAdapter的配置，其实那个时候已经导入了（哈哈，上面我也没注意到），"></a>发现该类是在WebSecurityConfiguration中初始化的，那<strong>WebSecurityConfiguration</strong>又是在哪来的呢，上面我们说到@EnableWebSecurity的时候，开启WebSecurityAdapter的配置，其实那个时候已经导入了（哈哈，上面我也没注意到），</h2><h3 id="springSecurityFilterChain"><a href="#springSecurityFilterChain" class="headerlink" title="springSecurityFilterChain"></a>springSecurityFilterChain</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> WebSecurity webSecurity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Boolean debugEnabled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; webSecurityConfigurers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ClassLoader beanClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"springSecurityFilterChain"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Filter <span class="title">springSecurityFilterChain</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> hasConfigurers = webSecurityConfigurers != <span class="keyword">null</span></span><br><span class="line">&amp;&amp; !webSecurityConfigurers.isEmpty();</span><br><span class="line"><span class="keyword">if</span> (!hasConfigurers) &#123;</span><br><span class="line">WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor</span><br><span class="line">.postProcess(<span class="keyword">new</span> WebSecurityConfigurerAdapter() &#123;</span><br><span class="line">&#125;);</span><br><span class="line">webSecurity.apply(adapter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> webSecurity.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到这个初始化类有两个主要成员变量，WebSecurity和webSecurityConfigurers，而从这个springSecurityFilterChain方法我们可以看到该filter是通过构造器WebSecurity构造而来，<br>纳尼？ 既然Websecurity构造了springSecurityFilterChain，那为什么下面还有一个 webSecurityConfigurers，并且是一个WebSecurity的list呢？<br>别急，我们来看下他们之间的关系。我们注意到还有这样一个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilterChainProxySecurityConfigurer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ObjectPostProcessor&lt;Object&gt; objectPostProcessor,</span></span></span><br><span class="line"><span class="function"><span class="params">        @Value(<span class="string">"#&#123;@autowiredWebSecurityConfigurersIgnoreParents.getWebSecurityConfigurers()&#125;"</span>)</span> List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; webSecurityConfigurers)</span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    webSecurity = objectPostProcessor</span><br><span class="line">            .postProcess(<span class="keyword">new</span> WebSecurity(objectPostProcessor));</span><br><span class="line">    <span class="keyword">if</span> (debugEnabled != <span class="keyword">null</span>) &#123;</span><br><span class="line">        webSecurity.debug(debugEnabled);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Collections.sort(webSecurityConfigurers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line"></span><br><span class="line">    Integer previousOrder = <span class="keyword">null</span>;</span><br><span class="line">    Object previousConfig = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (SecurityConfigurer&lt;Filter, WebSecurity&gt; config : webSecurityConfigurers) &#123;</span><br><span class="line">        Integer order = AnnotationAwareOrderComparator.lookupOrder(config);</span><br><span class="line">        <span class="keyword">if</span> (previousOrder != <span class="keyword">null</span> &amp;&amp; previousOrder.equals(order)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"@Order on WebSecurityConfigurers must be unique. Order of "</span></span><br><span class="line">                            + order + <span class="string">" was already used on "</span> + previousConfig + <span class="string">", so it cannot be used on "</span></span><br><span class="line">                            + config + <span class="string">" too."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        previousOrder = order;</span><br><span class="line">        previousConfig = config;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (SecurityConfigurer&lt;Filter, WebSecurity&gt; webSecurityConfigurer : webSecurityConfigurers) &#123;</span><br><span class="line">        webSecurity.apply(webSecurityConfigurer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.webSecurityConfigurers = webSecurityConfigurers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从这里我们就知道他们的关系了， 这个webSecurityConfigurers是通过spring注入进去的（尼玛，我都快整蒙圈了），他就代表那个过滤器链，也就是权限控制的关键，而我们一开始看到的Websecurity就是这个过滤器链的入口，由它来一个个的将<br>过过滤器链引用作为自己的成员变量，好了，他们之间的关系我们搞清楚了，接下来就又多了一个新问题，那个过滤器链又是在哪里给初始化了呢。</p><blockquote><p>@Value(“<a href="mailto:#{@autowiredWebSecurityConfigurersIgnoreParents.getWebSecurityConfigurers" target="_blank" rel="noopener">#{@autowiredWebSecurityConfigurersIgnoreParents.getWebSecurityConfigurers</a>()}”)</p></blockquote><p>这个el表达式的bean同样在这个配置类中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AutowiredWebSecurityConfigurersIgnoreParents <span class="title">autowiredWebSecurityConfigurersIgnoreParents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AutowiredWebSecurityConfigurersIgnoreParents(beanFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那我们继续看这个AutowiredWebSecurityConfigurersIgnoreParents，它拿到了spring的容器beanFactory，然后得到了那个过滤器链，然后我还是太天真：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; getWebSecurityConfigurers() &#123;</span><br><span class="line">List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; webSecurityConfigurers = <span class="keyword">new</span> ArrayList&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt;();</span><br><span class="line">Map&lt;String, WebSecurityConfigurer&gt; beansOfType = beanFactory</span><br><span class="line">.getBeansOfType(WebSecurityConfigurer.class);</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, WebSecurityConfigurer&gt; entry : beansOfType.entrySet()) &#123;</span><br><span class="line">webSecurityConfigurers.add(entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> webSecurityConfigurers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它居然不是直接初始化的，而是从beanFactory中取出来了所有WebSecurityConfigurer类型的bean，尼玛！那我们接着看实现了WebSecurityConfigurer并且作为bean在spring中已经初始化了类是哪一个，<br>不着不知道，依照吓一跳，查看类关系，居然又回到了最初的起点：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo6.png" alt="springSecurityFilterChain"><br><strong>又是它！</strong>，我们继续查看他，终于！我们找到了那个过滤器链！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> HttpSecurity <span class="title">getHttp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (http != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> http;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    DefaultAuthenticationEventPublisher eventPublisher = objectPostProcessor</span><br><span class="line">            .postProcess(<span class="keyword">new</span> DefaultAuthenticationEventPublisher());</span><br><span class="line">    localConfigureAuthenticationBldr.authenticationEventPublisher(eventPublisher);</span><br><span class="line">    </span><br><span class="line">    AuthenticationManager authenticationManager = authenticationManager();</span><br><span class="line">    authenticationBuilder.parentAuthenticationManager(authenticationManager);</span><br><span class="line">    authenticationBuilder.authenticationEventPublisher(eventPublisher);</span><br><span class="line">    Map&lt;Class&lt;? extends Object&gt;, Object&gt; sharedObjects = createSharedObjects();</span><br><span class="line">    </span><br><span class="line">    http = <span class="keyword">new</span> HttpSecurity(objectPostProcessor, authenticationBuilder,</span><br><span class="line">            sharedObjects);</span><br><span class="line">    <span class="keyword">if</span> (!disableDefaults) &#123;</span><br><span class="line">        <span class="comment">// @formatter:off</span></span><br><span class="line">        http</span><br><span class="line">            .csrf().and()</span><br><span class="line">            .addFilter(<span class="keyword">new</span> WebAsyncManagerIntegrationFilter())</span><br><span class="line">            .exceptionHandling().and()</span><br><span class="line">            .headers().and()</span><br><span class="line">            .sessionManagement().and()</span><br><span class="line">            .securityContext().and()</span><br><span class="line">            .requestCache().and()</span><br><span class="line">            .anonymous().and()</span><br><span class="line">            .servletApi().and()</span><br><span class="line">            .apply(<span class="keyword">new</span> DefaultLoginPageConfigurer&lt;&gt;()).and()</span><br><span class="line">            .logout();</span><br><span class="line">        <span class="comment">// @formatter:on</span></span><br><span class="line">        ClassLoader classLoader = <span class="keyword">this</span>.context.getClassLoader();</span><br><span class="line">        List&lt;AbstractHttpConfigurer&gt; defaultHttpConfigurers =</span><br><span class="line">                SpringFactoriesLoader.loadFactories(AbstractHttpConfigurer.class, classLoader);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (AbstractHttpConfigurer configurer : defaultHttpConfigurers) &#123;</span><br><span class="line">            http.apply(configurer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    configure(http);</span><br><span class="line">    <span class="keyword">return</span> http;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>由此方法我们得知，最终的过滤器链是保存在HttpSecuriry中，并且通过spring把所有AbstractHttpConfigurer子类都加入到容器中并且加入到了过滤器链中 <strong><em>http:apply(…)</em></strong> ：<br>那我们看下AbstractHttpConfigurer有哪些子类<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo7.png" alt="springSecurityFilterChain">，<br>:sob: 终于找到了，顺便看下HttpSecurity构成：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSecurity</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class"><span class="title">AbstractConfiguredSecurityBuilder</span>&lt;<span class="title">DefaultSecurityFilterChain</span>, <span class="title">HttpSecurity</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">SecurityBuilder</span>&lt;<span class="title">DefaultSecurityFilterChain</span>&gt;,</span></span><br><span class="line"><span class="class"><span class="title">HttpSecurityBuilder</span>&lt;<span class="title">HttpSecurity</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RequestMatcherConfigurer requestMatcherConfigurer;</span><br><span class="line"><span class="keyword">private</span> List&lt;Filter&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> RequestMatcher requestMatcher = AnyRequestMatcher.INSTANCE;</span><br><span class="line"><span class="keyword">private</span> FilterComparator comparator = <span class="keyword">new</span> FilterComparator();</span><br></pre></td></tr></table></figure></p><p>另外从上面那个方法中，我们还看到了一个很熟悉的过滤器：DefaultLoginPageConfigurer，我们查看它。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DefaultLoginPageGeneratingFilter loginPageGeneratingFilter = <span class="keyword">new</span> DefaultLoginPageGeneratingFilter();</span><br><span class="line"><span class="keyword">private</span> DefaultLogoutPageGeneratingFilter logoutPageGeneratingFilter = <span class="keyword">new</span> DefaultLogoutPageGeneratingFilter();</span><br></pre></td></tr></table></figure></p><p>它有两个过滤器，登陆页面和注销页面，我们继续查看登陆页面，这个时候发现一点意外的收获：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> loginError = isErrorPage(request);</span><br><span class="line"><span class="keyword">boolean</span> logoutSuccess = isLogoutSuccess(request);</span><br><span class="line"><span class="keyword">if</span> (isLoginUrlRequest(request) || loginError || logoutSuccess) &#123;</span><br><span class="line">String loginPageHtml = generateLoginPageHtml(request, loginError,</span><br><span class="line">logoutSuccess);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">response.setContentLength(loginPageHtml.getBytes(StandardCharsets.UTF_8).length);</span><br><span class="line">response.getWriter().write(loginPageHtml);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">generateLoginPageHtml</span><span class="params">(HttpServletRequest request, <span class="keyword">boolean</span> loginError,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> logoutSuccess)</span> </span>&#123;</span><br><span class="line">String errorMsg = <span class="string">"Invalid credentials"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (loginError) &#123;</span><br><span class="line">HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">AuthenticationException ex = (AuthenticationException) session</span><br><span class="line">.getAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);</span><br><span class="line">errorMsg = ex != <span class="keyword">null</span> ? ex.getMessage() : <span class="string">"Invalid credentials"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">"&lt;!DOCTYPE html&gt;\n"</span></span><br><span class="line">+ <span class="string">"&lt;html lang=\"en\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"  &lt;head&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;meta charset=\"utf-8\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;meta name=\"description\" content=\"\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;meta name=\"author\" content=\"\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;title&gt;Please sign in&lt;/title&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M\" crossorigin=\"anonymous\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"    &lt;link href=\"https://getbootstrap.com/docs/4.0/examples/signin/signin.css\" rel=\"stylesheet\" crossorigin=\"anonymous\"/&gt;\n"</span></span><br><span class="line">+ <span class="string">"  &lt;/head&gt;\n"</span></span><br><span class="line">+ <span class="string">"  &lt;body&gt;\n"</span></span><br><span class="line">+ <span class="string">"     &lt;div class=\"container\"&gt;\n"</span>);</span><br><span class="line"></span><br><span class="line">String contextPath = request.getContextPath();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.formLoginEnabled) &#123;</span><br><span class="line">sb.append(<span class="string">"      &lt;form class=\"form-signin\" method=\"post\" action=\""</span> + contextPath + <span class="keyword">this</span>.authenticationUrl + <span class="string">"\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"        &lt;h2 class=\"form-signin-heading\"&gt;Please sign in&lt;/h2&gt;\n"</span></span><br><span class="line">+ createError(loginError, errorMsg)</span><br><span class="line">+ createLogoutSuccess(logoutSuccess)</span><br><span class="line">+ <span class="string">"        &lt;p&gt;\n"</span></span><br><span class="line">+ <span class="string">"          &lt;label for=\"username\" class=\"sr-only\"&gt;Username&lt;/label&gt;\n"</span></span><br><span class="line">+ <span class="string">"          &lt;input type=\"text\" id=\"username\" name=\""</span> + <span class="keyword">this</span>.usernameParameter + <span class="string">"\" class=\"form-control\" placeholder=\"Username\" required autofocus&gt;\n"</span></span><br><span class="line">+ <span class="string">"        &lt;/p&gt;\n"</span></span><br><span class="line">+ <span class="string">"        &lt;p&gt;\n"</span></span><br><span class="line">+ <span class="string">"          &lt;label for=\"password\" class=\"sr-only\"&gt;Password&lt;/label&gt;\n"</span></span><br><span class="line">+ <span class="string">"          &lt;input type=\"password\" id=\"password\" name=\""</span> + <span class="keyword">this</span>.passwordParameter + <span class="string">"\" class=\"form-control\" placeholder=\"Password\" required&gt;\n"</span></span><br><span class="line">+ <span class="string">"        &lt;/p&gt;\n"</span></span><br><span class="line">+ createRememberMe(<span class="keyword">this</span>.rememberMeParameter)</span><br><span class="line">+ renderHiddenInputs(request)</span><br><span class="line">+ <span class="string">"        &lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\"&gt;Sign in&lt;/button&gt;\n"</span></span><br><span class="line">+ <span class="string">"      &lt;/form&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (openIdEnabled) &#123;</span><br><span class="line">sb.append(<span class="string">"      &lt;form name=\"oidf\" class=\"form-signin\" method=\"post\" action=\""</span> + contextPath + <span class="keyword">this</span>.openIDauthenticationUrl + <span class="string">"\"&gt;\n"</span></span><br><span class="line">+ <span class="string">"        &lt;h2 class=\"form-signin-heading\"&gt;Login with OpenID Identity&lt;/h2&gt;\n"</span></span><br><span class="line">+ createError(loginError, errorMsg)</span><br><span class="line">+ createLogoutSuccess(logoutSuccess)</span><br><span class="line">+ <span class="string">"        &lt;p&gt;\n"</span></span><br><span class="line">+ <span class="string">"          &lt;label for=\"username\" class=\"sr-only\"&gt;Identity&lt;/label&gt;\n"</span></span><br><span class="line">+ <span class="string">"          &lt;input type=\"text\" id=\"username\" name=\""</span> + <span class="keyword">this</span>.openIDusernameParameter + <span class="string">"\" class=\"form-control\" placeholder=\"Username\" required autofocus&gt;\n"</span></span><br><span class="line">+ <span class="string">"        &lt;/p&gt;\n"</span></span><br><span class="line">+ createRememberMe(<span class="keyword">this</span>.openIDrememberMeParameter)</span><br><span class="line">+ renderHiddenInputs(request)</span><br><span class="line">+ <span class="string">"        &lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\"&gt;Sign in&lt;/button&gt;\n"</span></span><br><span class="line">+ <span class="string">"      &lt;/form&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (oauth2LoginEnabled) &#123;</span><br><span class="line">sb.append(<span class="string">"&lt;h2 class=\"form-signin-heading\"&gt;Login with OAuth 2.0&lt;/h3&gt;"</span>);</span><br><span class="line">sb.append(createError(loginError, errorMsg));</span><br><span class="line">sb.append(createLogoutSuccess(logoutSuccess));</span><br><span class="line">sb.append(<span class="string">"&lt;table class=\"table table-striped\"&gt;\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; clientAuthenticationUrlToClientName : oauth2AuthenticationUrlToClientName.entrySet()) &#123;</span><br><span class="line">sb.append(<span class="string">" &lt;tr&gt;&lt;td&gt;"</span>);</span><br><span class="line">String url = clientAuthenticationUrlToClientName.getKey();</span><br><span class="line">sb.append(<span class="string">"&lt;a href=\""</span>).append(contextPath).append(url).append(<span class="string">"\"&gt;"</span>);</span><br><span class="line">String clientName = HtmlUtils.htmlEscape(clientAuthenticationUrlToClientName.getValue());</span><br><span class="line">sb.append(clientName);</span><br><span class="line">sb.append(<span class="string">"&lt;/a&gt;"</span>);</span><br><span class="line">sb.append(<span class="string">"&lt;/td&gt;&lt;/tr&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">"&lt;/table&gt;&lt;/div&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们的helloworld那一篇博客中的登陆页面即来源于此！（还有点惊喜哈:joy:），谈到这，突然记起我们上面谈了一个问题。<br>@AutoConfigureAfter(SecurityAutoConfiguration.class)为什么要用这个，现在应该知道了吧（:joy:)，因为它要代理的filter在上一个注解。</p><hr><p>然后我们继续回来看WebSecurity这个构造器（是不是都已经忘记我们是在说这个类的:joy:），这个类很长，我们直接看注释以及主要成员变量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@link</span> WebSecurity&#125; is created by &#123;<span class="doctag">@link</span> WebSecurityConfiguration&#125; to create the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> FilterChainProxy&#125; known as the Spring Security Filter Chain</span></span><br><span class="line"><span class="comment"> * (springSecurityFilterChain). The springSecurityFilterChain is the &#123;<span class="doctag">@link</span> Filter&#125; that</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> DelegatingFilterProxy&#125; delegates to.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Customizations to the &#123;<span class="doctag">@link</span> WebSecurity&#125; can be made by creating a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> WebSecurityConfigurer&#125; or more likely by overriding</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> WebSecurityConfigurerAdapter&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> EnableWebSecurity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> WebSecurityConfiguration</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rob Winch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;RequestMatcher&gt; ignoredRequests = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;SecurityBuilder&lt;? extends SecurityFilterChain&gt;&gt; securityFilterChainBuilders = <span class="keyword">new</span> ArrayList&lt;SecurityBuilder&lt;? extends SecurityFilterChain&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> IgnoredRequestConfigurer ignoredRequestRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> FilterSecurityInterceptor filterSecurityInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HttpFirewall httpFirewall;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> debugEnabled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> WebInvocationPrivilegeEvaluator privilegeEvaluator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DefaultWebSecurityExpressionHandler defaultWebSecurityExpressionHandler = <span class="keyword">new</span> DefaultWebSecurityExpressionHandler();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SecurityExpressionHandler&lt;FilterInvocation&gt; expressionHandler = defaultWebSecurityExpressionHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Runnable postBuildAction = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>大概意思就是说这个类是被专门用来创建FilterChainProxy，即我们所知道的（springSecurityFilterChain），然后它的配置均来自于<br>WebSecurityConfigurer，默认实现是WebSecurityConfigurerAdapter，<strong>这是它第N次出现了！</strong><br>接下来我们研究下它的主要成员变量，List<requestmatcher> ignoredRequests = new ArrayList&lt;&gt;();一个匹配请求url的处理器，这处的作用是用来存储我们要忽略的url（不走springsecurity的过滤器链），<br>FilterSecurityInterceptor，过滤器链就是由它来调用的，HttpFirewall，看名字就知道起到了额外的配置作用（事实上初始化是一个空对象）。<br>securityFilterChainBuilders可以看成是WebSecurity内部过滤器链的引用。<br>defaultWebSecurityExpressionHandler是springsecurity el表达式处理器（后面讲解注解时我们再来回顾），比如说 <strong><em>hasAnyAuthority(…)</em></strong>，就可以由它来处理<br>另外还有一个 WebInvocationPrivilegeEvaluator，它叫做权限计算器，其实就是和防火墙一样，多了一层判断，它的默认实现是</requestmatcher></p><blockquote><p>public class DefaultWebInvocationPrivilegeEvaluator implements WebInvocationPrivilegeEvaluator {</p></blockquote><p>表示所有用户都由权限（因为是默认的）</p><p>最后，还有最后一个配置类<strong>UserDetailsServiceAutoConfiguration</strong></p><h2 id="UserDetailsServiceAutoConfiguration"><a href="#UserDetailsServiceAutoConfiguration" class="headerlink" title="UserDetailsServiceAutoConfiguration"></a>UserDetailsServiceAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(AuthenticationManager.class)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ObjectPostProcessor.class)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123; AuthenticationManager.class, AuthenticationProvider.class,</span><br><span class="line">UserDetailsService.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NOOP_PASSWORD_PREFIX = <span class="string">"&#123;noop&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PASSWORD_ALGORITHM_PATTERN = Pattern</span><br><span class="line">.compile(<span class="string">"^\\&#123;.+&#125;.*$"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory</span><br><span class="line">.getLog(UserDetailsServiceAutoConfiguration.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(type = <span class="string">"org.springframework.security.oauth2.client.registration.ClientRegistrationRepository"</span>)</span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InMemoryUserDetailsManager <span class="title">inMemoryUserDetailsManager</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SecurityProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;PasswordEncoder&gt; passwordEncoder)</span> </span>&#123;</span><br><span class="line">SecurityProperties.User user = properties.getUser();</span><br><span class="line">List&lt;String&gt; roles = user.getRoles();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> InMemoryUserDetailsManager(User.withUsername(user.getName())</span><br><span class="line">.password(getOrDeducePassword(user, passwordEncoder.getIfAvailable()))</span><br><span class="line">.roles(StringUtils.toStringArray(roles)).build());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getOrDeducePassword</span><span class="params">(SecurityProperties.User user,</span></span></span><br><span class="line"><span class="function"><span class="params">PasswordEncoder encoder)</span> </span>&#123;</span><br><span class="line">String password = user.getPassword();</span><br><span class="line"><span class="keyword">if</span> (user.isPasswordGenerated()) &#123;</span><br><span class="line">logger.info(String.format(<span class="string">"%n%nUsing generated security password: %s%n"</span>,</span><br><span class="line">user.getPassword()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (encoder != <span class="keyword">null</span> || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) &#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> NOOP_PASSWORD_PREFIX + password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次这个配置很简单，因为我们没有配置oauth2，所以它帮我们做了一个UserDetails，并且是根据我们配置的用户密码，把他们load到内存（因为没有db），以后的权限判断就根据<br>userDetails来判断了，由此可知，如果我们要扩展，实现该类也是必然的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次，我们从源码的角度查看了springboot帮我们做的配置（还真是绕了不少圈子），并且只得到了login页面的来源，接下来，我们就探究下springsecurity的具体配置！<br>关注我！<br><img src="http://qiniu.jsbintask.cn/qrcode_jsbintask_1.jpg" alt="qrcode"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;springboot整合springsecurity从Hello-World到源码解析（二）：springsecurity配置加载解析&quot;&gt;&lt;a href=&quot;#springboot整合springsecurity从Hello-World到源码解析（二）：springsecurity配置加载解析&quot; class=&quot;headerlink&quot; title=&quot;springboot整合springsecurity从Hello World到源码解析（二）：springsecurity配置加载解析&quot;&gt;&lt;/a&gt;springboot整合springsecurity从Hello World到源码解析（二）：springsecurity配置加载解析&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/oakland_hills_by_chateaugrief_dcp3s98-fullview.jpg-blog_960_440.jpg&quot; alt=&quot;cover&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="recommend" scheme="https://jsbintask.cn/categories/recommend/"/>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="springsecurity" scheme="https://jsbintask.cn/tags/springsecurity/"/>
    
      <category term="springboot" scheme="https://jsbintask.cn/tags/springboot/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合springsecurity从HelloWorld到源码解析（一）-helloworld</title>
    <link href="https://jsbintask.cn/2019/01/08/springsecurity-helloworld/"/>
    <id>https://jsbintask.cn/2019/01/08/springsecurity-helloworld/</id>
    <published>2019-01-08T03:11:00.000Z</published>
    <updated>2019-01-08T03:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot整合springsecurity从Hello-World到源码解析（一）：hello-world程序入门"><a href="#springboot整合springsecurity从Hello-World到源码解析（一）：hello-world程序入门" class="headerlink" title="springboot整合springsecurity从Hello World到源码解析（一）：hello world程序入门"></a>springboot整合springsecurity从Hello World到源码解析（一）：hello world程序入门</h1><p><img src="http://qiniu.jsbintask.cn/galapagos_tortoise____paper_cut_art_by_nvillustration_dcwri9e-fullview.jpg-blog_960_440.jpg" alt="security"><br><a id="more"></a></p><blockquote><p>摘要：权限控制在我们的项目当中一般都有用到，有简单的登录就搞定的权限访问，也有分级身份的权限控制，<br>而权限控制的方式对于不同的需求也有多种选择，小到使用代码硬编码，自定义过滤器，自定义拦截器等等。更加灵活的方式则是使用已有的权限工具。<br>如shiro，springsecurity等。而本系列博客将重点介绍springsecurity的工作原理以及应用。</p></blockquote><blockquote><p>springsecurity的官方介绍：Spring Security是一个功能强大且可高度自定义的身份验证和访问控制框架。它是保护基于Spring的应用程序的框架。<br>Spring Security是一个专注于为Java应用程序提供身份验证和授权的框架。与所有Spring项目一样，Spring Security的真正强大之处在于它可以轻松扩展以满足自定义要求</p></blockquote><p><strong>从上面的介绍我们知道，spring security是基于spring框架的，所以与spring基本无缝集成，而本系列博客也将使用最新的springboot（没接触过的可以先学习<a href="https://jsbintask.cn/tags/springboot">springboot系列教程</a>）<br>进行演示，好了，说了这么多废话，接下来看hello world的入门搭建。</strong></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>基础环境，springboot: 2.1.1.RELEASE<br>注意，因为本项目演示有多个，所以我把他们构建成了多个子项目。<br>父pom文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>basic-security<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jsbintask<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-demos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-security-demos<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demos project for Spring Security<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>hello-world版本pom文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jsbintask<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-demos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>basic-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意上方引入了lombok和freemarker，主要为了演示方便。</p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><ol><li><p>环境搭建好后，接下来开始编写helloworld程序，首先编写一个freemarker模板（不知道的可以当作html处理）<br><strong>hello.html放到templates目录下方</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello world from jsbintask.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  freemarker:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    template-loader-path:</span> <span class="attr">classpath:/templates/</span></span><br><span class="line"><span class="attr">    suffix:</span> <span class="string">.html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">      roles:</span> <span class="string">user,</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure></li></ol><p>上方配置先不进行讲解，下章解析工作原理时会着重进行讲解，各位可以先跟着配置。</p><ol start="3"><li>编写controller<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(ModelAndView mv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>此处为映射请求 /hello 到我们编写的 hello.html程序。</p><ol start="4"><li>启动应用（main app)<br>接下来我们在浏览器访问 <a href="http://localhost:8080/hello" target="_blank" rel="noopener">hello</a>, 出现如下拦截页面：<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo1.png"><br>代表我们的hello请求已经被拦截。接下来输入 application.yml中配置的用户名密码，成功访问。<br><img src="https://raw.githubusercontent.com/jsbintask22/static/master/images/springsecurity-demo2.png" alt="springsecurity"><br><strong>我们的helloworld程序也就成功了。</strong></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本hello world程序展示了springboot结合springsecurity基础配置，接下来我将讲解springsecurity是如何工作的。<br>本项目git地址：<a href="https://github.com/jsbintask22/spring-security-demos" target="_blank" rel="noopener">spring-security-demos</a><br>关注我！<br><img src="http://qiniu.jsbintask.cn/qrcode_jsbintask_1.jpg" alt="qrcode"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;springboot整合springsecurity从Hello-World到源码解析（一）：hello-world程序入门&quot;&gt;&lt;a href=&quot;#springboot整合springsecurity从Hello-World到源码解析（一）：hello-world程序入门&quot; class=&quot;headerlink&quot; title=&quot;springboot整合springsecurity从Hello World到源码解析（一）：hello world程序入门&quot;&gt;&lt;/a&gt;springboot整合springsecurity从Hello World到源码解析（一）：hello world程序入门&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://qiniu.jsbintask.cn/galapagos_tortoise____paper_cut_art_by_nvillustration_dcwri9e-fullview.jpg-blog_960_440.jpg&quot; alt=&quot;security&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://jsbintask.cn/tags/java/"/>
    
      <category term="springsecurity" scheme="https://jsbintask.cn/tags/springsecurity/"/>
    
      <category term="springboot" scheme="https://jsbintask.cn/tags/springboot/"/>
    
      <category term="源码" scheme="https://jsbintask.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
